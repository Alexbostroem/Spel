
Debug/spel:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
 *
 */
__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 f8d8 	bl	200001b8 <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <ActivateRow>:
#include "define_global.h"

//GLOBAL
int keyb_state = 0;

void ActivateRow( unsigned int row ) {
20000010:	b580      	push	{r7, lr}
20000012:	b082      	sub	sp, #8
20000014:	af00      	add	r7, sp, #0
20000016:	6078      	str	r0, [r7, #4]
20000018:	687b      	ldr	r3, [r7, #4]
2000001a:	2b05      	cmp	r3, #5
2000001c:	d81d      	bhi.n	2000005a <ActivateRow+0x4a>
2000001e:	687b      	ldr	r3, [r7, #4]
20000020:	009a      	lsls	r2, r3, #2
20000022:	4b10      	ldr	r3, [pc, #64]	; (20000064 <ActivateRow+0x54>)
20000024:	18d3      	adds	r3, r2, r3
20000026:	681b      	ldr	r3, [r3, #0]
20000028:	469f      	mov	pc, r3

	switch( row )
	{
	case 1: *GPIO_D_ODR_HIGH = 0x10; break;
2000002a:	4b0f      	ldr	r3, [pc, #60]	; (20000068 <ActivateRow+0x58>)
2000002c:	2210      	movs	r2, #16
2000002e:	701a      	strb	r2, [r3, #0]
20000030:	e013      	b.n	2000005a <ActivateRow+0x4a>
	case 2: *GPIO_D_ODR_HIGH = 0x20; break;
20000032:	4b0d      	ldr	r3, [pc, #52]	; (20000068 <ActivateRow+0x58>)
20000034:	2220      	movs	r2, #32
20000036:	701a      	strb	r2, [r3, #0]
20000038:	e00f      	b.n	2000005a <ActivateRow+0x4a>
	case 3: *GPIO_D_ODR_HIGH = 0x40; break;
2000003a:	4b0b      	ldr	r3, [pc, #44]	; (20000068 <ActivateRow+0x58>)
2000003c:	2240      	movs	r2, #64	; 0x40
2000003e:	701a      	strb	r2, [r3, #0]
20000040:	e00b      	b.n	2000005a <ActivateRow+0x4a>
	case 4: *GPIO_D_ODR_HIGH = 0x80; break;
20000042:	4b09      	ldr	r3, [pc, #36]	; (20000068 <ActivateRow+0x58>)
20000044:	2280      	movs	r2, #128	; 0x80
20000046:	701a      	strb	r2, [r3, #0]
20000048:	e007      	b.n	2000005a <ActivateRow+0x4a>
	case 5: *GPIO_D_ODR_HIGH = 0xF0; break;
2000004a:	4b07      	ldr	r3, [pc, #28]	; (20000068 <ActivateRow+0x58>)
2000004c:	22f0      	movs	r2, #240	; 0xf0
2000004e:	701a      	strb	r2, [r3, #0]
20000050:	e003      	b.n	2000005a <ActivateRow+0x4a>
	case 0: *GPIO_D_ODR_HIGH = 0x00; break;
20000052:	4b05      	ldr	r3, [pc, #20]	; (20000068 <ActivateRow+0x58>)
20000054:	2200      	movs	r2, #0
20000056:	701a      	strb	r2, [r3, #0]
20000058:	46c0      	nop			; (mov r8, r8)
	}
}
2000005a:	46c0      	nop			; (mov r8, r8)
2000005c:	46bd      	mov	sp, r7
2000005e:	b002      	add	sp, #8
20000060:	bd80      	pop	{r7, pc}
20000062:	46c0      	nop			; (mov r8, r8)
20000064:	20005d4c 	andcs	r5, r0, ip, asr #26
20000068:	40020c15 	andmi	r0, r2, r5, lsl ip

2000006c <ReadColumn>:

int ReadColumn( void )
{ 
2000006c:	b580      	push	{r7, lr}
2000006e:	b082      	sub	sp, #8
20000070:	af00      	add	r7, sp, #0
unsigned char c;
c = *GPIO_D_IDR_HIGH;
20000072:	4a12      	ldr	r2, [pc, #72]	; (200000bc <ReadColumn+0x50>)
20000074:	1dfb      	adds	r3, r7, #7
20000076:	7812      	ldrb	r2, [r2, #0]
20000078:	701a      	strb	r2, [r3, #0]
if ( c & 0x8 ) return 4;
2000007a:	1dfb      	adds	r3, r7, #7
2000007c:	781b      	ldrb	r3, [r3, #0]
2000007e:	2208      	movs	r2, #8
20000080:	4013      	ands	r3, r2
20000082:	d001      	beq.n	20000088 <ReadColumn+0x1c>
20000084:	2304      	movs	r3, #4
20000086:	e015      	b.n	200000b4 <ReadColumn+0x48>
if ( c & 0x4 ) return 3;
20000088:	1dfb      	adds	r3, r7, #7
2000008a:	781b      	ldrb	r3, [r3, #0]
2000008c:	2204      	movs	r2, #4
2000008e:	4013      	ands	r3, r2
20000090:	d001      	beq.n	20000096 <ReadColumn+0x2a>
20000092:	2303      	movs	r3, #3
20000094:	e00e      	b.n	200000b4 <ReadColumn+0x48>
if ( c & 0x2 ) return 2;
20000096:	1dfb      	adds	r3, r7, #7
20000098:	781b      	ldrb	r3, [r3, #0]
2000009a:	2202      	movs	r2, #2
2000009c:	4013      	ands	r3, r2
2000009e:	d001      	beq.n	200000a4 <ReadColumn+0x38>
200000a0:	2302      	movs	r3, #2
200000a2:	e007      	b.n	200000b4 <ReadColumn+0x48>
if ( c & 0x1 ) return 1;
200000a4:	1dfb      	adds	r3, r7, #7
200000a6:	781b      	ldrb	r3, [r3, #0]
200000a8:	2201      	movs	r2, #1
200000aa:	4013      	ands	r3, r2
200000ac:	d001      	beq.n	200000b2 <ReadColumn+0x46>
200000ae:	2301      	movs	r3, #1
200000b0:	e000      	b.n	200000b4 <ReadColumn+0x48>
return 0;
200000b2:	2300      	movs	r3, #0
}
200000b4:	0018      	movs	r0, r3
200000b6:	46bd      	mov	sp, r7
200000b8:	b002      	add	sp, #8
200000ba:	bd80      	pop	{r7, pc}
200000bc:	40020c11 	andmi	r0, r2, r1, lsl ip

200000c0 <keyb_enhanced>:

unsigned char keyb_enhanced(void)
	{
200000c0:	b590      	push	{r4, r7, lr}
200000c2:	b087      	sub	sp, #28
200000c4:	af00      	add	r7, sp, #0
		unsigned char key[]={1,2,3,0xA,4,5,6,0xB,7,8,9,0xC,0xE,0,0xF,0xD};
200000c6:	003b      	movs	r3, r7
200000c8:	4a25      	ldr	r2, [pc, #148]	; (20000160 <keyb_enhanced+0xa0>)
200000ca:	ca13      	ldmia	r2!, {r0, r1, r4}
200000cc:	c313      	stmia	r3!, {r0, r1, r4}
200000ce:	6812      	ldr	r2, [r2, #0]
200000d0:	601a      	str	r2, [r3, #0]
		int row, col;
		
		if (keyb_state == 1) {
200000d2:	4b24      	ldr	r3, [pc, #144]	; (20000164 <keyb_enhanced+0xa4>)
200000d4:	681b      	ldr	r3, [r3, #0]
200000d6:	2b01      	cmp	r3, #1
200000d8:	d112      	bne.n	20000100 <keyb_enhanced+0x40>
			ActivateRow(5);
200000da:	2005      	movs	r0, #5
200000dc:	f7ff ff98 	bl	20000010 <ActivateRow>
			
			if(col = ReadColumn()) {
200000e0:	f7ff ffc4 	bl	2000006c <ReadColumn>
200000e4:	0003      	movs	r3, r0
200000e6:	613b      	str	r3, [r7, #16]
200000e8:	693b      	ldr	r3, [r7, #16]
200000ea:	2b00      	cmp	r3, #0
200000ec:	d003      	beq.n	200000f6 <keyb_enhanced+0x36>
				keyb_state = 1;
200000ee:	4b1d      	ldr	r3, [pc, #116]	; (20000164 <keyb_enhanced+0xa4>)
200000f0:	2201      	movs	r2, #1
200000f2:	601a      	str	r2, [r3, #0]
200000f4:	e004      	b.n	20000100 <keyb_enhanced+0x40>
			 }
			 
			 else {
				 keyb_state = 0;
200000f6:	4b1b      	ldr	r3, [pc, #108]	; (20000164 <keyb_enhanced+0xa4>)
200000f8:	2200      	movs	r2, #0
200000fa:	601a      	str	r2, [r3, #0]
				 return 0xFF;
200000fc:	23ff      	movs	r3, #255	; 0xff
200000fe:	e02a      	b.n	20000156 <keyb_enhanced+0x96>
				 }
			}
		
		
		if (keyb_state == 0) {
20000100:	4b18      	ldr	r3, [pc, #96]	; (20000164 <keyb_enhanced+0xa4>)
20000102:	681b      	ldr	r3, [r3, #0]
20000104:	2b00      	cmp	r3, #0
20000106:	d122      	bne.n	2000014e <keyb_enhanced+0x8e>
			
			for(row=1; row <=4 ; row++ ) {
20000108:	2301      	movs	r3, #1
2000010a:	617b      	str	r3, [r7, #20]
2000010c:	e01c      	b.n	20000148 <keyb_enhanced+0x88>
					ActivateRow(row);
2000010e:	697b      	ldr	r3, [r7, #20]
20000110:	0018      	movs	r0, r3
20000112:	f7ff ff7d 	bl	20000010 <ActivateRow>
					if((col = ReadColumn()) ){
20000116:	f7ff ffa9 	bl	2000006c <ReadColumn>
2000011a:	0003      	movs	r3, r0
2000011c:	613b      	str	r3, [r7, #16]
2000011e:	693b      	ldr	r3, [r7, #16]
20000120:	2b00      	cmp	r3, #0
20000122:	d00e      	beq.n	20000142 <keyb_enhanced+0x82>
						keyb_state = 1;
20000124:	4b0f      	ldr	r3, [pc, #60]	; (20000164 <keyb_enhanced+0xa4>)
20000126:	2201      	movs	r2, #1
20000128:	601a      	str	r2, [r3, #0]
						ActivateRow(0);
2000012a:	2000      	movs	r0, #0
2000012c:	f7ff ff70 	bl	20000010 <ActivateRow>
						return key [4*(row-1)+(col-1) ];
20000130:	697b      	ldr	r3, [r7, #20]
20000132:	3b01      	subs	r3, #1
20000134:	009a      	lsls	r2, r3, #2
20000136:	693b      	ldr	r3, [r7, #16]
20000138:	3b01      	subs	r3, #1
2000013a:	18d3      	adds	r3, r2, r3
2000013c:	003a      	movs	r2, r7
2000013e:	5cd3      	ldrb	r3, [r2, r3]
20000140:	e009      	b.n	20000156 <keyb_enhanced+0x96>
			for(row=1; row <=4 ; row++ ) {
20000142:	697b      	ldr	r3, [r7, #20]
20000144:	3301      	adds	r3, #1
20000146:	617b      	str	r3, [r7, #20]
20000148:	697b      	ldr	r3, [r7, #20]
2000014a:	2b04      	cmp	r3, #4
2000014c:	dddf      	ble.n	2000010e <keyb_enhanced+0x4e>
				}
			}
		}
		
		ActivateRow(0);
2000014e:	2000      	movs	r0, #0
20000150:	f7ff ff5e 	bl	20000010 <ActivateRow>
		return 0xFF;
20000154:	23ff      	movs	r3, #255	; 0xff
20000156:	0018      	movs	r0, r3
20000158:	46bd      	mov	sp, r7
2000015a:	b007      	add	sp, #28
2000015c:	bd90      	pop	{r4, r7, pc}
2000015e:	46c0      	nop			; (mov r8, r8)
20000160:	20005d64 	andcs	r5, r0, r4, ror #26
20000164:	20005d74 	andcs	r5, r0, r4, ror sp

20000168 <app_init>:
#include "define_global.h"
#include "ascii_display.h"
#include "grafik.h"
#include "graphic_driver.h"

void app_init(void) {
20000168:	b580      	push	{r7, lr}
2000016a:	af00      	add	r7, sp, #0
	*GPIO_D_MODER &= 0x00000000;	// Nollställer bit 31-16 resten kvarstår
2000016c:	4b0e      	ldr	r3, [pc, #56]	; (200001a8 <app_init+0x40>)
2000016e:	681b      	ldr	r3, [r3, #0]
20000170:	4b0d      	ldr	r3, [pc, #52]	; (200001a8 <app_init+0x40>)
20000172:	2200      	movs	r2, #0
20000174:	601a      	str	r2, [r3, #0]
	*GPIO_D_MODER |= 0x55005555;	// 0101 0101 0101 0101 (bit 31-16) resten kvarstår, bit 31-16 utsignaler med varje pin representerade med 2 bitar
20000176:	4b0c      	ldr	r3, [pc, #48]	; (200001a8 <app_init+0x40>)
20000178:	681a      	ldr	r2, [r3, #0]
2000017a:	4b0b      	ldr	r3, [pc, #44]	; (200001a8 <app_init+0x40>)
2000017c:	490b      	ldr	r1, [pc, #44]	; (200001ac <app_init+0x44>)
2000017e:	430a      	orrs	r2, r1
20000180:	601a      	str	r2, [r3, #0]
	*GPIO_D_OTYPER &= 0x0000;	//	Nollställ bit 15-12 i OTYPER (push-pull), bit 11-8 kvarstår. utpinnar som push-pull
20000182:	4b0b      	ldr	r3, [pc, #44]	; (200001b0 <app_init+0x48>)
20000184:	881b      	ldrh	r3, [r3, #0]
20000186:	4b0a      	ldr	r3, [pc, #40]	; (200001b0 <app_init+0x48>)
20000188:	2200      	movs	r2, #0
2000018a:	801a      	strh	r2, [r3, #0]
	*((unsigned long *) GPIO_D_BASE + 0x0E) &= 0x00000000;
2000018c:	4b09      	ldr	r3, [pc, #36]	; (200001b4 <app_init+0x4c>)
2000018e:	2200      	movs	r2, #0
20000190:	601a      	str	r2, [r3, #0]
	*((unsigned long *) GPIO_D_BASE + 0x0E) |= 0x00AA0000;	//	Sätt pull-down (1010) på inpinnar i register PUPDR(2bit/pin)
20000192:	4b08      	ldr	r3, [pc, #32]	; (200001b4 <app_init+0x4c>)
20000194:	681a      	ldr	r2, [r3, #0]
20000196:	4b07      	ldr	r3, [pc, #28]	; (200001b4 <app_init+0x4c>)
20000198:	21aa      	movs	r1, #170	; 0xaa
2000019a:	0409      	lsls	r1, r1, #16
2000019c:	430a      	orrs	r2, r1
2000019e:	601a      	str	r2, [r3, #0]
}
200001a0:	46c0      	nop			; (mov r8, r8)
200001a2:	46bd      	mov	sp, r7
200001a4:	bd80      	pop	{r7, pc}
200001a6:	46c0      	nop			; (mov r8, r8)
200001a8:	40020c00 	andmi	r0, r2, r0, lsl #24
200001ac:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab
200001b0:	40020c08 	andmi	r0, r2, r8, lsl #24
200001b4:	40020c38 	andmi	r0, r2, r8, lsr ip

200001b8 <main>:

void main(void)
{
200001b8:	b580      	push	{r7, lr}
200001ba:	b084      	sub	sp, #16
200001bc:	af00      	add	r7, sp, #0
	app_init();
200001be:	f7ff ffd3 	bl	20000168 <app_init>
	POBJECT m = &mouse;
200001c2:	4b0e      	ldr	r3, [pc, #56]	; (200001fc <main+0x44>)
200001c4:	60fb      	str	r3, [r7, #12]
	POBJECT k = &cat;
200001c6:	4b0e      	ldr	r3, [pc, #56]	; (20000200 <main+0x48>)
200001c8:	60bb      	str	r3, [r7, #8]
	POBJECT b = &bird;
200001ca:	4b0e      	ldr	r3, [pc, #56]	; (20000204 <main+0x4c>)
200001cc:	607b      	str	r3, [r7, #4]
	
	graphic_initialize();
200001ce:	f000 f9e9 	bl	200005a4 <graphic_initialize>
	graphic_clear_screen();
200001d2:	f000 f9ea 	bl	200005aa <graphic_clear_screen>
	
	while(1)
			{
				m->move(m);
200001d6:	68fb      	ldr	r3, [r7, #12]
200001d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200001da:	68fa      	ldr	r2, [r7, #12]
200001dc:	0010      	movs	r0, r2
200001de:	4798      	blx	r3
				k->move(k);
200001e0:	68bb      	ldr	r3, [r7, #8]
200001e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200001e4:	68ba      	ldr	r2, [r7, #8]
200001e6:	0010      	movs	r0, r2
200001e8:	4798      	blx	r3
				b->move(b);
200001ea:	687b      	ldr	r3, [r7, #4]
200001ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200001ee:	687a      	ldr	r2, [r7, #4]
200001f0:	0010      	movs	r0, r2
200001f2:	4798      	blx	r3
				delay_micro(200);
200001f4:	20c8      	movs	r0, #200	; 0xc8
200001f6:	f000 f829 	bl	2000024c <delay_micro>
				m->move(m);
200001fa:	e7ec      	b.n	200001d6 <main+0x1e>
200001fc:	20005ce4 	andcs	r5, r0, r4, ror #25
20000200:	20005cb0 			; <UNDEFINED> instruction: 0x20005cb0
20000204:	20005d18 	andcs	r5, r0, r8, lsl sp

20000208 <delay_250ns>:
// FUNKTIONER FÖR ATT SKRIVA TILL ASCII DISPLAY

#include "define_global.h"
#define SIMULATOR

void delay_250ns( void ) {
20000208:	b580      	push	{r7, lr}
2000020a:	af00      	add	r7, sp, #0
/* SystemCoreClock = 168000000 */
    *STK_CTRL = 0;
2000020c:	4b0c      	ldr	r3, [pc, #48]	; (20000240 <delay_250ns+0x38>)
2000020e:	2200      	movs	r2, #0
20000210:	601a      	str	r2, [r3, #0]
    *STK_LOAD = ( (168/4) -1 );    // 168 cp ger 1 us -> 168/4 cp ger 0.25 us = 250 ns
20000212:	4b0c      	ldr	r3, [pc, #48]	; (20000244 <delay_250ns+0x3c>)
20000214:	2229      	movs	r2, #41	; 0x29
20000216:	601a      	str	r2, [r3, #0]
    *STK_VAL = 0;
20000218:	4b0b      	ldr	r3, [pc, #44]	; (20000248 <delay_250ns+0x40>)
2000021a:	2200      	movs	r2, #0
2000021c:	601a      	str	r2, [r3, #0]
    *STK_CTRL = 5;   	 // Bit 2 = 1 (systemklocka), bit 0 = 1 (räknare aktiv, ENABLE-bit)
2000021e:	4b08      	ldr	r3, [pc, #32]	; (20000240 <delay_250ns+0x38>)
20000220:	2205      	movs	r2, #5
20000222:	601a      	str	r2, [r3, #0]
    
    while( (*STK_CTRL & 0x10000 )== 0 );    // Väntar på att räknaren räknat ner 250ns
20000224:	46c0      	nop			; (mov r8, r8)
20000226:	4b06      	ldr	r3, [pc, #24]	; (20000240 <delay_250ns+0x38>)
20000228:	681a      	ldr	r2, [r3, #0]
2000022a:	2380      	movs	r3, #128	; 0x80
2000022c:	025b      	lsls	r3, r3, #9
2000022e:	4013      	ands	r3, r2
20000230:	d0f9      	beq.n	20000226 <delay_250ns+0x1e>
    *STK_CTRL = 0;   						 // Stäng av räknaren
20000232:	4b03      	ldr	r3, [pc, #12]	; (20000240 <delay_250ns+0x38>)
20000234:	2200      	movs	r2, #0
20000236:	601a      	str	r2, [r3, #0]
}
20000238:	46c0      	nop			; (mov r8, r8)
2000023a:	46bd      	mov	sp, r7
2000023c:	bd80      	pop	{r7, pc}
2000023e:	46c0      	nop			; (mov r8, r8)
20000240:	e000e010 	and	lr, r0, r0, lsl r0
20000244:	e000e014 	and	lr, r0, r4, lsl r0
20000248:	e000e018 	and	lr, r0, r8, lsl r0

2000024c <delay_micro>:

void delay_micro(unsigned int us) {
2000024c:	b580      	push	{r7, lr}
2000024e:	b082      	sub	sp, #8
20000250:	af00      	add	r7, sp, #0
20000252:	6078      	str	r0, [r7, #4]
    #ifdef SIMULATOR    // Simulator mycket långsammare än hårdvara
   	 us = us / 1000;
20000254:	687b      	ldr	r3, [r7, #4]
20000256:	22fa      	movs	r2, #250	; 0xfa
20000258:	0091      	lsls	r1, r2, #2
2000025a:	0018      	movs	r0, r3
2000025c:	f000 fbcc 	bl	200009f8 <__udivsi3>
20000260:	0003      	movs	r3, r0
20000262:	607b      	str	r3, [r7, #4]
   	 us++;    // För att undvika att us skulle vara 0
20000264:	687b      	ldr	r3, [r7, #4]
20000266:	3301      	adds	r3, #1
20000268:	607b      	str	r3, [r7, #4]
    #endif
    
    while( us > 0 ) {
2000026a:	e00a      	b.n	20000282 <delay_micro+0x36>
   	 delay_250ns();
2000026c:	f7ff ffcc 	bl	20000208 <delay_250ns>
   	 delay_250ns();
20000270:	f7ff ffca 	bl	20000208 <delay_250ns>
   	 delay_250ns();
20000274:	f7ff ffc8 	bl	20000208 <delay_250ns>
   	 delay_250ns();    // 0.25 us * 4 = 1 us
20000278:	f7ff ffc6 	bl	20000208 <delay_250ns>
   	 us--;
2000027c:	687b      	ldr	r3, [r7, #4]
2000027e:	3b01      	subs	r3, #1
20000280:	607b      	str	r3, [r7, #4]
    while( us > 0 ) {
20000282:	687b      	ldr	r3, [r7, #4]
20000284:	2b00      	cmp	r3, #0
20000286:	d1f1      	bne.n	2000026c <delay_micro+0x20>
    }
}
20000288:	46c0      	nop			; (mov r8, r8)
2000028a:	46c0      	nop			; (mov r8, r8)
2000028c:	46bd      	mov	sp, r7
2000028e:	b002      	add	sp, #8
20000290:	bd80      	pop	{r7, pc}

20000292 <delay_milli>:

void delay_milli(unsigned int ms) {
20000292:	b580      	push	{r7, lr}
20000294:	b084      	sub	sp, #16
20000296:	af00      	add	r7, sp, #0
20000298:	6078      	str	r0, [r7, #4]
    #ifdef SIMULATOR    // Simulator mycket långsammare än hårdvara
   	 ms = ms / 1000;
2000029a:	687b      	ldr	r3, [r7, #4]
2000029c:	22fa      	movs	r2, #250	; 0xfa
2000029e:	0091      	lsls	r1, r2, #2
200002a0:	0018      	movs	r0, r3
200002a2:	f000 fba9 	bl	200009f8 <__udivsi3>
200002a6:	0003      	movs	r3, r0
200002a8:	607b      	str	r3, [r7, #4]
   	 ms++;    // För att undvika att ms skulle vara 0
200002aa:	687b      	ldr	r3, [r7, #4]
200002ac:	3301      	adds	r3, #1
200002ae:	607b      	str	r3, [r7, #4]
    #endif
    
    while( ms > 0 ) {
200002b0:	e015      	b.n	200002de <delay_milli+0x4c>
   	 for (int c = 1 ; c <= 1000 ; c++) {
200002b2:	2301      	movs	r3, #1
200002b4:	60fb      	str	r3, [r7, #12]
200002b6:	e00a      	b.n	200002ce <delay_milli+0x3c>
   		 delay_250ns();  // 1 us * 1000 = 1 ms
200002b8:	f7ff ffa6 	bl	20000208 <delay_250ns>
   		 delay_250ns();
200002bc:	f7ff ffa4 	bl	20000208 <delay_250ns>
   		 delay_250ns();
200002c0:	f7ff ffa2 	bl	20000208 <delay_250ns>
   		 delay_250ns();
200002c4:	f7ff ffa0 	bl	20000208 <delay_250ns>
   	 for (int c = 1 ; c <= 1000 ; c++) {
200002c8:	68fb      	ldr	r3, [r7, #12]
200002ca:	3301      	adds	r3, #1
200002cc:	60fb      	str	r3, [r7, #12]
200002ce:	68fa      	ldr	r2, [r7, #12]
200002d0:	23fa      	movs	r3, #250	; 0xfa
200002d2:	009b      	lsls	r3, r3, #2
200002d4:	429a      	cmp	r2, r3
200002d6:	ddef      	ble.n	200002b8 <delay_milli+0x26>
   	 }
   	 ms--;
200002d8:	687b      	ldr	r3, [r7, #4]
200002da:	3b01      	subs	r3, #1
200002dc:	607b      	str	r3, [r7, #4]
    while( ms > 0 ) {
200002de:	687b      	ldr	r3, [r7, #4]
200002e0:	2b00      	cmp	r3, #0
200002e2:	d1e6      	bne.n	200002b2 <delay_milli+0x20>
    }
}
200002e4:	46c0      	nop			; (mov r8, r8)
200002e6:	46c0      	nop			; (mov r8, r8)
200002e8:	46bd      	mov	sp, r7
200002ea:	b004      	add	sp, #16
200002ec:	bd80      	pop	{r7, pc}

200002ee <ascii_ctrl_bit_set>:

void ascii_ctrl_bit_set(unsigned char x) {
200002ee:	b580      	push	{r7, lr}
200002f0:	b082      	sub	sp, #8
200002f2:	af00      	add	r7, sp, #0
200002f4:	0002      	movs	r2, r0
200002f6:	1dfb      	adds	r3, r7, #7
200002f8:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW = B_SELECT | x | *GPIO_E_ODR_LOW;
200002fa:	4b08      	ldr	r3, [pc, #32]	; (2000031c <ascii_ctrl_bit_set+0x2e>)
200002fc:	781b      	ldrb	r3, [r3, #0]
200002fe:	b2da      	uxtb	r2, r3
20000300:	1dfb      	adds	r3, r7, #7
20000302:	781b      	ldrb	r3, [r3, #0]
20000304:	4313      	orrs	r3, r2
20000306:	b2db      	uxtb	r3, r3
20000308:	4a04      	ldr	r2, [pc, #16]	; (2000031c <ascii_ctrl_bit_set+0x2e>)
2000030a:	2104      	movs	r1, #4
2000030c:	430b      	orrs	r3, r1
2000030e:	b2db      	uxtb	r3, r3
20000310:	7013      	strb	r3, [r2, #0]
}
20000312:	46c0      	nop			; (mov r8, r8)
20000314:	46bd      	mov	sp, r7
20000316:	b002      	add	sp, #8
20000318:	bd80      	pop	{r7, pc}
2000031a:	46c0      	nop			; (mov r8, r8)
2000031c:	40021014 	andmi	r1, r2, r4, lsl r0

20000320 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x) {
20000320:	b580      	push	{r7, lr}
20000322:	b082      	sub	sp, #8
20000324:	af00      	add	r7, sp, #0
20000326:	0002      	movs	r2, r0
20000328:	1dfb      	adds	r3, r7, #7
2000032a:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW = B_SELECT | (*GPIO_E_ODR_LOW & ~x);
2000032c:	4b0a      	ldr	r3, [pc, #40]	; (20000358 <ascii_ctrl_bit_clear+0x38>)
2000032e:	781b      	ldrb	r3, [r3, #0]
20000330:	b2db      	uxtb	r3, r3
20000332:	b25b      	sxtb	r3, r3
20000334:	1dfa      	adds	r2, r7, #7
20000336:	7812      	ldrb	r2, [r2, #0]
20000338:	b252      	sxtb	r2, r2
2000033a:	43d2      	mvns	r2, r2
2000033c:	b252      	sxtb	r2, r2
2000033e:	4013      	ands	r3, r2
20000340:	b25b      	sxtb	r3, r3
20000342:	2204      	movs	r2, #4
20000344:	4313      	orrs	r3, r2
20000346:	b25a      	sxtb	r2, r3
20000348:	4b03      	ldr	r3, [pc, #12]	; (20000358 <ascii_ctrl_bit_clear+0x38>)
2000034a:	b2d2      	uxtb	r2, r2
2000034c:	701a      	strb	r2, [r3, #0]
}
2000034e:	46c0      	nop			; (mov r8, r8)
20000350:	46bd      	mov	sp, r7
20000352:	b002      	add	sp, #8
20000354:	bd80      	pop	{r7, pc}
20000356:	46c0      	nop			; (mov r8, r8)
20000358:	40021014 	andmi	r1, r2, r4, lsl r0

2000035c <ascii_write_controller>:

void ascii_write_controller(unsigned char byte) {
2000035c:	b580      	push	{r7, lr}
2000035e:	b082      	sub	sp, #8
20000360:	af00      	add	r7, sp, #0
20000362:	0002      	movs	r2, r0
20000364:	1dfb      	adds	r3, r7, #7
20000366:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_set(B_E);
20000368:	2040      	movs	r0, #64	; 0x40
2000036a:	f7ff ffc0 	bl	200002ee <ascii_ctrl_bit_set>
    *GPIO_E_ODR_HIGH = byte;
2000036e:	4a06      	ldr	r2, [pc, #24]	; (20000388 <ascii_write_controller+0x2c>)
20000370:	1dfb      	adds	r3, r7, #7
20000372:	781b      	ldrb	r3, [r3, #0]
20000374:	7013      	strb	r3, [r2, #0]
    delay_250ns();  	 
20000376:	f7ff ff47 	bl	20000208 <delay_250ns>
    ascii_ctrl_bit_clear(B_E);
2000037a:	2040      	movs	r0, #64	; 0x40
2000037c:	f7ff ffd0 	bl	20000320 <ascii_ctrl_bit_clear>
}
20000380:	46c0      	nop			; (mov r8, r8)
20000382:	46bd      	mov	sp, r7
20000384:	b002      	add	sp, #8
20000386:	bd80      	pop	{r7, pc}
20000388:	40021015 	andmi	r1, r2, r5, lsl r0

2000038c <ascii_read_controller>:

unsigned char ascii_read_controller(void) {
2000038c:	b580      	push	{r7, lr}
2000038e:	b082      	sub	sp, #8
20000390:	af00      	add	r7, sp, #0
    ascii_ctrl_bit_set(B_E);
20000392:	2040      	movs	r0, #64	; 0x40
20000394:	f7ff ffab 	bl	200002ee <ascii_ctrl_bit_set>
    delay_250ns();    
20000398:	f7ff ff36 	bl	20000208 <delay_250ns>
    delay_250ns();
2000039c:	f7ff ff34 	bl	20000208 <delay_250ns>
    unsigned char rv = *GPIO_E_IDR_HIGH;    // Ändrat enl. kod nedan
200003a0:	4a06      	ldr	r2, [pc, #24]	; (200003bc <ascii_read_controller+0x30>)
200003a2:	1dfb      	adds	r3, r7, #7
200003a4:	7812      	ldrb	r2, [r2, #0]
200003a6:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_clear(B_E);
200003a8:	2040      	movs	r0, #64	; 0x40
200003aa:	f7ff ffb9 	bl	20000320 <ascii_ctrl_bit_clear>
    return rv;
200003ae:	1dfb      	adds	r3, r7, #7
200003b0:	781b      	ldrb	r3, [r3, #0]
}
200003b2:	0018      	movs	r0, r3
200003b4:	46bd      	mov	sp, r7
200003b6:	b002      	add	sp, #8
200003b8:	bd80      	pop	{r7, pc}
200003ba:	46c0      	nop			; (mov r8, r8)
200003bc:	40021011 	andmi	r1, r2, r1, lsl r0

200003c0 <ascii_read_status>:

unsigned char ascii_read_status(void) {
200003c0:	b590      	push	{r4, r7, lr}
200003c2:	b083      	sub	sp, #12
200003c4:	af00      	add	r7, sp, #0
    *GPIO_E_MODER = 0x00005555;
200003c6:	4b0b      	ldr	r3, [pc, #44]	; (200003f4 <ascii_read_status+0x34>)
200003c8:	4a0b      	ldr	r2, [pc, #44]	; (200003f8 <ascii_read_status+0x38>)
200003ca:	601a      	str	r2, [r3, #0]
    ascii_ctrl_bit_clear(B_RS);
200003cc:	2001      	movs	r0, #1
200003ce:	f7ff ffa7 	bl	20000320 <ascii_ctrl_bit_clear>
    ascii_ctrl_bit_set(B_RW);
200003d2:	2002      	movs	r0, #2
200003d4:	f7ff ff8b 	bl	200002ee <ascii_ctrl_bit_set>
    unsigned char rv = ascii_read_controller();
200003d8:	1dfc      	adds	r4, r7, #7
200003da:	f7ff ffd7 	bl	2000038c <ascii_read_controller>
200003de:	0003      	movs	r3, r0
200003e0:	7023      	strb	r3, [r4, #0]
    *GPIO_E_MODER = 0x55555555;
200003e2:	4b04      	ldr	r3, [pc, #16]	; (200003f4 <ascii_read_status+0x34>)
200003e4:	4a05      	ldr	r2, [pc, #20]	; (200003fc <ascii_read_status+0x3c>)
200003e6:	601a      	str	r2, [r3, #0]
    return rv;
200003e8:	1dfb      	adds	r3, r7, #7
200003ea:	781b      	ldrb	r3, [r3, #0]
}
200003ec:	0018      	movs	r0, r3
200003ee:	46bd      	mov	sp, r7
200003f0:	b003      	add	sp, #12
200003f2:	bd90      	pop	{r4, r7, pc}
200003f4:	40021000 	andmi	r1, r2, r0
200003f8:	00005555 	andeq	r5, r0, r5, asr r5
200003fc:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000400 <ascii_read_data>:

unsigned char ascii_read_data(void) {
20000400:	b590      	push	{r4, r7, lr}
20000402:	b083      	sub	sp, #12
20000404:	af00      	add	r7, sp, #0
    *GPIO_E_MODER = 0x00005555;
20000406:	4b0b      	ldr	r3, [pc, #44]	; (20000434 <ascii_read_data+0x34>)
20000408:	4a0b      	ldr	r2, [pc, #44]	; (20000438 <ascii_read_data+0x38>)
2000040a:	601a      	str	r2, [r3, #0]
    ascii_ctrl_bit_set(B_RS);
2000040c:	2001      	movs	r0, #1
2000040e:	f7ff ff6e 	bl	200002ee <ascii_ctrl_bit_set>
    ascii_ctrl_bit_set(B_RW);
20000412:	2002      	movs	r0, #2
20000414:	f7ff ff6b 	bl	200002ee <ascii_ctrl_bit_set>
    unsigned char rv = ascii_read_controller();
20000418:	1dfc      	adds	r4, r7, #7
2000041a:	f7ff ffb7 	bl	2000038c <ascii_read_controller>
2000041e:	0003      	movs	r3, r0
20000420:	7023      	strb	r3, [r4, #0]
    *GPIO_E_MODER = 0x55555555;
20000422:	4b04      	ldr	r3, [pc, #16]	; (20000434 <ascii_read_data+0x34>)
20000424:	4a05      	ldr	r2, [pc, #20]	; (2000043c <ascii_read_data+0x3c>)
20000426:	601a      	str	r2, [r3, #0]
    return rv;
20000428:	1dfb      	adds	r3, r7, #7
2000042a:	781b      	ldrb	r3, [r3, #0]
}
2000042c:	0018      	movs	r0, r3
2000042e:	46bd      	mov	sp, r7
20000430:	b003      	add	sp, #12
20000432:	bd90      	pop	{r4, r7, pc}
20000434:	40021000 	andmi	r1, r2, r0
20000438:	00005555 	andeq	r5, r0, r5, asr r5
2000043c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000440 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command) {
20000440:	b580      	push	{r7, lr}
20000442:	b082      	sub	sp, #8
20000444:	af00      	add	r7, sp, #0
20000446:	0002      	movs	r2, r0
20000448:	1dfb      	adds	r3, r7, #7
2000044a:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_clear(B_RS);
2000044c:	2001      	movs	r0, #1
2000044e:	f7ff ff67 	bl	20000320 <ascii_ctrl_bit_clear>
    ascii_ctrl_bit_clear(B_RW);
20000452:	2002      	movs	r0, #2
20000454:	f7ff ff64 	bl	20000320 <ascii_ctrl_bit_clear>
    ascii_write_controller(command);
20000458:	1dfb      	adds	r3, r7, #7
2000045a:	781b      	ldrb	r3, [r3, #0]
2000045c:	0018      	movs	r0, r3
2000045e:	f7ff ff7d 	bl	2000035c <ascii_write_controller>
}
20000462:	46c0      	nop			; (mov r8, r8)
20000464:	46bd      	mov	sp, r7
20000466:	b002      	add	sp, #8
20000468:	bd80      	pop	{r7, pc}

2000046a <ascii_write_data>:

void ascii_write_data(unsigned char data) {
2000046a:	b580      	push	{r7, lr}
2000046c:	b082      	sub	sp, #8
2000046e:	af00      	add	r7, sp, #0
20000470:	0002      	movs	r2, r0
20000472:	1dfb      	adds	r3, r7, #7
20000474:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_set(B_RS);
20000476:	2001      	movs	r0, #1
20000478:	f7ff ff39 	bl	200002ee <ascii_ctrl_bit_set>
    ascii_ctrl_bit_clear(B_RW);
2000047c:	2002      	movs	r0, #2
2000047e:	f7ff ff4f 	bl	20000320 <ascii_ctrl_bit_clear>
    ascii_write_controller(data);
20000482:	1dfb      	adds	r3, r7, #7
20000484:	781b      	ldrb	r3, [r3, #0]
20000486:	0018      	movs	r0, r3
20000488:	f7ff ff68 	bl	2000035c <ascii_write_controller>
}
2000048c:	46c0      	nop			; (mov r8, r8)
2000048e:	46bd      	mov	sp, r7
20000490:	b002      	add	sp, #8
20000492:	bd80      	pop	{r7, pc}

20000494 <ascii_init>:

void ascii_init(void) {
20000494:	b580      	push	{r7, lr}
20000496:	af00      	add	r7, sp, #0
    while( ( ascii_read_status() & 0x80)== 0x80 ) {}    // Vänta tills statusflaggan är 0
20000498:	46c0      	nop			; (mov r8, r8)
2000049a:	f7ff ff91 	bl	200003c0 <ascii_read_status>
2000049e:	0003      	movs	r3, r0
200004a0:	001a      	movs	r2, r3
200004a2:	2380      	movs	r3, #128	; 0x80
200004a4:	4013      	ands	r3, r2
200004a6:	2b80      	cmp	r3, #128	; 0x80
200004a8:	d0f7      	beq.n	2000049a <ascii_init+0x6>
    delay_micro( 8 ); /* latenstid för kommando */
200004aa:	2008      	movs	r0, #8
200004ac:	f7ff fece 	bl	2000024c <delay_micro>
    ascii_write_cmd( 1 ); /* kommando: "Clear display" */
200004b0:	2001      	movs	r0, #1
200004b2:	f7ff ffc5 	bl	20000440 <ascii_write_cmd>
    delay_milli( 2 ); /* i stället för 1,53 ms */
200004b6:	2002      	movs	r0, #2
200004b8:	f7ff feeb 	bl	20000292 <delay_milli>
    // FUNCTION SET
    while( ( ascii_read_status() & 0x80)== 0x80 ) {}    // Vänta tills statusflaggan är 0
200004bc:	46c0      	nop			; (mov r8, r8)
200004be:	f7ff ff7f 	bl	200003c0 <ascii_read_status>
200004c2:	0003      	movs	r3, r0
200004c4:	001a      	movs	r2, r3
200004c6:	2380      	movs	r3, #128	; 0x80
200004c8:	4013      	ands	r3, r2
200004ca:	2b80      	cmp	r3, #128	; 0x80
200004cc:	d0f7      	beq.n	200004be <ascii_init+0x2a>
    delay_micro( 8 ); /* latenstid för kommando */
200004ce:	2008      	movs	r0, #8
200004d0:	f7ff febc 	bl	2000024c <delay_micro>
    ascii_write_cmd(56);    // Med "dont care" bitarna som 0
200004d4:	2038      	movs	r0, #56	; 0x38
200004d6:	f7ff ffb3 	bl	20000440 <ascii_write_cmd>
    delay_micro(39);
200004da:	2027      	movs	r0, #39	; 0x27
200004dc:	f7ff feb6 	bl	2000024c <delay_micro>
    // DISPLAY CONTROL
    while( ( ascii_read_status() & 0x80)== 0x80 ) {}    // Vänta tills statusflaggan är 0
200004e0:	46c0      	nop			; (mov r8, r8)
200004e2:	f7ff ff6d 	bl	200003c0 <ascii_read_status>
200004e6:	0003      	movs	r3, r0
200004e8:	001a      	movs	r2, r3
200004ea:	2380      	movs	r3, #128	; 0x80
200004ec:	4013      	ands	r3, r2
200004ee:	2b80      	cmp	r3, #128	; 0x80
200004f0:	d0f7      	beq.n	200004e2 <ascii_init+0x4e>
    delay_micro( 8 ); /* latenstid för kommando */
200004f2:	2008      	movs	r0, #8
200004f4:	f7ff feaa 	bl	2000024c <delay_micro>
    ascii_write_cmd(14);
200004f8:	200e      	movs	r0, #14
200004fa:	f7ff ffa1 	bl	20000440 <ascii_write_cmd>
    delay_micro(39);
200004fe:	2027      	movs	r0, #39	; 0x27
20000500:	f7ff fea4 	bl	2000024c <delay_micro>
    // ENTRYMODE SET
    while( ( ascii_read_status() & 0x80)== 0x80 ) {}    // Vänta tills statusflaggan är 0
20000504:	46c0      	nop			; (mov r8, r8)
20000506:	f7ff ff5b 	bl	200003c0 <ascii_read_status>
2000050a:	0003      	movs	r3, r0
2000050c:	001a      	movs	r2, r3
2000050e:	2380      	movs	r3, #128	; 0x80
20000510:	4013      	ands	r3, r2
20000512:	2b80      	cmp	r3, #128	; 0x80
20000514:	d0f7      	beq.n	20000506 <ascii_init+0x72>
    delay_micro( 8 ); /* latenstid för kommando */
20000516:	2008      	movs	r0, #8
20000518:	f7ff fe98 	bl	2000024c <delay_micro>
    ascii_write_cmd(4);
2000051c:	2004      	movs	r0, #4
2000051e:	f7ff ff8f 	bl	20000440 <ascii_write_cmd>
    delay_micro(39);
20000522:	2027      	movs	r0, #39	; 0x27
20000524:	f7ff fe92 	bl	2000024c <delay_micro>
    
}
20000528:	46c0      	nop			; (mov r8, r8)
2000052a:	46bd      	mov	sp, r7
2000052c:	bd80      	pop	{r7, pc}

2000052e <ascii_write_char>:

void ascii_write_char(unsigned char c) {
2000052e:	b580      	push	{r7, lr}
20000530:	b082      	sub	sp, #8
20000532:	af00      	add	r7, sp, #0
20000534:	0002      	movs	r2, r0
20000536:	1dfb      	adds	r3, r7, #7
20000538:	701a      	strb	r2, [r3, #0]
    // Ska skriva ut till display, ett tecken i taget
    while( ( ascii_read_status() & 0x80)== 0x80 ) {}    // Vänta tills statusflaggan är 0
2000053a:	46c0      	nop			; (mov r8, r8)
2000053c:	f7ff ff40 	bl	200003c0 <ascii_read_status>
20000540:	0003      	movs	r3, r0
20000542:	001a      	movs	r2, r3
20000544:	2380      	movs	r3, #128	; 0x80
20000546:	4013      	ands	r3, r2
20000548:	2b80      	cmp	r3, #128	; 0x80
2000054a:	d0f7      	beq.n	2000053c <ascii_write_char+0xe>
    delay_micro( 8 ); /* latenstid för kommando */
2000054c:	2008      	movs	r0, #8
2000054e:	f7ff fe7d 	bl	2000024c <delay_micro>
    ascii_write_data( c );
20000552:	1dfb      	adds	r3, r7, #7
20000554:	781b      	ldrb	r3, [r3, #0]
20000556:	0018      	movs	r0, r3
20000558:	f7ff ff87 	bl	2000046a <ascii_write_data>
    delay_micro(45);
2000055c:	202d      	movs	r0, #45	; 0x2d
2000055e:	f7ff fe75 	bl	2000024c <delay_micro>
}
20000562:	46c0      	nop			; (mov r8, r8)
20000564:	46bd      	mov	sp, r7
20000566:	b002      	add	sp, #8
20000568:	bd80      	pop	{r7, pc}

2000056a <ascii_gotoxy>:

void ascii_gotoxy(int x, int y) {    // y = row , x = cols
2000056a:	b580      	push	{r7, lr}
2000056c:	b084      	sub	sp, #16
2000056e:	af00      	add	r7, sp, #0
20000570:	6078      	str	r0, [r7, #4]
20000572:	6039      	str	r1, [r7, #0]
    // Sätt startadress till
    
    int adress = (x-1);
20000574:	687b      	ldr	r3, [r7, #4]
20000576:	3b01      	subs	r3, #1
20000578:	60fb      	str	r3, [r7, #12]
    
    if (y == 2) {
2000057a:	683b      	ldr	r3, [r7, #0]
2000057c:	2b02      	cmp	r3, #2
2000057e:	d102      	bne.n	20000586 <ascii_gotoxy+0x1c>
   	 adress = (adress + 0x40);
20000580:	68fb      	ldr	r3, [r7, #12]
20000582:	3340      	adds	r3, #64	; 0x40
20000584:	60fb      	str	r3, [r7, #12]
    }
    ascii_write_cmd((0x80 | adress));
20000586:	68fb      	ldr	r3, [r7, #12]
20000588:	b25b      	sxtb	r3, r3
2000058a:	2280      	movs	r2, #128	; 0x80
2000058c:	4252      	negs	r2, r2
2000058e:	4313      	orrs	r3, r2
20000590:	b25b      	sxtb	r3, r3
20000592:	b2db      	uxtb	r3, r3
20000594:	0018      	movs	r0, r3
20000596:	f7ff ff53 	bl	20000440 <ascii_write_cmd>
}
2000059a:	46c0      	nop			; (mov r8, r8)
2000059c:	46bd      	mov	sp, r7
2000059e:	b004      	add	sp, #16
200005a0:	bd80      	pop	{r7, pc}
200005a2:	46c0      	nop			; (mov r8, r8)

200005a4 <graphic_initialize>:
#include "grafik.h"
#include "graphic_driver.h"

__attribute__((naked))
void graphic_initialize (void)
{
200005a4:	4770dff0 			; <UNDEFINED> instruction: 0x4770dff0
__asm volatile(" .HWORD 0xDFF0\n");	
__asm volatile(" BX LR\n");		
}
200005a8:	46c0      	nop			; (mov r8, r8)

200005aa <graphic_clear_screen>:
__attribute__((naked))
void graphic_clear_screen(void)
{
200005aa:	4770dff1 			; <UNDEFINED> instruction: 0x4770dff1
__asm volatile(" .HWORD 0xDFF1\n");	
__asm volatile(" BX LR\n");		
}
200005ae:	46c0      	nop			; (mov r8, r8)

200005b0 <graphic_pixel_set>:
__attribute__((naked))
void graphic_pixel_set(int x, int y)
{
200005b0:	4770dff2 			; <UNDEFINED> instruction: 0x4770dff2
__asm volatile(" .HWORD 0xDFF2\n");	
__asm volatile(" BX LR\n");		
}
200005b4:	46c0      	nop			; (mov r8, r8)

200005b6 <graphic_pixel_clear>:
__attribute__((naked))
void graphic_pixel_clear(int x, int y)
{
200005b6:	4770dff3 			; <UNDEFINED> instruction: 0x4770dff3
__asm volatile(" .HWORD 0xDFF3\n");	
__asm volatile(" BX LR\n");		
}
200005ba:	46c0      	nop			; (mov r8, r8)

200005bc <draw_object>:


void draw_object (POBJECT o){
200005bc:	b580      	push	{r7, lr}
200005be:	b086      	sub	sp, #24
200005c0:	af00      	add	r7, sp, #0
200005c2:	6078      	str	r0, [r7, #4]
	if (o->geo_number == stand){
200005c4:	687b      	ldr	r3, [r7, #4]
200005c6:	691b      	ldr	r3, [r3, #16]
200005c8:	2b00      	cmp	r3, #0
200005ca:	d127      	bne.n	2000061c <draw_object+0x60>
		for ( int i=0; i <= (o->geo_stand->numpoints-1); i++){
200005cc:	2300      	movs	r3, #0
200005ce:	617b      	str	r3, [r7, #20]
200005d0:	e01d      	b.n	2000060e <draw_object+0x52>
		graphic_pixel_set( (o->geo_stand->px[i].x + o->posx), (o->geo_stand->px[i].y + o->posy));
200005d2:	687b      	ldr	r3, [r7, #4]
200005d4:	681a      	ldr	r2, [r3, #0]
200005d6:	697b      	ldr	r3, [r7, #20]
200005d8:	3304      	adds	r3, #4
200005da:	005b      	lsls	r3, r3, #1
200005dc:	18d3      	adds	r3, r2, r3
200005de:	3304      	adds	r3, #4
200005e0:	781b      	ldrb	r3, [r3, #0]
200005e2:	001a      	movs	r2, r3
200005e4:	687b      	ldr	r3, [r7, #4]
200005e6:	69db      	ldr	r3, [r3, #28]
200005e8:	18d0      	adds	r0, r2, r3
200005ea:	687b      	ldr	r3, [r7, #4]
200005ec:	681a      	ldr	r2, [r3, #0]
200005ee:	697b      	ldr	r3, [r7, #20]
200005f0:	3304      	adds	r3, #4
200005f2:	005b      	lsls	r3, r3, #1
200005f4:	18d3      	adds	r3, r2, r3
200005f6:	3305      	adds	r3, #5
200005f8:	781b      	ldrb	r3, [r3, #0]
200005fa:	001a      	movs	r2, r3
200005fc:	687b      	ldr	r3, [r7, #4]
200005fe:	6a1b      	ldr	r3, [r3, #32]
20000600:	18d3      	adds	r3, r2, r3
20000602:	0019      	movs	r1, r3
20000604:	f7ff ffd4 	bl	200005b0 <graphic_pixel_set>
		for ( int i=0; i <= (o->geo_stand->numpoints-1); i++){
20000608:	697b      	ldr	r3, [r7, #20]
2000060a:	3301      	adds	r3, #1
2000060c:	617b      	str	r3, [r7, #20]
2000060e:	687b      	ldr	r3, [r7, #4]
20000610:	681b      	ldr	r3, [r3, #0]
20000612:	681b      	ldr	r3, [r3, #0]
20000614:	697a      	ldr	r2, [r7, #20]
20000616:	429a      	cmp	r2, r3
20000618:	dbdb      	blt.n	200005d2 <draw_object+0x16>
	else if (o->geo_number==duck){
		for ( int i=0; i <= (o->geo_duck->numpoints-1); i++){
		graphic_pixel_set( (o->geo_duck->px[i].x + o->posx), (o->geo_duck->px[i].y + o->posy));
		}
	}
}
2000061a:	e082      	b.n	20000722 <draw_object+0x166>
	else if (o->geo_number==run){
2000061c:	687b      	ldr	r3, [r7, #4]
2000061e:	691b      	ldr	r3, [r3, #16]
20000620:	2b01      	cmp	r3, #1
20000622:	d127      	bne.n	20000674 <draw_object+0xb8>
		for ( int i=0; i <= (o->geo_run->numpoints-1); i++){
20000624:	2300      	movs	r3, #0
20000626:	613b      	str	r3, [r7, #16]
20000628:	e01d      	b.n	20000666 <draw_object+0xaa>
		graphic_pixel_set( (o->geo_run->px[i].x + o->posx), (o->geo_run->px[i].y + o->posy));
2000062a:	687b      	ldr	r3, [r7, #4]
2000062c:	685a      	ldr	r2, [r3, #4]
2000062e:	693b      	ldr	r3, [r7, #16]
20000630:	3304      	adds	r3, #4
20000632:	005b      	lsls	r3, r3, #1
20000634:	18d3      	adds	r3, r2, r3
20000636:	3304      	adds	r3, #4
20000638:	781b      	ldrb	r3, [r3, #0]
2000063a:	001a      	movs	r2, r3
2000063c:	687b      	ldr	r3, [r7, #4]
2000063e:	69db      	ldr	r3, [r3, #28]
20000640:	18d0      	adds	r0, r2, r3
20000642:	687b      	ldr	r3, [r7, #4]
20000644:	685a      	ldr	r2, [r3, #4]
20000646:	693b      	ldr	r3, [r7, #16]
20000648:	3304      	adds	r3, #4
2000064a:	005b      	lsls	r3, r3, #1
2000064c:	18d3      	adds	r3, r2, r3
2000064e:	3305      	adds	r3, #5
20000650:	781b      	ldrb	r3, [r3, #0]
20000652:	001a      	movs	r2, r3
20000654:	687b      	ldr	r3, [r7, #4]
20000656:	6a1b      	ldr	r3, [r3, #32]
20000658:	18d3      	adds	r3, r2, r3
2000065a:	0019      	movs	r1, r3
2000065c:	f7ff ffa8 	bl	200005b0 <graphic_pixel_set>
		for ( int i=0; i <= (o->geo_run->numpoints-1); i++){
20000660:	693b      	ldr	r3, [r7, #16]
20000662:	3301      	adds	r3, #1
20000664:	613b      	str	r3, [r7, #16]
20000666:	687b      	ldr	r3, [r7, #4]
20000668:	685b      	ldr	r3, [r3, #4]
2000066a:	681b      	ldr	r3, [r3, #0]
2000066c:	693a      	ldr	r2, [r7, #16]
2000066e:	429a      	cmp	r2, r3
20000670:	dbdb      	blt.n	2000062a <draw_object+0x6e>
}
20000672:	e056      	b.n	20000722 <draw_object+0x166>
	else if (o->geo_number==jump){
20000674:	687b      	ldr	r3, [r7, #4]
20000676:	691b      	ldr	r3, [r3, #16]
20000678:	2b02      	cmp	r3, #2
2000067a:	d127      	bne.n	200006cc <draw_object+0x110>
		for ( int i=0; i <= (o->geo_jump->numpoints-1); i++){
2000067c:	2300      	movs	r3, #0
2000067e:	60fb      	str	r3, [r7, #12]
20000680:	e01d      	b.n	200006be <draw_object+0x102>
		graphic_pixel_set( (o->geo_jump->px[i].x + o->posx), (o->geo_jump->px[i].y + o->posy));
20000682:	687b      	ldr	r3, [r7, #4]
20000684:	689a      	ldr	r2, [r3, #8]
20000686:	68fb      	ldr	r3, [r7, #12]
20000688:	3304      	adds	r3, #4
2000068a:	005b      	lsls	r3, r3, #1
2000068c:	18d3      	adds	r3, r2, r3
2000068e:	3304      	adds	r3, #4
20000690:	781b      	ldrb	r3, [r3, #0]
20000692:	001a      	movs	r2, r3
20000694:	687b      	ldr	r3, [r7, #4]
20000696:	69db      	ldr	r3, [r3, #28]
20000698:	18d0      	adds	r0, r2, r3
2000069a:	687b      	ldr	r3, [r7, #4]
2000069c:	689a      	ldr	r2, [r3, #8]
2000069e:	68fb      	ldr	r3, [r7, #12]
200006a0:	3304      	adds	r3, #4
200006a2:	005b      	lsls	r3, r3, #1
200006a4:	18d3      	adds	r3, r2, r3
200006a6:	3305      	adds	r3, #5
200006a8:	781b      	ldrb	r3, [r3, #0]
200006aa:	001a      	movs	r2, r3
200006ac:	687b      	ldr	r3, [r7, #4]
200006ae:	6a1b      	ldr	r3, [r3, #32]
200006b0:	18d3      	adds	r3, r2, r3
200006b2:	0019      	movs	r1, r3
200006b4:	f7ff ff7c 	bl	200005b0 <graphic_pixel_set>
		for ( int i=0; i <= (o->geo_jump->numpoints-1); i++){
200006b8:	68fb      	ldr	r3, [r7, #12]
200006ba:	3301      	adds	r3, #1
200006bc:	60fb      	str	r3, [r7, #12]
200006be:	687b      	ldr	r3, [r7, #4]
200006c0:	689b      	ldr	r3, [r3, #8]
200006c2:	681b      	ldr	r3, [r3, #0]
200006c4:	68fa      	ldr	r2, [r7, #12]
200006c6:	429a      	cmp	r2, r3
200006c8:	dbdb      	blt.n	20000682 <draw_object+0xc6>
}
200006ca:	e02a      	b.n	20000722 <draw_object+0x166>
	else if (o->geo_number==duck){
200006cc:	687b      	ldr	r3, [r7, #4]
200006ce:	691b      	ldr	r3, [r3, #16]
200006d0:	2b03      	cmp	r3, #3
200006d2:	d126      	bne.n	20000722 <draw_object+0x166>
		for ( int i=0; i <= (o->geo_duck->numpoints-1); i++){
200006d4:	2300      	movs	r3, #0
200006d6:	60bb      	str	r3, [r7, #8]
200006d8:	e01d      	b.n	20000716 <draw_object+0x15a>
		graphic_pixel_set( (o->geo_duck->px[i].x + o->posx), (o->geo_duck->px[i].y + o->posy));
200006da:	687b      	ldr	r3, [r7, #4]
200006dc:	68da      	ldr	r2, [r3, #12]
200006de:	68bb      	ldr	r3, [r7, #8]
200006e0:	3304      	adds	r3, #4
200006e2:	005b      	lsls	r3, r3, #1
200006e4:	18d3      	adds	r3, r2, r3
200006e6:	3304      	adds	r3, #4
200006e8:	781b      	ldrb	r3, [r3, #0]
200006ea:	001a      	movs	r2, r3
200006ec:	687b      	ldr	r3, [r7, #4]
200006ee:	69db      	ldr	r3, [r3, #28]
200006f0:	18d0      	adds	r0, r2, r3
200006f2:	687b      	ldr	r3, [r7, #4]
200006f4:	68da      	ldr	r2, [r3, #12]
200006f6:	68bb      	ldr	r3, [r7, #8]
200006f8:	3304      	adds	r3, #4
200006fa:	005b      	lsls	r3, r3, #1
200006fc:	18d3      	adds	r3, r2, r3
200006fe:	3305      	adds	r3, #5
20000700:	781b      	ldrb	r3, [r3, #0]
20000702:	001a      	movs	r2, r3
20000704:	687b      	ldr	r3, [r7, #4]
20000706:	6a1b      	ldr	r3, [r3, #32]
20000708:	18d3      	adds	r3, r2, r3
2000070a:	0019      	movs	r1, r3
2000070c:	f7ff ff50 	bl	200005b0 <graphic_pixel_set>
		for ( int i=0; i <= (o->geo_duck->numpoints-1); i++){
20000710:	68bb      	ldr	r3, [r7, #8]
20000712:	3301      	adds	r3, #1
20000714:	60bb      	str	r3, [r7, #8]
20000716:	687b      	ldr	r3, [r7, #4]
20000718:	68db      	ldr	r3, [r3, #12]
2000071a:	681b      	ldr	r3, [r3, #0]
2000071c:	68ba      	ldr	r2, [r7, #8]
2000071e:	429a      	cmp	r2, r3
20000720:	dbdb      	blt.n	200006da <draw_object+0x11e>
}
20000722:	46c0      	nop			; (mov r8, r8)
20000724:	46bd      	mov	sp, r7
20000726:	b006      	add	sp, #24
20000728:	bd80      	pop	{r7, pc}

2000072a <clear_object>:

void clear_object (POBJECT o){
2000072a:	b580      	push	{r7, lr}
2000072c:	b086      	sub	sp, #24
2000072e:	af00      	add	r7, sp, #0
20000730:	6078      	str	r0, [r7, #4]
	if (o->geo_number==stand){
20000732:	687b      	ldr	r3, [r7, #4]
20000734:	691b      	ldr	r3, [r3, #16]
20000736:	2b00      	cmp	r3, #0
20000738:	d127      	bne.n	2000078a <clear_object+0x60>
		for ( int i=0; i <= (o->geo_stand->numpoints-1); i++){
2000073a:	2300      	movs	r3, #0
2000073c:	617b      	str	r3, [r7, #20]
2000073e:	e01d      	b.n	2000077c <clear_object+0x52>
		graphic_pixel_clear( (o->geo_stand->px[i].x + o->posx), (o->geo_stand->px[i].y + o->posy));
20000740:	687b      	ldr	r3, [r7, #4]
20000742:	681a      	ldr	r2, [r3, #0]
20000744:	697b      	ldr	r3, [r7, #20]
20000746:	3304      	adds	r3, #4
20000748:	005b      	lsls	r3, r3, #1
2000074a:	18d3      	adds	r3, r2, r3
2000074c:	3304      	adds	r3, #4
2000074e:	781b      	ldrb	r3, [r3, #0]
20000750:	001a      	movs	r2, r3
20000752:	687b      	ldr	r3, [r7, #4]
20000754:	69db      	ldr	r3, [r3, #28]
20000756:	18d0      	adds	r0, r2, r3
20000758:	687b      	ldr	r3, [r7, #4]
2000075a:	681a      	ldr	r2, [r3, #0]
2000075c:	697b      	ldr	r3, [r7, #20]
2000075e:	3304      	adds	r3, #4
20000760:	005b      	lsls	r3, r3, #1
20000762:	18d3      	adds	r3, r2, r3
20000764:	3305      	adds	r3, #5
20000766:	781b      	ldrb	r3, [r3, #0]
20000768:	001a      	movs	r2, r3
2000076a:	687b      	ldr	r3, [r7, #4]
2000076c:	6a1b      	ldr	r3, [r3, #32]
2000076e:	18d3      	adds	r3, r2, r3
20000770:	0019      	movs	r1, r3
20000772:	f7ff ff20 	bl	200005b6 <graphic_pixel_clear>
		for ( int i=0; i <= (o->geo_stand->numpoints-1); i++){
20000776:	697b      	ldr	r3, [r7, #20]
20000778:	3301      	adds	r3, #1
2000077a:	617b      	str	r3, [r7, #20]
2000077c:	687b      	ldr	r3, [r7, #4]
2000077e:	681b      	ldr	r3, [r3, #0]
20000780:	681b      	ldr	r3, [r3, #0]
20000782:	697a      	ldr	r2, [r7, #20]
20000784:	429a      	cmp	r2, r3
20000786:	dbdb      	blt.n	20000740 <clear_object+0x16>
	else if (o->geo_number==duck){
		for ( int i=0; i <= (o->geo_duck->numpoints-1); i++){
		graphic_pixel_clear( (o->geo_duck->px[i].x + o->posx), (o->geo_duck->px[i].y + o->posy));
		}
	}
}
20000788:	e082      	b.n	20000890 <clear_object+0x166>
	else if (o->geo_number==run){
2000078a:	687b      	ldr	r3, [r7, #4]
2000078c:	691b      	ldr	r3, [r3, #16]
2000078e:	2b01      	cmp	r3, #1
20000790:	d127      	bne.n	200007e2 <clear_object+0xb8>
		for ( int i=0; i <= (o->geo_run->numpoints-1); i++){
20000792:	2300      	movs	r3, #0
20000794:	613b      	str	r3, [r7, #16]
20000796:	e01d      	b.n	200007d4 <clear_object+0xaa>
		graphic_pixel_clear( (o->geo_run->px[i].x + o->posx), (o->geo_run->px[i].y + o->posy));
20000798:	687b      	ldr	r3, [r7, #4]
2000079a:	685a      	ldr	r2, [r3, #4]
2000079c:	693b      	ldr	r3, [r7, #16]
2000079e:	3304      	adds	r3, #4
200007a0:	005b      	lsls	r3, r3, #1
200007a2:	18d3      	adds	r3, r2, r3
200007a4:	3304      	adds	r3, #4
200007a6:	781b      	ldrb	r3, [r3, #0]
200007a8:	001a      	movs	r2, r3
200007aa:	687b      	ldr	r3, [r7, #4]
200007ac:	69db      	ldr	r3, [r3, #28]
200007ae:	18d0      	adds	r0, r2, r3
200007b0:	687b      	ldr	r3, [r7, #4]
200007b2:	685a      	ldr	r2, [r3, #4]
200007b4:	693b      	ldr	r3, [r7, #16]
200007b6:	3304      	adds	r3, #4
200007b8:	005b      	lsls	r3, r3, #1
200007ba:	18d3      	adds	r3, r2, r3
200007bc:	3305      	adds	r3, #5
200007be:	781b      	ldrb	r3, [r3, #0]
200007c0:	001a      	movs	r2, r3
200007c2:	687b      	ldr	r3, [r7, #4]
200007c4:	6a1b      	ldr	r3, [r3, #32]
200007c6:	18d3      	adds	r3, r2, r3
200007c8:	0019      	movs	r1, r3
200007ca:	f7ff fef4 	bl	200005b6 <graphic_pixel_clear>
		for ( int i=0; i <= (o->geo_run->numpoints-1); i++){
200007ce:	693b      	ldr	r3, [r7, #16]
200007d0:	3301      	adds	r3, #1
200007d2:	613b      	str	r3, [r7, #16]
200007d4:	687b      	ldr	r3, [r7, #4]
200007d6:	685b      	ldr	r3, [r3, #4]
200007d8:	681b      	ldr	r3, [r3, #0]
200007da:	693a      	ldr	r2, [r7, #16]
200007dc:	429a      	cmp	r2, r3
200007de:	dbdb      	blt.n	20000798 <clear_object+0x6e>
}
200007e0:	e056      	b.n	20000890 <clear_object+0x166>
	else if (o->geo_number==jump){
200007e2:	687b      	ldr	r3, [r7, #4]
200007e4:	691b      	ldr	r3, [r3, #16]
200007e6:	2b02      	cmp	r3, #2
200007e8:	d127      	bne.n	2000083a <clear_object+0x110>
		for ( int i=0; i <= (o->geo_jump->numpoints-1); i++){
200007ea:	2300      	movs	r3, #0
200007ec:	60fb      	str	r3, [r7, #12]
200007ee:	e01d      	b.n	2000082c <clear_object+0x102>
		graphic_pixel_clear( (o->geo_jump->px[i].x + o->posx), (o->geo_jump->px[i].y + o->posy));
200007f0:	687b      	ldr	r3, [r7, #4]
200007f2:	689a      	ldr	r2, [r3, #8]
200007f4:	68fb      	ldr	r3, [r7, #12]
200007f6:	3304      	adds	r3, #4
200007f8:	005b      	lsls	r3, r3, #1
200007fa:	18d3      	adds	r3, r2, r3
200007fc:	3304      	adds	r3, #4
200007fe:	781b      	ldrb	r3, [r3, #0]
20000800:	001a      	movs	r2, r3
20000802:	687b      	ldr	r3, [r7, #4]
20000804:	69db      	ldr	r3, [r3, #28]
20000806:	18d0      	adds	r0, r2, r3
20000808:	687b      	ldr	r3, [r7, #4]
2000080a:	689a      	ldr	r2, [r3, #8]
2000080c:	68fb      	ldr	r3, [r7, #12]
2000080e:	3304      	adds	r3, #4
20000810:	005b      	lsls	r3, r3, #1
20000812:	18d3      	adds	r3, r2, r3
20000814:	3305      	adds	r3, #5
20000816:	781b      	ldrb	r3, [r3, #0]
20000818:	001a      	movs	r2, r3
2000081a:	687b      	ldr	r3, [r7, #4]
2000081c:	6a1b      	ldr	r3, [r3, #32]
2000081e:	18d3      	adds	r3, r2, r3
20000820:	0019      	movs	r1, r3
20000822:	f7ff fec8 	bl	200005b6 <graphic_pixel_clear>
		for ( int i=0; i <= (o->geo_jump->numpoints-1); i++){
20000826:	68fb      	ldr	r3, [r7, #12]
20000828:	3301      	adds	r3, #1
2000082a:	60fb      	str	r3, [r7, #12]
2000082c:	687b      	ldr	r3, [r7, #4]
2000082e:	689b      	ldr	r3, [r3, #8]
20000830:	681b      	ldr	r3, [r3, #0]
20000832:	68fa      	ldr	r2, [r7, #12]
20000834:	429a      	cmp	r2, r3
20000836:	dbdb      	blt.n	200007f0 <clear_object+0xc6>
}
20000838:	e02a      	b.n	20000890 <clear_object+0x166>
	else if (o->geo_number==duck){
2000083a:	687b      	ldr	r3, [r7, #4]
2000083c:	691b      	ldr	r3, [r3, #16]
2000083e:	2b03      	cmp	r3, #3
20000840:	d126      	bne.n	20000890 <clear_object+0x166>
		for ( int i=0; i <= (o->geo_duck->numpoints-1); i++){
20000842:	2300      	movs	r3, #0
20000844:	60bb      	str	r3, [r7, #8]
20000846:	e01d      	b.n	20000884 <clear_object+0x15a>
		graphic_pixel_clear( (o->geo_duck->px[i].x + o->posx), (o->geo_duck->px[i].y + o->posy));
20000848:	687b      	ldr	r3, [r7, #4]
2000084a:	68da      	ldr	r2, [r3, #12]
2000084c:	68bb      	ldr	r3, [r7, #8]
2000084e:	3304      	adds	r3, #4
20000850:	005b      	lsls	r3, r3, #1
20000852:	18d3      	adds	r3, r2, r3
20000854:	3304      	adds	r3, #4
20000856:	781b      	ldrb	r3, [r3, #0]
20000858:	001a      	movs	r2, r3
2000085a:	687b      	ldr	r3, [r7, #4]
2000085c:	69db      	ldr	r3, [r3, #28]
2000085e:	18d0      	adds	r0, r2, r3
20000860:	687b      	ldr	r3, [r7, #4]
20000862:	68da      	ldr	r2, [r3, #12]
20000864:	68bb      	ldr	r3, [r7, #8]
20000866:	3304      	adds	r3, #4
20000868:	005b      	lsls	r3, r3, #1
2000086a:	18d3      	adds	r3, r2, r3
2000086c:	3305      	adds	r3, #5
2000086e:	781b      	ldrb	r3, [r3, #0]
20000870:	001a      	movs	r2, r3
20000872:	687b      	ldr	r3, [r7, #4]
20000874:	6a1b      	ldr	r3, [r3, #32]
20000876:	18d3      	adds	r3, r2, r3
20000878:	0019      	movs	r1, r3
2000087a:	f7ff fe9c 	bl	200005b6 <graphic_pixel_clear>
		for ( int i=0; i <= (o->geo_duck->numpoints-1); i++){
2000087e:	68bb      	ldr	r3, [r7, #8]
20000880:	3301      	adds	r3, #1
20000882:	60bb      	str	r3, [r7, #8]
20000884:	687b      	ldr	r3, [r7, #4]
20000886:	68db      	ldr	r3, [r3, #12]
20000888:	681b      	ldr	r3, [r3, #0]
2000088a:	68ba      	ldr	r2, [r7, #8]
2000088c:	429a      	cmp	r2, r3
2000088e:	dbdb      	blt.n	20000848 <clear_object+0x11e>
}
20000890:	46c0      	nop			; (mov r8, r8)
20000892:	46bd      	mov	sp, r7
20000894:	b006      	add	sp, #24
20000896:	bd80      	pop	{r7, pc}

20000898 <move_catobject>:

void move_catobject (POBJECT o){
20000898:	b580      	push	{r7, lr}
2000089a:	b082      	sub	sp, #8
2000089c:	af00      	add	r7, sp, #0
2000089e:	6078      	str	r0, [r7, #4]
	
	clear_object(o);
200008a0:	687b      	ldr	r3, [r7, #4]
200008a2:	0018      	movs	r0, r3
200008a4:	f7ff ff41 	bl	2000072a <clear_object>
	o->geo_number=run;
200008a8:	687b      	ldr	r3, [r7, #4]
200008aa:	2201      	movs	r2, #1
200008ac:	611a      	str	r2, [r3, #16]
	draw_object(o);
200008ae:	687b      	ldr	r3, [r7, #4]
200008b0:	0018      	movs	r0, r3
200008b2:	f7ff fe83 	bl	200005bc <draw_object>
	clear_object(o);
200008b6:	687b      	ldr	r3, [r7, #4]
200008b8:	0018      	movs	r0, r3
200008ba:	f7ff ff36 	bl	2000072a <clear_object>
	o->geo_number=stand;
200008be:	687b      	ldr	r3, [r7, #4]
200008c0:	2200      	movs	r2, #0
200008c2:	611a      	str	r2, [r3, #16]
	draw_object(o);
200008c4:	687b      	ldr	r3, [r7, #4]
200008c6:	0018      	movs	r0, r3
200008c8:	f7ff fe78 	bl	200005bc <draw_object>
} 
200008cc:	46c0      	nop			; (mov r8, r8)
200008ce:	46bd      	mov	sp, r7
200008d0:	b002      	add	sp, #8
200008d2:	bd80      	pop	{r7, pc}

200008d4 <move_mouseobject>:

void move_mouseobject (POBJECT o){
200008d4:	b580      	push	{r7, lr}
200008d6:	b082      	sub	sp, #8
200008d8:	af00      	add	r7, sp, #0
200008da:	6078      	str	r0, [r7, #4]
	
	clear_object(o);
200008dc:	687b      	ldr	r3, [r7, #4]
200008de:	0018      	movs	r0, r3
200008e0:	f7ff ff23 	bl	2000072a <clear_object>
	o->geo_number=run;
200008e4:	687b      	ldr	r3, [r7, #4]
200008e6:	2201      	movs	r2, #1
200008e8:	611a      	str	r2, [r3, #16]
	draw_object(o);
200008ea:	687b      	ldr	r3, [r7, #4]
200008ec:	0018      	movs	r0, r3
200008ee:	f7ff fe65 	bl	200005bc <draw_object>
	o->posx = (o->posx + o->dirx);
200008f2:	687b      	ldr	r3, [r7, #4]
200008f4:	69da      	ldr	r2, [r3, #28]
200008f6:	687b      	ldr	r3, [r7, #4]
200008f8:	695b      	ldr	r3, [r3, #20]
200008fa:	18d2      	adds	r2, r2, r3
200008fc:	687b      	ldr	r3, [r7, #4]
200008fe:	61da      	str	r2, [r3, #28]
	clear_object(o);
20000900:	687b      	ldr	r3, [r7, #4]
20000902:	0018      	movs	r0, r3
20000904:	f7ff ff11 	bl	2000072a <clear_object>
	o->geo_number=stand;
20000908:	687b      	ldr	r3, [r7, #4]
2000090a:	2200      	movs	r2, #0
2000090c:	611a      	str	r2, [r3, #16]
	draw_object(o);
2000090e:	687b      	ldr	r3, [r7, #4]
20000910:	0018      	movs	r0, r3
20000912:	f7ff fe53 	bl	200005bc <draw_object>
	o->posx = (o->posx + o->dirx);
20000916:	687b      	ldr	r3, [r7, #4]
20000918:	69da      	ldr	r2, [r3, #28]
2000091a:	687b      	ldr	r3, [r7, #4]
2000091c:	695b      	ldr	r3, [r3, #20]
2000091e:	18d2      	adds	r2, r2, r3
20000920:	687b      	ldr	r3, [r7, #4]
20000922:	61da      	str	r2, [r3, #28]
} 
20000924:	46c0      	nop			; (mov r8, r8)
20000926:	46bd      	mov	sp, r7
20000928:	b002      	add	sp, #8
2000092a:	bd80      	pop	{r7, pc}

2000092c <move_jump_catobject>:

void move_jump_catobject (POBJECT o){
2000092c:	b580      	push	{r7, lr}
2000092e:	b082      	sub	sp, #8
20000930:	af00      	add	r7, sp, #0
20000932:	6078      	str	r0, [r7, #4]
	clear_object(o);
20000934:	687b      	ldr	r3, [r7, #4]
20000936:	0018      	movs	r0, r3
20000938:	f7ff fef7 	bl	2000072a <clear_object>
	o->geo_number=jump;
2000093c:	687b      	ldr	r3, [r7, #4]
2000093e:	2202      	movs	r2, #2
20000940:	611a      	str	r2, [r3, #16]
	o->posy=(o->posy+o->diry);
20000942:	687b      	ldr	r3, [r7, #4]
20000944:	6a1a      	ldr	r2, [r3, #32]
20000946:	687b      	ldr	r3, [r7, #4]
20000948:	699b      	ldr	r3, [r3, #24]
2000094a:	18d2      	adds	r2, r2, r3
2000094c:	687b      	ldr	r3, [r7, #4]
2000094e:	621a      	str	r2, [r3, #32]
	if (hits_roof){
		o->diry=0;
20000950:	687b      	ldr	r3, [r7, #4]
20000952:	2200      	movs	r2, #0
20000954:	619a      	str	r2, [r3, #24]
	}
	draw_object(o);
20000956:	687b      	ldr	r3, [r7, #4]
20000958:	0018      	movs	r0, r3
2000095a:	f7ff fe2f 	bl	200005bc <draw_object>
}	
2000095e:	46c0      	nop			; (mov r8, r8)
20000960:	46bd      	mov	sp, r7
20000962:	b002      	add	sp, #8
20000964:	bd80      	pop	{r7, pc}

20000966 <move_duck_catobject>:

void move_duck_catobject (POBJECT o){
20000966:	b580      	push	{r7, lr}
20000968:	b082      	sub	sp, #8
2000096a:	af00      	add	r7, sp, #0
2000096c:	6078      	str	r0, [r7, #4]
	clear_object(o);
2000096e:	687b      	ldr	r3, [r7, #4]
20000970:	0018      	movs	r0, r3
20000972:	f7ff feda 	bl	2000072a <clear_object>
	o->geo_number=duck;
20000976:	687b      	ldr	r3, [r7, #4]
20000978:	2203      	movs	r2, #3
2000097a:	611a      	str	r2, [r3, #16]
	draw_object(o);
2000097c:	687b      	ldr	r3, [r7, #4]
2000097e:	0018      	movs	r0, r3
20000980:	f7ff fe1c 	bl	200005bc <draw_object>
}
20000984:	46c0      	nop			; (mov r8, r8)
20000986:	46bd      	mov	sp, r7
20000988:	b002      	add	sp, #8
2000098a:	bd80      	pop	{r7, pc}

2000098c <hits_roof>:

int hits_roof(POBJECT o){
2000098c:	b580      	push	{r7, lr}
2000098e:	b082      	sub	sp, #8
20000990:	af00      	add	r7, sp, #0
20000992:	6078      	str	r0, [r7, #4]
	 if (o->posx < 1){
20000994:	687b      	ldr	r3, [r7, #4]
20000996:	69db      	ldr	r3, [r3, #28]
20000998:	2b00      	cmp	r3, #0
2000099a:	dc01      	bgt.n	200009a0 <hits_roof+0x14>
		return 1;
2000099c:	2301      	movs	r3, #1
2000099e:	e000      	b.n	200009a2 <hits_roof+0x16>
	}
	else {
		return 0;
200009a0:	2300      	movs	r3, #0
	}
}
200009a2:	0018      	movs	r0, r3
200009a4:	46bd      	mov	sp, r7
200009a6:	b002      	add	sp, #8
200009a8:	bd80      	pop	{r7, pc}

200009aa <set_object_speed>:

void set_object_speed (POBJECT o, int speedx, int speedy)
{
200009aa:	b580      	push	{r7, lr}
200009ac:	b084      	sub	sp, #16
200009ae:	af00      	add	r7, sp, #0
200009b0:	60f8      	str	r0, [r7, #12]
200009b2:	60b9      	str	r1, [r7, #8]
200009b4:	607a      	str	r2, [r7, #4]
o->dirx=speedx;
200009b6:	68fb      	ldr	r3, [r7, #12]
200009b8:	68ba      	ldr	r2, [r7, #8]
200009ba:	615a      	str	r2, [r3, #20]
o->diry=speedy;
200009bc:	68fb      	ldr	r3, [r7, #12]
200009be:	687a      	ldr	r2, [r7, #4]
200009c0:	619a      	str	r2, [r3, #24]
}
200009c2:	46c0      	nop			; (mov r8, r8)
200009c4:	46bd      	mov	sp, r7
200009c6:	b004      	add	sp, #16
200009c8:	bd80      	pop	{r7, pc}

200009ca <exact_objects_overlap>:

int exact_objects_overlap (POBJECT o1, POBJECT o2){
200009ca:	b580      	push	{r7, lr}
200009cc:	b086      	sub	sp, #24
200009ce:	af00      	add	r7, sp, #0
200009d0:	6078      	str	r0, [r7, #4]
200009d2:	6039      	str	r1, [r7, #0]
  int offset1x = o1->posx;
200009d4:	687b      	ldr	r3, [r7, #4]
200009d6:	69db      	ldr	r3, [r3, #28]
200009d8:	617b      	str	r3, [r7, #20]
  int offset1y = o1->posy;
200009da:	687b      	ldr	r3, [r7, #4]
200009dc:	6a1b      	ldr	r3, [r3, #32]
200009de:	613b      	str	r3, [r7, #16]
  int offset2x = o2->posx;
200009e0:	683b      	ldr	r3, [r7, #0]
200009e2:	69db      	ldr	r3, [r3, #28]
200009e4:	60fb      	str	r3, [r7, #12]
  int offset2y = o2->posy;
200009e6:	683b      	ldr	r3, [r7, #0]
200009e8:	6a1b      	ldr	r3, [r3, #32]
200009ea:	60bb      	str	r3, [r7, #8]
      if ((offset1x + o1->geo->px[i].x == offset2x + o2->geo->px[j].x) &&
        (offset1y + o1->geo->px[i].y == offset2y + o2->geo->px[j].y)) 
		return 1;
  }
   * */
  return 0;
200009ec:	2300      	movs	r3, #0
}
200009ee:	0018      	movs	r0, r3
200009f0:	46bd      	mov	sp, r7
200009f2:	b006      	add	sp, #24
200009f4:	bd80      	pop	{r7, pc}
	...

200009f8 <__udivsi3>:
200009f8:	2200      	movs	r2, #0
200009fa:	0843      	lsrs	r3, r0, #1
200009fc:	428b      	cmp	r3, r1
200009fe:	d374      	bcc.n	20000aea <__udivsi3+0xf2>
20000a00:	0903      	lsrs	r3, r0, #4
20000a02:	428b      	cmp	r3, r1
20000a04:	d35f      	bcc.n	20000ac6 <__udivsi3+0xce>
20000a06:	0a03      	lsrs	r3, r0, #8
20000a08:	428b      	cmp	r3, r1
20000a0a:	d344      	bcc.n	20000a96 <__udivsi3+0x9e>
20000a0c:	0b03      	lsrs	r3, r0, #12
20000a0e:	428b      	cmp	r3, r1
20000a10:	d328      	bcc.n	20000a64 <__udivsi3+0x6c>
20000a12:	0c03      	lsrs	r3, r0, #16
20000a14:	428b      	cmp	r3, r1
20000a16:	d30d      	bcc.n	20000a34 <__udivsi3+0x3c>
20000a18:	22ff      	movs	r2, #255	; 0xff
20000a1a:	0209      	lsls	r1, r1, #8
20000a1c:	ba12      	rev	r2, r2
20000a1e:	0c03      	lsrs	r3, r0, #16
20000a20:	428b      	cmp	r3, r1
20000a22:	d302      	bcc.n	20000a2a <__udivsi3+0x32>
20000a24:	1212      	asrs	r2, r2, #8
20000a26:	0209      	lsls	r1, r1, #8
20000a28:	d065      	beq.n	20000af6 <__udivsi3+0xfe>
20000a2a:	0b03      	lsrs	r3, r0, #12
20000a2c:	428b      	cmp	r3, r1
20000a2e:	d319      	bcc.n	20000a64 <__udivsi3+0x6c>
20000a30:	e000      	b.n	20000a34 <__udivsi3+0x3c>
20000a32:	0a09      	lsrs	r1, r1, #8
20000a34:	0bc3      	lsrs	r3, r0, #15
20000a36:	428b      	cmp	r3, r1
20000a38:	d301      	bcc.n	20000a3e <__udivsi3+0x46>
20000a3a:	03cb      	lsls	r3, r1, #15
20000a3c:	1ac0      	subs	r0, r0, r3
20000a3e:	4152      	adcs	r2, r2
20000a40:	0b83      	lsrs	r3, r0, #14
20000a42:	428b      	cmp	r3, r1
20000a44:	d301      	bcc.n	20000a4a <__udivsi3+0x52>
20000a46:	038b      	lsls	r3, r1, #14
20000a48:	1ac0      	subs	r0, r0, r3
20000a4a:	4152      	adcs	r2, r2
20000a4c:	0b43      	lsrs	r3, r0, #13
20000a4e:	428b      	cmp	r3, r1
20000a50:	d301      	bcc.n	20000a56 <__udivsi3+0x5e>
20000a52:	034b      	lsls	r3, r1, #13
20000a54:	1ac0      	subs	r0, r0, r3
20000a56:	4152      	adcs	r2, r2
20000a58:	0b03      	lsrs	r3, r0, #12
20000a5a:	428b      	cmp	r3, r1
20000a5c:	d301      	bcc.n	20000a62 <__udivsi3+0x6a>
20000a5e:	030b      	lsls	r3, r1, #12
20000a60:	1ac0      	subs	r0, r0, r3
20000a62:	4152      	adcs	r2, r2
20000a64:	0ac3      	lsrs	r3, r0, #11
20000a66:	428b      	cmp	r3, r1
20000a68:	d301      	bcc.n	20000a6e <__udivsi3+0x76>
20000a6a:	02cb      	lsls	r3, r1, #11
20000a6c:	1ac0      	subs	r0, r0, r3
20000a6e:	4152      	adcs	r2, r2
20000a70:	0a83      	lsrs	r3, r0, #10
20000a72:	428b      	cmp	r3, r1
20000a74:	d301      	bcc.n	20000a7a <__udivsi3+0x82>
20000a76:	028b      	lsls	r3, r1, #10
20000a78:	1ac0      	subs	r0, r0, r3
20000a7a:	4152      	adcs	r2, r2
20000a7c:	0a43      	lsrs	r3, r0, #9
20000a7e:	428b      	cmp	r3, r1
20000a80:	d301      	bcc.n	20000a86 <__udivsi3+0x8e>
20000a82:	024b      	lsls	r3, r1, #9
20000a84:	1ac0      	subs	r0, r0, r3
20000a86:	4152      	adcs	r2, r2
20000a88:	0a03      	lsrs	r3, r0, #8
20000a8a:	428b      	cmp	r3, r1
20000a8c:	d301      	bcc.n	20000a92 <__udivsi3+0x9a>
20000a8e:	020b      	lsls	r3, r1, #8
20000a90:	1ac0      	subs	r0, r0, r3
20000a92:	4152      	adcs	r2, r2
20000a94:	d2cd      	bcs.n	20000a32 <__udivsi3+0x3a>
20000a96:	09c3      	lsrs	r3, r0, #7
20000a98:	428b      	cmp	r3, r1
20000a9a:	d301      	bcc.n	20000aa0 <__udivsi3+0xa8>
20000a9c:	01cb      	lsls	r3, r1, #7
20000a9e:	1ac0      	subs	r0, r0, r3
20000aa0:	4152      	adcs	r2, r2
20000aa2:	0983      	lsrs	r3, r0, #6
20000aa4:	428b      	cmp	r3, r1
20000aa6:	d301      	bcc.n	20000aac <__udivsi3+0xb4>
20000aa8:	018b      	lsls	r3, r1, #6
20000aaa:	1ac0      	subs	r0, r0, r3
20000aac:	4152      	adcs	r2, r2
20000aae:	0943      	lsrs	r3, r0, #5
20000ab0:	428b      	cmp	r3, r1
20000ab2:	d301      	bcc.n	20000ab8 <__udivsi3+0xc0>
20000ab4:	014b      	lsls	r3, r1, #5
20000ab6:	1ac0      	subs	r0, r0, r3
20000ab8:	4152      	adcs	r2, r2
20000aba:	0903      	lsrs	r3, r0, #4
20000abc:	428b      	cmp	r3, r1
20000abe:	d301      	bcc.n	20000ac4 <__udivsi3+0xcc>
20000ac0:	010b      	lsls	r3, r1, #4
20000ac2:	1ac0      	subs	r0, r0, r3
20000ac4:	4152      	adcs	r2, r2
20000ac6:	08c3      	lsrs	r3, r0, #3
20000ac8:	428b      	cmp	r3, r1
20000aca:	d301      	bcc.n	20000ad0 <__udivsi3+0xd8>
20000acc:	00cb      	lsls	r3, r1, #3
20000ace:	1ac0      	subs	r0, r0, r3
20000ad0:	4152      	adcs	r2, r2
20000ad2:	0883      	lsrs	r3, r0, #2
20000ad4:	428b      	cmp	r3, r1
20000ad6:	d301      	bcc.n	20000adc <__udivsi3+0xe4>
20000ad8:	008b      	lsls	r3, r1, #2
20000ada:	1ac0      	subs	r0, r0, r3
20000adc:	4152      	adcs	r2, r2
20000ade:	0843      	lsrs	r3, r0, #1
20000ae0:	428b      	cmp	r3, r1
20000ae2:	d301      	bcc.n	20000ae8 <__udivsi3+0xf0>
20000ae4:	004b      	lsls	r3, r1, #1
20000ae6:	1ac0      	subs	r0, r0, r3
20000ae8:	4152      	adcs	r2, r2
20000aea:	1a41      	subs	r1, r0, r1
20000aec:	d200      	bcs.n	20000af0 <__udivsi3+0xf8>
20000aee:	4601      	mov	r1, r0
20000af0:	4152      	adcs	r2, r2
20000af2:	4610      	mov	r0, r2
20000af4:	4770      	bx	lr
20000af6:	e7ff      	b.n	20000af8 <__udivsi3+0x100>
20000af8:	b501      	push	{r0, lr}
20000afa:	2000      	movs	r0, #0
20000afc:	f000 f806 	bl	20000b0c <__aeabi_idiv0>
20000b00:	bd02      	pop	{r1, pc}
20000b02:	46c0      	nop			; (mov r8, r8)

20000b04 <__aeabi_uidivmod>:
20000b04:	2900      	cmp	r1, #0
20000b06:	d0f7      	beq.n	20000af8 <__udivsi3+0x100>
20000b08:	e776      	b.n	200009f8 <__udivsi3>
20000b0a:	4770      	bx	lr

20000b0c <__aeabi_idiv0>:
20000b0c:	4770      	bx	lr
20000b0e:	46c0      	nop			; (mov r8, r8)

20000b10 <cat_jump_geometry>:
20000b10:	000000bc 	strheq	r0, [r0], -ip
20000b14:	0000002b 	andeq	r0, r0, fp, lsr #32
20000b18:	00000014 	andeq	r0, r0, r4, lsl r0
20000b1c:	16001200 	strne	r1, [r0], -r0, lsl #4
20000b20:	13011101 	movwne	r1, #4353	; 0x1101
20000b24:	17011501 	strne	r1, [r1, -r1, lsl #10]
20000b28:	13021102 	movwne	r1, #8450	; 0x2102
20000b2c:	16021402 	strne	r1, [r2], -r2, lsl #8
20000b30:	11031702 	tstne	r3, r2, lsl #14
20000b34:	14031303 	strne	r1, [r3], #-771	; 0xfffffcfd
20000b38:	11041603 	tstne	r4, r3, lsl #12
20000b3c:	14041304 	strne	r1, [r4], #-772	; 0xfffffcfc
20000b40:	11051604 	tstne	r5, r4, lsl #12
20000b44:	14051305 	strne	r1, [r5], #-773	; 0xfffffcfb
20000b48:	11061605 	tstne	r6, r5, lsl #12
20000b4c:	16061406 	strne	r1, [r6], -r6, lsl #8
20000b50:	08070707 	stmdaeq	r7, {r0, r1, r2, r8, r9, sl}
20000b54:	11070907 	tstne	r7, r7, lsl #18
20000b58:	16071307 	strne	r1, [r7], -r7, lsl #6
20000b5c:	0a080608 	beq	20202384 <keyb_state+0x1fc610>
20000b60:	13081108 	movwne	r1, #33032	; 0x8108
20000b64:	07091608 	streq	r1, [r9, -r8, lsl #12]
20000b68:	0b090809 	bleq	20242b94 <keyb_state+0x23ce20>
20000b6c:	13091109 	movwne	r1, #37129	; 0x9109
20000b70:	090a1609 	stmdbeq	sl, {r0, r3, r9, sl, ip}
20000b74:	110a0c0a 	tstne	sl, sl, lsl #24
20000b78:	16091309 	strne	r1, [r9], -r9, lsl #6
20000b7c:	0d0b0a0b 	vstreq	s0, [fp, #-44]	; 0xffffffd4
20000b80:	110b0e0b 	tstne	fp, fp, lsl #28
20000b84:	160b120b 	strne	r1, [fp], -fp, lsl #4
20000b88:	0f0c0b0c 	svceq	0x000c0b0c
20000b8c:	120c110c 	andne	r1, ip, #12, 2
20000b90:	0c0d170c 	stceq	7, cr1, [sp], {12}
20000b94:	110d0f0d 	tstne	sp, sp, lsl #30
20000b98:	170d100d 	strne	r1, [sp, -sp]
20000b9c:	170e0d0e 	strne	r0, [lr, -lr, lsl #26]
20000ba0:	170f0e0f 	strne	r0, [pc, -pc, lsl #28]
20000ba4:	10100f10 	andsne	r0, r0, r0, lsl pc
20000ba8:	0f111810 	svceq	0x00111810
20000bac:	0f121811 	svceq	0x00121811
20000bb0:	0f131812 	svceq	0x00131812
20000bb4:	0f141813 	svceq	0x00141813
20000bb8:	0f151714 	svceq	0x00151714
20000bbc:	0f161715 	svceq	0x00161715
20000bc0:	0f171716 	svceq	0x00171716
20000bc4:	10181717 	andsne	r1, r8, r7, lsl r7
20000bc8:	10191718 	andsne	r1, r9, r8, lsl r7
20000bcc:	14191219 	ldrne	r1, [r9], #-537	; 0xfffffde7
20000bd0:	091a1719 	ldmdbeq	sl, {r0, r3, r4, r8, r9, sl, ip}
20000bd4:	0b1a0a1a 	bleq	20683444 <keyb_state+0x67d6d0>
20000bd8:	0d1a0c1a 	ldceq	12, cr0, [sl, #-104]	; 0xffffff98
20000bdc:	0f1a0e1a 	svceq	0x001a0e1a
20000be0:	111a101a 	tstne	sl, sl, lsl r0
20000be4:	131a121a 	tstne	sl, #-1610612735	; 0xa0000001
20000be8:	171a141a 			; <UNDEFINED> instruction: 0x171a141a
20000bec:	121b081b 	andsne	r0, fp, #1769472	; 0x1b0000
20000bf0:	171b141b 			; <UNDEFINED> instruction: 0x171b141b
20000bf4:	121c091c 	andsne	r0, ip, #28, 18	; 0x70000
20000bf8:	171c141c 			; <UNDEFINED> instruction: 0x171c141c
20000bfc:	0a1d181c 	beq	20746c74 <keyb_state+0x740f00>
20000c00:	181d151d 	ldmdane	sp, {r0, r2, r3, r4, r8, sl, ip}
20000c04:	131e0b1e 	tstne	lr, #30720	; 0x7800
20000c08:	181e151e 	ldmdane	lr, {r1, r2, r3, r4, r8, sl, ip}
20000c0c:	101f0c1f 	andsne	r0, pc, pc, lsl ip	; <UNPREDICTABLE>
20000c10:	151f141f 	ldrne	r1, [pc, #-1055]	; 200007f9 <clear_object+0xcf>
20000c14:	0c20181f 	stceq	8, cr1, [r0], #-124	; 0xffffff84
20000c18:	14201220 	strtne	r1, [r0], #-544	; 0xfffffde0
20000c1c:	19201520 	stmdbne	r0!, {r5, r8, sl, ip}
20000c20:	12210c21 	eorne	r0, r1, #8448	; 0x2100
20000c24:	15211321 	strne	r1, [r1, #-801]!	; 0xfffffcdf
20000c28:	0c221921 			; <UNDEFINED> instruction: 0x0c221921
20000c2c:	14221222 	strtne	r1, [r2], #-546	; 0xfffffdde
20000c30:	19221522 	stmdbne	r2!, {r1, r5, r8, sl, ip}
20000c34:	10230c23 	eorne	r0, r3, r3, lsr #24
20000c38:	15231423 	strne	r1, [r3, #-1059]!	; 0xfffffbdd
20000c3c:	0b241923 	bleq	209070d0 <keyb_state+0x90135c>
20000c40:	15241324 	strne	r1, [r4, #-804]!	; 0xfffffcdc
20000c44:	0a251924 	beq	209470dc <keyb_state+0x941368>
20000c48:	16251525 	strtne	r1, [r5], -r5, lsr #10
20000c4c:	09261925 	stmdbeq	r6!, {r0, r2, r5, r8, fp, ip}
20000c50:	14261226 	strtne	r1, [r6], #-550	; 0xfffffdda
20000c54:	19261626 	stmdbne	r6!, {r1, r2, r5, r9, sl, ip}
20000c58:	12270827 	eorne	r0, r7, #2555904	; 0x270000
20000c5c:	17271427 	strne	r1, [r7, -r7, lsr #8]!
20000c60:	09281927 	stmdbeq	r8!, {r0, r1, r2, r5, r8, fp, ip}
20000c64:	0b280a28 	bleq	20a0350c <keyb_state+0x9fd798>
20000c68:	0d280c28 	stceq	12, cr0, [r8, #-160]!	; 0xffffff60
20000c6c:	0f280e28 	svceq	0x00280e28
20000c70:	11281028 			; <UNDEFINED> instruction: 0x11281028
20000c74:	13281228 			; <UNDEFINED> instruction: 0x13281228
20000c78:	17281428 	strne	r1, [r8, -r8, lsr #8]!
20000c7c:	1a281928 	bne	20a07124 <keyb_state+0xa013b0>
20000c80:	14291229 	strtne	r1, [r9], #-553	; 0xfffffdd7
20000c84:	19291729 	stmdbne	r9!, {r0, r3, r5, r8, r9, sl, ip}
20000c88:	122a1a29 	eorne	r1, sl, #167936	; 0x29000
20000c8c:	172a142a 	strne	r1, [sl, -sl, lsr #8]!
20000c90:	1a2a192a 	bne	20a87140 <keyb_state+0xa813cc>
20000c94:	192b182b 	stmdbne	fp!, {r0, r1, r3, r5, fp, ip}
	...

20001544 <cat_run_geometry>:
20001544:	000000c8 	andeq	r0, r0, r8, asr #1
20001548:	0000002b 	andeq	r0, r0, fp, lsr #32
2000154c:	0000001e 	andeq	r0, r0, lr, lsl r0
20001550:	0d0b0c0b 	stceq	12, cr0, [fp, #-44]	; 0xffffffd4
20001554:	0f0b0e0b 	svceq	0x000b0e0b
20001558:	110b100b 	tstne	fp, fp
2000155c:	090c120b 	stmdbeq	ip, {r0, r1, r3, r9, ip}
20001560:	0b0c0a0c 	bleq	20303d98 <keyb_state+0x2fe024>
20001564:	140c130c 	strne	r1, [ip], #-780	; 0xfffffcf4
20001568:	070d150c 	streq	r1, [sp, -ip, lsl #10]
2000156c:	160d080d 	strne	r0, [sp], -sp, lsl #16
20001570:	180d170d 	stmdane	sp, {r0, r2, r3, r8, r9, sl, ip}
20001574:	1a0d190d 	bne	203479b0 <keyb_state+0x341c3c>
20001578:	1c0d1b0d 			; <UNDEFINED> instruction: 0x1c0d1b0d
2000157c:	060e1d0d 	streq	r1, [lr], -sp, lsl #26
20001580:	1e0e0b0e 	vmlane.f64	d0, d14, d14
20001584:	080f050f 	stmdaeq	pc, {r0, r1, r2, r3, r8, sl}	; <UNPREDICTABLE>
20001588:	0a0f090f 	beq	203c39cc <keyb_state+0x3bdc58>
2000158c:	180f0c0f 	stmdane	pc, {r0, r1, r2, r3, sl, fp}	; <UNPREDICTABLE>
20001590:	1a0f190f 	bne	203c79d4 <keyb_state+0x3c1c60>
20001594:	1c0f1b0f 			; <UNDEFINED> instruction: 0x1c0f1b0f
20001598:	04101e0f 	ldreq	r1, [r0], #-3599	; 0xfffff1f1
2000159c:	0c100710 	ldceq	7, cr0, [r0], {16}
200015a0:	1d101710 	ldcne	7, cr1, [r0, #-64]	; 0xffffffc0
200015a4:	03111e10 	tsteq	r1, #16, 28	; 0x100
200015a8:	0c110711 	ldceq	7, cr0, [r1], {17}
200015ac:	1e111611 	mrcne	6, 0, r1, cr1, cr1, {0}
200015b0:	01120012 	tsteq	r2, r2, lsl r0
200015b4:	03120c12 	tsteq	r2, #4608	; 0x1200
200015b8:	0c120512 	cfldr32eq	mvfx0, [r2], {18}
200015bc:	16121512 			; <UNDEFINED> instruction: 0x16121512
200015c0:	0c130013 	ldceq	0, cr0, [r3], {19}
200015c4:	17131613 			; <UNDEFINED> instruction: 0x17131613
200015c8:	19131813 	ldmdbne	r3, {r0, r1, r4, fp, ip}
200015cc:	03140114 	tsteq	r4, #20, 2
200015d0:	17140c14 			; <UNDEFINED> instruction: 0x17140c14
200015d4:	1b141a14 	blne	20507e2c <keyb_state+0x5020b8>
200015d8:	0c150215 	lfmeq	f0, 4, [r5], {21}
200015dc:	18151715 	ldmdane	r5, {r0, r2, r4, r8, r9, sl, ip}
200015e0:	1d151c15 	ldcne	12, cr1, [r5, #-84]	; 0xffffffac
200015e4:	18160c16 	ldmdane	r6, {r1, r2, r4, sl, fp}
200015e8:	1a161916 	bne	20587a48 <keyb_state+0x581cd4>
200015ec:	0d171e16 	ldceq	14, cr1, [r7, #-88]	; 0xffffffa8
200015f0:	1b171817 	blne	205c7654 <keyb_state+0x5c18e0>
200015f4:	1e171c17 	mrcne	12, 0, r1, cr7, cr7, {0}
200015f8:	18180e18 	ldmdane	r8, {r3, r4, r9, sl, fp}
200015fc:	1e181d18 	mrcne	13, 0, r1, cr8, cr8, {0}
20001600:	12190f19 	andsne	r0, r9, #25, 30	; 0x64
20001604:	19191419 	ldmdbne	r9, {r0, r3, r4, sl, ip}
20001608:	091a1e19 	ldmdbeq	sl, {r0, r3, r4, r9, sl, fp, ip}
2000160c:	0b1a0a1a 	bleq	20683e7c <keyb_state+0x67e108>
20001610:	0d1a0c1a 	ldceq	12, cr0, [sl, #-104]	; 0xffffff98
20001614:	0f1a0e1a 	svceq	0x001a0e1a
20001618:	111a101a 	tstne	sl, sl, lsl r0
2000161c:	131a121a 	tstne	sl, #-1610612735	; 0xa0000001
20001620:	1a1a141a 	bne	20686690 <keyb_state+0x68091c>
20001624:	121b081b 	andsne	r0, fp, #1769472	; 0x1b0000
20001628:	1a1b141b 	bne	206c669c <keyb_state+0x6c0928>
2000162c:	121c091c 	andsne	r0, ip, #28, 18	; 0x70000
20001630:	181c141c 	ldmdane	ip, {r2, r3, r4, sl, ip}
20001634:	1a1c191c 	bne	20707aac <keyb_state+0x701d38>
20001638:	151d0a1d 	ldrne	r0, [sp, #-2589]	; 0xfffff5e3
2000163c:	1b1d1a1d 	blne	20747eb8 <keyb_state+0x742144>
20001640:	131e0b1e 	tstne	lr, #30720	; 0x7800
20001644:	1c1e151e 	cfldr32ne	mvfx1, [lr], {30}
20001648:	0c1f1d1e 	ldceq	13, cr1, [pc], {30}
2000164c:	141f101f 	ldrne	r1, [pc], #-31	; 20001654 <cat_run_geometry+0x110>
20001650:	1e1f151f 	mrcne	5, 0, r1, cr15, cr15, {0}
20001654:	12200c20 	eorne	r0, r0, #32, 24	; 0x2000
20001658:	15201420 	strne	r1, [r0, #-1056]!	; 0xfffffbe0
2000165c:	1a201920 	bne	20807ae4 <keyb_state+0x801d70>
20001660:	1c201b20 			; <UNDEFINED> instruction: 0x1c201b20
20001664:	0c211e20 	stceq	14, cr1, [r1], #-128	; 0xffffff80
20001668:	13211221 			; <UNDEFINED> instruction: 0x13211221
2000166c:	1a211521 	bne	20846af8 <keyb_state+0x840d84>
20001670:	1e211d21 	cdpne	13, 2, cr1, cr1, cr1, {1}
20001674:	12220c22 	eorne	r0, r2, #8704	; 0x2200
20001678:	15221422 	strne	r1, [r2, #-1058]!	; 0xfffffbde
2000167c:	1e221922 	vmulne.f16	s2, s4, s5	; <UNPREDICTABLE>
20001680:	10230c23 	eorne	r0, r3, r3, lsr #24
20001684:	15231423 	strne	r1, [r3, #-1059]!	; 0xfffffbdd
20001688:	16231623 	strtne	r1, [r3], -r3, lsr #12
2000168c:	19231823 	stmdbne	r3!, {r0, r1, r5, fp, ip}
20001690:	0b241a24 	bleq	20907f28 <keyb_state+0x9021b4>
20001694:	15241324 	strne	r1, [r4, #-804]!	; 0xfffffcdc
20001698:	1b241824 	blne	20907730 <keyb_state+0x9019bc>
2000169c:	15250a25 	strne	r0, [r5, #-2597]!	; 0xfffff5db
200016a0:	1c251925 			; <UNDEFINED> instruction: 0x1c251925
200016a4:	12260926 	eorne	r0, r6, #622592	; 0x98000
200016a8:	15261426 	strne	r1, [r6, #-1062]!	; 0xfffffbda
200016ac:	1d261a26 	vstmdbne	r6!, {s2-s39}
200016b0:	12270827 	eorne	r0, r7, #2555904	; 0x270000
200016b4:	1b271427 	blne	209c6758 <keyb_state+0x9c09e4>
200016b8:	09281e27 	stmdbeq	r8!, {r0, r1, r2, r5, r9, sl, fp, ip}
200016bc:	0b280a28 	bleq	20a03f64 <keyb_state+0x9fe1f0>
200016c0:	0d280c28 	stceq	12, cr0, [r8, #-160]!	; 0xffffff60
200016c4:	0f280e28 	svceq	0x00280e28
200016c8:	11281028 			; <UNDEFINED> instruction: 0x11281028
200016cc:	13281228 			; <UNDEFINED> instruction: 0x13281228
200016d0:	1c281428 	cfstrsne	mvf1, [r8], #-160	; 0xffffff60
200016d4:	12291e28 	eorne	r1, r9, #40, 28	; 0x280
200016d8:	1d291429 	cfstrsne	mvf1, [r9, #-164]!	; 0xffffff5c
200016dc:	122a1e29 	eorne	r1, sl, #656	; 0x290
200016e0:	0000142a 	andeq	r1, r0, sl, lsr #8
	...

20001f78 <cat_stand_geometry>:
20001f78:	000000c8 	andeq	r0, r0, r8, asr #1
20001f7c:	0000002b 	andeq	r0, r0, fp, lsr #32
20001f80:	0000001e 	andeq	r0, r0, lr, lsl r0
20001f84:	02090109 	andeq	r0, r9, #1073741826	; 0x40000002
20001f88:	04090309 	streq	r0, [r9], #-777	; 0xfffffcf7
20001f8c:	010a0509 	tsteq	sl, r9, lsl #10
20001f90:	070a060a 	streq	r0, [sl, -sl, lsl #12]
20001f94:	190a080a 	stmdbne	sl, {r1, r3, fp}
20001f98:	1b0a1a0a 	blne	202887c8 <keyb_state+0x282a54>
20001f9c:	1d0a1c0a 	stcne	12, cr1, [sl, #-40]	; 0xffffffd8
20001fa0:	030b020b 	movweq	r0, #45579	; 0xb20b
20001fa4:	0a0b090b 	beq	202c43d8 <keyb_state+0x2be664>
20001fa8:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
20001fac:	0e0b0d0b 	cdpeq	13, 0, cr0, cr11, cr11, {0}
20001fb0:	100b0f0b 	andne	r0, fp, fp, lsl #30
20001fb4:	120b110b 	andne	r1, fp, #-1073741822	; 0xc0000002
20001fb8:	1a0b190b 	bne	202c83ec <keyb_state+0x2c2678>
20001fbc:	1c0b1b0b 			; <UNDEFINED> instruction: 0x1c0b1b0b
20001fc0:	030c1d0b 	movweq	r1, #52491	; 0xcd0b
20001fc4:	050c040c 	streq	r0, [ip, #-1036]	; 0xfffffbf4
20001fc8:	120c060c 	andne	r0, ip, #12, 12	; 0xc00000
20001fcc:	140c130c 	strne	r1, [ip], #-780	; 0xfffffcf4
20001fd0:	180c150c 	stmdane	ip, {r2, r3, r8, sl, ip}
20001fd4:	070d1e0c 	streq	r1, [sp, -ip, lsl #28]
20001fd8:	160d080d 	strne	r0, [sp], -sp, lsl #16
20001fdc:	1b0d170d 	blne	20347c18 <keyb_state+0x341ea4>
20001fe0:	1d0d1c0d 	stcne	12, cr1, [sp, #-52]	; 0xffffffcc
20001fe4:	090e1e0d 	stmdbeq	lr, {r0, r2, r3, r9, sl, fp, ip}
20001fe8:	0b0e0a0e 	bleq	20384828 <keyb_state+0x37eab4>
20001fec:	1a0e170e 	bne	20387c2c <keyb_state+0x381eb8>
20001ff0:	180f0c0f 	stmdane	pc, {r0, r1, r2, r3, sl, fp}	; <UNPREDICTABLE>
20001ff4:	0c10190f 			; <UNDEFINED> instruction: 0x0c10190f
20001ff8:	1a101910 	bne	20408440 <keyb_state+0x4026cc>
20001ffc:	1a110c11 	bne	20445048 <keyb_state+0x43f2d4>
20002000:	15120c12 	ldrne	r0, [r2, #-3090]	; 0xfffff3ee
20002004:	0c131b12 			; <UNDEFINED> instruction: 0x0c131b12
20002008:	1c131613 	ldcne	6, cr1, [r3], {19}
2000200c:	17140c14 			; <UNDEFINED> instruction: 0x17140c14
20002010:	19141814 	ldmdbne	r4, {r2, r4, fp, ip}
20002014:	0c151d14 	ldceq	13, cr1, [r5], {20}
20002018:	1a151715 	bne	20547c74 <keyb_state+0x541f00>
2000201c:	1e151b15 	vmovne.32	r1, d5[0]
20002020:	17160c16 			; <UNDEFINED> instruction: 0x17160c16
20002024:	1c161816 	ldcne	8, cr1, [r6], {22}
20002028:	0d171e16 	ldceq	14, cr1, [r7, #-88]	; 0xffffffa8
2000202c:	1d171817 	ldcne	8, cr1, [r7, #-92]	; 0xffffffa4
20002030:	0e181e17 	mrceq	14, 0, r1, cr8, cr7, {0}
20002034:	1e181818 	mrcne	8, 0, r1, cr8, cr8, {0}
20002038:	12190f19 	andsne	r0, r9, #25, 30	; 0x64
2000203c:	19191419 	ldmdbne	r9, {r0, r3, r4, sl, ip}
20002040:	0a1a091a 	beq	206844b0 <keyb_state+0x67e73c>
20002044:	0c1a0b1a 			; <UNDEFINED> instruction: 0x0c1a0b1a
20002048:	0e1a0d1a 	mrceq	13, 0, r0, cr10, cr10, {0}
2000204c:	101a0f1a 	andsne	r0, sl, sl, lsl pc
20002050:	121a111a 	andsne	r1, sl, #-2147483642	; 0x80000006
20002054:	141a131a 	ldrne	r1, [sl], #-794	; 0xfffffce6
20002058:	081b1a1a 	ldmdaeq	fp, {r1, r3, r4, r9, fp, ip}
2000205c:	141b121b 	ldrne	r1, [fp], #-539	; 0xfffffde5
20002060:	091c1a1b 	ldmdbeq	ip, {r0, r1, r3, r4, r9, fp, ip}
20002064:	141c121c 	ldrne	r1, [ip], #-540	; 0xfffffde4
20002068:	0a1d1a1c 	beq	207488e0 <keyb_state+0x742b6c>
2000206c:	1a1d151d 	bne	207474e8 <keyb_state+0x741774>
20002070:	131e0b1e 	tstne	lr, #30720	; 0x7800
20002074:	1a1e151e 	bne	207874f4 <keyb_state+0x781780>
20002078:	1d1e1c1e 	ldcne	12, cr1, [lr, #-120]	; 0xffffff88
2000207c:	0c1f1e1e 	ldceq	14, cr1, [pc], {30}
20002080:	141f101f 	ldrne	r1, [pc], #-31	; 20002088 <cat_stand_geometry+0x110>
20002084:	1a1f151f 	bne	207c7508 <keyb_state+0x7c1794>
20002088:	0c201e1f 	stceq	14, cr1, [r0], #-124	; 0xffffff84
2000208c:	14201220 	strtne	r1, [r0], #-544	; 0xfffffde0
20002090:	1c201520 	cfstr32ne	mvfx1, [r0], #-128	; 0xffffff80
20002094:	0c211d20 	stceq	13, cr1, [r1], #-128	; 0xffffff80
20002098:	13211221 			; <UNDEFINED> instruction: 0x13211221
2000209c:	1a211521 	bne	20847528 <keyb_state+0x8417b4>
200020a0:	0c221d21 	stceq	13, cr1, [r2], #-132	; 0xffffff7c
200020a4:	14221222 	strtne	r1, [r2], #-546	; 0xfffffdde
200020a8:	19221522 	stmdbne	r2!, {r1, r5, r8, sl, ip}
200020ac:	1b221a22 	blne	2088893c <keyb_state+0x882bc8>
200020b0:	0c231e22 	stceq	14, cr1, [r3], #-136	; 0xffffff78
200020b4:	14231023 	strtne	r1, [r3], #-35	; 0xffffffdd
200020b8:	16231523 	strtne	r1, [r3], -r3, lsr #10
200020bc:	18231623 	stmdane	r3!, {r0, r1, r5, r9, sl, ip}
200020c0:	1c241923 			; <UNDEFINED> instruction: 0x1c241923
200020c4:	0b241e24 	bleq	2090995c <keyb_state+0x903be8>
200020c8:	15241324 	strne	r1, [r4, #-804]!	; 0xfffffcdc
200020cc:	1e241d24 	cdpne	13, 2, cr1, cr4, cr4, {1}
200020d0:	15250a25 	strne	r0, [r5, #-2597]!	; 0xfffff5db
200020d4:	09261e25 	stmdbeq	r6!, {r0, r2, r5, r9, sl, fp, ip}
200020d8:	14261226 	strtne	r1, [r6], #-550	; 0xfffffdda
200020dc:	08271526 	stmdaeq	r7!, {r1, r2, r5, r8, sl, ip}
200020e0:	14271227 	strtne	r1, [r7], #-551	; 0xfffffdd9
200020e4:	0a280928 	beq	20a0458c <keyb_state+0x9fe818>
200020e8:	0c280b28 			; <UNDEFINED> instruction: 0x0c280b28
200020ec:	0e280d28 	cdpeq	13, 2, cr0, cr8, cr8, {1}
200020f0:	10280f28 	eorne	r0, r8, r8, lsr #30
200020f4:	12281128 	eorne	r1, r8, #40, 2
200020f8:	14281328 	strtne	r1, [r8], #-808	; 0xfffffcd8
200020fc:	14291229 	strtne	r1, [r9], #-553	; 0xfffffdd7
20002100:	142a122a 	strtne	r1, [sl], #-554	; 0xfffffdd6
	...

200029ac <cat_duck_geometry>:
200029ac:	000000bc 	strheq	r0, [r0], -ip
200029b0:	0000002b 	andeq	r0, r0, fp, lsr #32
200029b4:	00000014 	andeq	r0, r0, r4, lsl r0
200029b8:	16001200 	strne	r1, [r0], -r0, lsl #4
200029bc:	13011101 	movwne	r1, #4353	; 0x1101
200029c0:	17011501 	strne	r1, [r1, -r1, lsl #10]
200029c4:	13021102 	movwne	r1, #8450	; 0x2102
200029c8:	16021402 	strne	r1, [r2], -r2, lsl #8
200029cc:	11031702 	tstne	r3, r2, lsl #14
200029d0:	14031303 	strne	r1, [r3], #-771	; 0xfffffcfd
200029d4:	11041603 	tstne	r4, r3, lsl #12
200029d8:	14041304 	strne	r1, [r4], #-772	; 0xfffffcfc
200029dc:	11051604 	tstne	r5, r4, lsl #12
200029e0:	14051305 	strne	r1, [r5], #-773	; 0xfffffcfb
200029e4:	11061605 	tstne	r6, r5, lsl #12
200029e8:	16061406 	strne	r1, [r6], -r6, lsl #8
200029ec:	08070707 	stmdaeq	r7, {r0, r1, r2, r8, r9, sl}
200029f0:	11070907 	tstne	r7, r7, lsl #18
200029f4:	16071307 	strne	r1, [r7], -r7, lsl #6
200029f8:	0a080608 	beq	20204220 <keyb_state+0x1fe4ac>
200029fc:	13081108 	movwne	r1, #33032	; 0x8108
20002a00:	07091608 	streq	r1, [r9, -r8, lsl #12]
20002a04:	0b090809 	bleq	20244a30 <keyb_state+0x23ecbc>
20002a08:	13091109 	movwne	r1, #37129	; 0x9109
20002a0c:	090a1609 	stmdbeq	sl, {r0, r3, r9, sl, ip}
20002a10:	110a0c0a 	tstne	sl, sl, lsl #24
20002a14:	16091309 	strne	r1, [r9], -r9, lsl #6
20002a18:	0d0b0a0b 	vstreq	s0, [fp, #-44]	; 0xffffffd4
20002a1c:	110b0e0b 	tstne	fp, fp, lsl #28
20002a20:	160b120b 	strne	r1, [fp], -fp, lsl #4
20002a24:	0f0c0b0c 	svceq	0x000c0b0c
20002a28:	120c110c 	andne	r1, ip, #12, 2
20002a2c:	0c0d170c 	stceq	7, cr1, [sp], {12}
20002a30:	110d0f0d 	tstne	sp, sp, lsl #30
20002a34:	170d100d 	strne	r1, [sp, -sp]
20002a38:	170e0d0e 	strne	r0, [lr, -lr, lsl #26]
20002a3c:	170f0e0f 	strne	r0, [pc, -pc, lsl #28]
20002a40:	10100f10 	andsne	r0, r0, r0, lsl pc
20002a44:	0f111810 	svceq	0x00111810
20002a48:	0f121811 	svceq	0x00121811
20002a4c:	0f131812 	svceq	0x00131812
20002a50:	0f141813 	svceq	0x00141813
20002a54:	0f151714 	svceq	0x00151714
20002a58:	0f161715 	svceq	0x00161715
20002a5c:	0f171716 	svceq	0x00171716
20002a60:	10181717 	andsne	r1, r8, r7, lsl r7
20002a64:	10191718 	andsne	r1, r9, r8, lsl r7
20002a68:	14191219 	ldrne	r1, [r9], #-537	; 0xfffffde7
20002a6c:	091a1719 	ldmdbeq	sl, {r0, r3, r4, r8, r9, sl, ip}
20002a70:	0b1a0a1a 	bleq	206852e0 <keyb_state+0x67f56c>
20002a74:	0d1a0c1a 	ldceq	12, cr0, [sl, #-104]	; 0xffffff98
20002a78:	0f1a0e1a 	svceq	0x001a0e1a
20002a7c:	111a101a 	tstne	sl, sl, lsl r0
20002a80:	131a121a 	tstne	sl, #-1610612735	; 0xa0000001
20002a84:	171a141a 			; <UNDEFINED> instruction: 0x171a141a
20002a88:	121b081b 	andsne	r0, fp, #1769472	; 0x1b0000
20002a8c:	171b141b 			; <UNDEFINED> instruction: 0x171b141b
20002a90:	121c091c 	andsne	r0, ip, #28, 18	; 0x70000
20002a94:	171c141c 			; <UNDEFINED> instruction: 0x171c141c
20002a98:	0a1d181c 	beq	20748b10 <keyb_state+0x742d9c>
20002a9c:	181d151d 	ldmdane	sp, {r0, r2, r3, r4, r8, sl, ip}
20002aa0:	131e0b1e 	tstne	lr, #30720	; 0x7800
20002aa4:	181e151e 	ldmdane	lr, {r1, r2, r3, r4, r8, sl, ip}
20002aa8:	101f0c1f 	andsne	r0, pc, pc, lsl ip	; <UNPREDICTABLE>
20002aac:	151f141f 	ldrne	r1, [pc, #-1055]	; 20002695 <cat_stand_geometry+0x71d>
20002ab0:	0c20181f 	stceq	8, cr1, [r0], #-124	; 0xffffff84
20002ab4:	14201220 	strtne	r1, [r0], #-544	; 0xfffffde0
20002ab8:	19201520 	stmdbne	r0!, {r5, r8, sl, ip}
20002abc:	12210c21 	eorne	r0, r1, #8448	; 0x2100
20002ac0:	15211321 	strne	r1, [r1, #-801]!	; 0xfffffcdf
20002ac4:	0c221921 			; <UNDEFINED> instruction: 0x0c221921
20002ac8:	14221222 	strtne	r1, [r2], #-546	; 0xfffffdde
20002acc:	19221522 	stmdbne	r2!, {r1, r5, r8, sl, ip}
20002ad0:	10230c23 	eorne	r0, r3, r3, lsr #24
20002ad4:	15231423 	strne	r1, [r3, #-1059]!	; 0xfffffbdd
20002ad8:	0b241923 	bleq	20908f6c <keyb_state+0x9031f8>
20002adc:	15241324 	strne	r1, [r4, #-804]!	; 0xfffffcdc
20002ae0:	0a251924 	beq	20948f78 <keyb_state+0x943204>
20002ae4:	16251525 	strtne	r1, [r5], -r5, lsr #10
20002ae8:	09261925 	stmdbeq	r6!, {r0, r2, r5, r8, fp, ip}
20002aec:	14261226 	strtne	r1, [r6], #-550	; 0xfffffdda
20002af0:	19261626 	stmdbne	r6!, {r1, r2, r5, r9, sl, ip}
20002af4:	12270827 	eorne	r0, r7, #2555904	; 0x270000
20002af8:	17271427 	strne	r1, [r7, -r7, lsr #8]!
20002afc:	09281927 	stmdbeq	r8!, {r0, r1, r2, r5, r8, fp, ip}
20002b00:	0b280a28 	bleq	20a053a8 <keyb_state+0x9ff634>
20002b04:	0d280c28 	stceq	12, cr0, [r8, #-160]!	; 0xffffff60
20002b08:	0f280e28 	svceq	0x00280e28
20002b0c:	11281028 			; <UNDEFINED> instruction: 0x11281028
20002b10:	13281228 			; <UNDEFINED> instruction: 0x13281228
20002b14:	17281428 	strne	r1, [r8, -r8, lsr #8]!
20002b18:	1a281928 	bne	20a08fc0 <keyb_state+0xa0324c>
20002b1c:	14291229 	strtne	r1, [r9], #-553	; 0xfffffdd7
20002b20:	19291729 	stmdbne	r9!, {r0, r3, r5, r8, r9, sl, ip}
20002b24:	122a1a29 	eorne	r1, sl, #167936	; 0x29000
20002b28:	172a142a 	strne	r1, [sl, -sl, lsr #8]!
20002b2c:	1a2a192a 	bne	20a88fdc <keyb_state+0xa83268>
20002b30:	192b182b 	stmdbne	fp!, {r0, r1, r3, r5, fp, ip}
	...

200033e0 <mouse_stand_geometry>:
200033e0:	00000035 	andeq	r0, r0, r5, lsr r0
200033e4:	00000018 	andeq	r0, r0, r8, lsl r0
200033e8:	0000000a 	andeq	r0, r0, sl
200033ec:	09000500 	stmdbeq	r0, {r8, sl}
200033f0:	08010601 	stmdaeq	r1, {r0, r9, sl}
200033f4:	06030702 	streq	r0, [r3], -r2, lsl #14
200033f8:	05040803 	streq	r0, [r4, #-2051]	; 0xfffff7fd
200033fc:	04050804 	streq	r0, [r5], #-2052	; 0xfffff7fc
20003400:	04060805 	streq	r0, [r6], #-2053	; 0xfffff7fb
20003404:	08060606 	stmdaeq	r6, {r1, r2, r9, sl}
20003408:	08070307 	stmdaeq	r7, {r0, r1, r2, r8, r9}
2000340c:	01080907 	tsteq	r8, r7, lsl #18
20003410:	09080208 	stmdbeq	r8, {r3, r9}
20003414:	08094609 	stmdaeq	r9, {r0, r3, r9, sl, lr}
20003418:	040a000a 	streq	r0, [sl], #-10
2000341c:	000b080a 	andeq	r0, fp, sl, lsl #16
20003420:	080b030b 	stmdaeq	fp, {r0, r1, r3, r8, r9}
20003424:	020c010c 	andeq	r0, ip, #12, 2
20003428:	080c030c 	stmdaeq	ip, {r2, r3, r8, r9}
2000342c:	080d030d 	stmdaeq	sp, {r0, r2, r3, r8, r9}
20003430:	030e090d 	movweq	r0, #59661	; 0xe90d
20003434:	030f090e 	movweq	r0, #63758	; 0xf90e
20003438:	0a0f090f 	beq	203c587c <keyb_state+0x3bfb08>
2000343c:	08100410 	ldmdaeq	r0, {r4, sl}
20003440:	06110511 			; <UNDEFINED> instruction: 0x06110511
20003444:	08110711 	ldmdaeq	r1, {r0, r4, r8, r9, sl}
20003448:	07130712 			; <UNDEFINED> instruction: 0x07130712
2000344c:	05150614 	ldreq	r0, [r5, #-1556]	; 0xfffff9ec
20003450:	03160415 	tsteq	r6, #352321536	; 0x15000000
20003454:	00000317 	andeq	r0, r0, r7, lsl r3
	...

20003e14 <mouse_run_geometry>:
20003e14:	00000035 	andeq	r0, r0, r5, lsr r0
20003e18:	00000018 	andeq	r0, r0, r8, lsl r0
20003e1c:	0000000a 	andeq	r0, r0, sl
20003e20:	09000500 	stmdbeq	r0, {r8, sl}
20003e24:	08010601 	stmdaeq	r1, {r0, r9, sl}
20003e28:	06030702 	streq	r0, [r3], -r2, lsl #14
20003e2c:	05040803 	streq	r0, [r4, #-2051]	; 0xfffff7fd
20003e30:	04050804 	streq	r0, [r5], #-2052	; 0xfffff7fc
20003e34:	04060805 	streq	r0, [r6], #-2053	; 0xfffff7fb
20003e38:	08060606 	stmdaeq	r6, {r1, r2, r9, sl}
20003e3c:	08070307 	stmdaeq	r7, {r0, r1, r2, r8, r9}
20003e40:	02080108 	andeq	r0, r8, #8, 2
20003e44:	46090908 	strmi	r0, [r9], -r8, lsl #18
20003e48:	09090809 	stmdbeq	r9, {r0, r3, fp}
20003e4c:	040a000a 	streq	r0, [sl], #-10
20003e50:	000b080a 	andeq	r0, fp, sl, lsl #16
20003e54:	080b030b 	stmdaeq	fp, {r0, r1, r3, r8, r9}
20003e58:	020c010c 	andeq	r0, ip, #12, 2
20003e5c:	080c030c 	stmdaeq	ip, {r2, r3, r8, r9}
20003e60:	080d030d 	stmdaeq	sp, {r0, r2, r3, r8, r9}
20003e64:	090e030e 	stmdbeq	lr, {r1, r2, r3, r8, r9}
20003e68:	090f030f 	stmdbeq	pc, {r0, r1, r2, r3, r8, r9}	; <UNPREDICTABLE>
20003e6c:	04100a0f 	ldreq	r0, [r0], #-2575	; 0xfffff5f1
20003e70:	09100810 	ldmdbeq	r0, {r4, fp}
20003e74:	06110511 			; <UNDEFINED> instruction: 0x06110511
20003e78:	08110711 	ldmdaeq	r1, {r0, r4, r8, r9, sl}
20003e7c:	07130712 			; <UNDEFINED> instruction: 0x07130712
20003e80:	05150614 	ldreq	r0, [r5, #-1556]	; 0xfffff9ec
20003e84:	03160415 	tsteq	r6, #352321536	; 0x15000000
20003e88:	00000317 	andeq	r0, r0, r7, lsl r3
	...

20004848 <bird_run_geometry>:
20004848:	00000035 	andeq	r0, r0, r5, lsr r0
2000484c:	00000012 	andeq	r0, r0, r2, lsl r0
20004850:	0000000f 	andeq	r0, r0, pc
20004854:	07010800 	streq	r0, [r1, -r0, lsl #16]
20004858:	06020801 	streq	r0, [r2], -r1, lsl #16
2000485c:	05030902 	streq	r0, [r3, #-2306]	; 0xfffff6fe
20004860:	09030703 	stmdbeq	r3, {r0, r1, r8, r9, sl}
20004864:	09040504 	stmdbeq	r4, {r2, r8, sl}
20004868:	09050505 	stmdbeq	r5, {r0, r2, r8, sl}
2000486c:	09060606 	stmdbeq	r6, {r1, r2, r9, sl}
20004870:	0a070607 	beq	201c6094 <keyb_state+0x1c0320>
20004874:	0a080508 	beq	20205c9c <keyb_state+0x1fff28>
20004878:	05090409 	streq	r0, [r9, #-1033]	; 0xfffffbf7
2000487c:	030a0b09 	movweq	r0, #43785	; 0xab09
20004880:	0c0a050a 	cfstr32eq	mvfx0, [sl], {10}
20004884:	050b020b 	streq	r0, [fp, #-523]	; 0xfffffdf5
20004888:	010c0d0b 	tsteq	ip, fp, lsl #26
2000488c:	0e0c050c 	cfsh32eq	mvfx0, mvfx12, #12
20004890:	000d080c 	andeq	r0, sp, ip, lsl #16
20004894:	020d010d 	andeq	r0, sp, #1073741827	; 0x40000003
20004898:	040d030d 	streq	r0, [sp], #-781	; 0xfffffcf3
2000489c:	090d050d 	stmdbeq	sp, {r0, r2, r3, r8, sl}
200048a0:	0b0d0a0d 	bleq	203470dc <keyb_state+0x341368>
200048a4:	0d0d0c0d 	stceq	12, cr0, [sp, #-52]	; 0xffffffcc
200048a8:	040e0e0d 	streq	r0, [lr], #-3597	; 0xfffff1f3
200048ac:	040f090e 	streq	r0, [pc], #-2318	; 200048b4 <bird_run_geometry+0x6c>
200048b0:	0310090f 	tsteq	r0, #245760	; 0x3c000
200048b4:	03110810 	tsteq	r1, #16, 16	; 0x100000
200048b8:	05110411 	ldreq	r0, [r1, #-1041]	; 0xfffffbef
200048bc:	00000611 	andeq	r0, r0, r1, lsl r6
	...

2000527c <bird_stand_geometry>:
2000527c:	00000035 	andeq	r0, r0, r5, lsr r0
20005280:	00000012 	andeq	r0, r0, r2, lsl r0
20005284:	0000000f 	andeq	r0, r0, pc
20005288:	07010800 	streq	r0, [r1, -r0, lsl #16]
2000528c:	06020801 	streq	r0, [r2], -r1, lsl #16
20005290:	05030902 	streq	r0, [r3, #-2306]	; 0xfffff6fe
20005294:	09030703 	stmdbeq	r3, {r0, r1, r8, r9, sl}
20005298:	09040504 	stmdbeq	r4, {r2, r8, sl}
2000529c:	09050505 	stmdbeq	r5, {r0, r2, r8, sl}
200052a0:	09060606 	stmdbeq	r6, {r1, r2, r9, sl}
200052a4:	06070407 	streq	r0, [r7], -r7, lsl #8
200052a8:	06070a07 	streq	r0, [r7], -r7, lsl #20
200052ac:	05080308 	streq	r0, [r8, #-776]	; 0xfffffcf8
200052b0:	02090a08 	andeq	r0, r9, #8, 20	; 0x8000
200052b4:	0a090409 	beq	202462e0 <keyb_state+0x24056c>
200052b8:	0a0a030a 	beq	20285ee8 <keyb_state+0x280174>
200052bc:	0a0b020b 	beq	202c5af0 <keyb_state+0x2bfd7c>
200052c0:	060c010c 	streq	r0, [ip], -ip, lsl #2
200052c4:	0a0c070c 	beq	20306efc <keyb_state+0x301188>
200052c8:	030d020d 	movweq	r0, #53773	; 0xd20d
200052cc:	050d040d 	streq	r0, [sp, #-1037]	; 0xfffffbf3
200052d0:	040e090d 	streq	r0, [lr], #-2317	; 0xfffff6f3
200052d4:	040f090e 	streq	r0, [pc], #-2318	; 200052dc <bird_stand_geometry+0x60>
200052d8:	0310080f 	tsteq	r0, #983040	; 0xf0000
200052dc:	03110710 	tsteq	r1, #16, 14	; 0x400000
200052e0:	05110411 	ldreq	r0, [r1, #-1041]	; 0xfffffbef
200052e4:	00000611 	andeq	r0, r0, r1, lsl r6
	...

20005cb0 <cat>:
20005cb0:	20001f78 	andcs	r1, r0, r8, ror pc
20005cb4:	20001544 	andcs	r1, r0, r4, asr #10
20005cb8:	20000b10 	andcs	r0, r0, r0, lsl fp
20005cbc:	200029ac 	andcs	r2, r0, ip, lsr #19
	...
20005ccc:	00000005 	andeq	r0, r0, r5
20005cd0:	0000001e 	andeq	r0, r0, lr, lsl r0
20005cd4:	200005bd 			; <UNDEFINED> instruction: 0x200005bd
20005cd8:	2000072b 	andcs	r0, r0, fp, lsr #14
20005cdc:	20000899 	mulcs	r0, r9, r8
20005ce0:	200009ab 	andcs	r0, r0, fp, lsr #19

20005ce4 <mouse>:
20005ce4:	200033e0 	andcs	r3, r0, r0, ror #7
20005ce8:	20003e14 	andcs	r3, r0, r4, lsl lr
20005cec:	20000b10 	andcs	r0, r0, r0, lsl fp
20005cf0:	200029ac 	andcs	r2, r0, ip, lsr #19
20005cf4:	00000000 	andeq	r0, r0, r0
20005cf8:	fffffffd 			; <UNDEFINED> instruction: 0xfffffffd
20005cfc:	00000000 	andeq	r0, r0, r0
20005d00:	00000081 	andeq	r0, r0, r1, lsl #1
20005d04:	00000032 	andeq	r0, r0, r2, lsr r0
20005d08:	200005bd 			; <UNDEFINED> instruction: 0x200005bd
20005d0c:	2000072b 	andcs	r0, r0, fp, lsr #14
20005d10:	200008d5 	ldrdcs	r0, [r0], -r5
20005d14:	200009ab 	andcs	r0, r0, fp, lsr #19

20005d18 <bird>:
20005d18:	2000527c 	andcs	r5, r0, ip, ror r2
20005d1c:	20004848 	andcs	r4, r0, r8, asr #16
20005d20:	20000b10 	andcs	r0, r0, r0, lsl fp
20005d24:	200029ac 	andcs	r2, r0, ip, lsr #19
20005d28:	00000000 	andeq	r0, r0, r0
20005d2c:	fffffffd 			; <UNDEFINED> instruction: 0xfffffffd
20005d30:	00000000 	andeq	r0, r0, r0
20005d34:	00000081 	andeq	r0, r0, r1, lsl #1
20005d38:	0000000a 	andeq	r0, r0, sl
20005d3c:	200005bd 			; <UNDEFINED> instruction: 0x200005bd
20005d40:	2000072b 	andcs	r0, r0, fp, lsr #14
20005d44:	200008d5 	ldrdcs	r0, [r0], -r5
20005d48:	200009ab 	andcs	r0, r0, fp, lsr #19
20005d4c:	20000052 	andcs	r0, r0, r2, asr r0
20005d50:	2000002a 	andcs	r0, r0, sl, lsr #32
20005d54:	20000032 	andcs	r0, r0, r2, lsr r0
20005d58:	2000003a 	andcs	r0, r0, sl, lsr r0
20005d5c:	20000042 	andcs	r0, r0, r2, asr #32
20005d60:	2000004a 	andcs	r0, r0, sl, asr #32
20005d64:	0a030201 	beq	200c6570 <keyb_state+0xc07fc>
20005d68:	0b060504 	bleq	20187180 <keyb_state+0x18140c>
20005d6c:	0c090807 	stceq	8, cr0, [r9], {7}
20005d70:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20005d40 <bird+0x28>

20005d74 <keyb_state>:
20005d74:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	000002c7 	andeq	r0, r0, r7, asr #5
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	0000010e 	andeq	r0, r0, lr, lsl #2
  10:	0000b30c 	andeq	fp, r0, ip, lsl #6
  14:	00001500 	andeq	r1, r0, r0, lsl #10
  18:	00000000 	andeq	r0, r0, r0
  1c:	08010200 	stmdaeq	r1, {r9}
  20:	0000005b 	andeq	r0, r0, fp, asr r0
  24:	00005503 	andeq	r5, r0, r3, lsl #10
  28:	04010200 	streq	r0, [r1], #-512	; 0xfffffe00
  2c:	00004810 	andeq	r4, r0, r0, lsl r8
  30:	00780400 	rsbseq	r0, r8, r0, lsl #8
  34:	48070501 	stmdami	r7, {r0, r8, sl}
  38:	00000000 	andeq	r0, r0, r0
  3c:	01007904 	tsteq	r0, r4, lsl #18
  40:	00480905 	subeq	r0, r8, r5, lsl #18
  44:	00010000 	andeq	r0, r1, r0
  48:	64080102 	strvs	r0, [r8], #-258	; 0xfffffefe
  4c:	05000000 	streq	r0, [r0, #-0]
  50:	00000055 	andeq	r0, r0, r5, asr r0
  54:	24030601 	strcs	r0, [r3], #-1537	; 0xfffff9ff
  58:	06000000 	streq	r0, [r0], -r0
  5c:	00000001 	andeq	r0, r0, r1
  60:	08010a34 	stmdaeq	r1, {r2, r4, r5, r9, fp}
  64:	00009d10 	andeq	r9, r0, r0, lsl sp
  68:	01c10700 	biceq	r0, r1, r0, lsl #14
  6c:	0a010000 	beq	40074 <startup-0x1ffbff8c>
  70:	00009d06 	andeq	r9, r0, r6, lsl #26
  74:	02070000 	andeq	r0, r7, #0
  78:	01000001 	tsteq	r0, r1
  7c:	009d060b 	addseq	r0, sp, fp, lsl #12
  80:	07040000 	streq	r0, [r4, -r0]
  84:	00000108 	andeq	r0, r0, r8, lsl #2
  88:	9d060c01 	stcls	12, cr0, [r6, #-4]
  8c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
  90:	00787004 	rsbseq	r7, r8, r4
  94:	a4080d01 	strge	r0, [r8], #-3329	; 0xfffff2ff
  98:	0c000000 	stceq	0, cr0, [r0], {-0}
  9c:	05040800 	streq	r0, [r4, #-2048]	; 0xfffff800
  a0:	00746e69 	rsbseq	r6, r4, r9, ror #28
  a4:	00004f09 	andeq	r4, r0, r9, lsl #30
  a8:	0000b500 	andeq	fp, r0, r0, lsl #10
  ac:	00b50a00 	adcseq	r0, r5, r0, lsl #20
  b0:	05130000 	ldreq	r0, [r3, #-0]
  b4:	07040200 	streq	r0, [r4, -r0, lsl #4]
  b8:	000000dc 	ldrdeq	r0, [r0], -ip
  bc:	00000105 	andeq	r0, r0, r5, lsl #2
  c0:	020e0100 	andeq	r0, lr, #0, 2
  c4:	0000005b 	andeq	r0, r0, fp, asr r0
  c8:	00000005 	andeq	r0, r0, r5
  cc:	0c0e0100 	stfeqs	f0, [lr], {-0}
  d0:	000000d4 	ldrdeq	r0, [r0], -r4
  d4:	005b040b 	subseq	r0, fp, fp, lsl #8
  d8:	4f0c0000 	svcmi	0x000c0000
  dc:	34006a62 	strcc	r6, [r0], #-2658	; 0xfffff59e
  e0:	91101001 	tstls	r0, r1
  e4:	07000001 	streq	r0, [r0, -r1]
  e8:	000000d2 	ldrdeq	r0, [r0], -r2
  ec:	c80c1101 	stmdagt	ip, {r0, r8, ip}
  f0:	00000000 	andeq	r0, r0, r0
  f4:	0000ca07 	andeq	ip, r0, r7, lsl #20
  f8:	0c120100 	ldfeqs	f0, [r2], {-0}
  fc:	000000c8 	andeq	r0, r0, r8, asr #1
 100:	00aa0704 	adceq	r0, sl, r4, lsl #14
 104:	13010000 	movwne	r0, #4096	; 0x1000
 108:	0000c80c 	andeq	ip, r0, ip, lsl #16
 10c:	cb070800 	blgt	1c2114 <startup-0x1fe3deec>
 110:	01000001 	tsteq	r0, r1
 114:	00c80c14 	sbceq	r0, r8, r4, lsl ip
 118:	070c0000 	streq	r0, [ip, -r0]
 11c:	0000000a 	andeq	r0, r0, sl
 120:	9d061501 	cfstr32ls	mvfx1, [r6, #-4]
 124:	10000000 	andne	r0, r0, r0
 128:	00003907 	andeq	r3, r0, r7, lsl #18
 12c:	06160100 	ldreq	r0, [r6], -r0, lsl #2
 130:	0000009d 	muleq	r0, sp, r0
 134:	003e0714 	eorseq	r0, lr, r4, lsl r7
 138:	16010000 	strne	r0, [r1], -r0
 13c:	00009d0c 	andeq	r9, r0, ip, lsl #26
 140:	78071800 	stmdavc	r7, {fp, ip}
 144:	01000000 	mrseq	r0, (UNDEF: 0)
 148:	009d0617 	addseq	r0, sp, r7, lsl r6
 14c:	071c0000 	ldreq	r0, [ip, -r0]
 150:	0000007d 	andeq	r0, r0, sp, ror r0
 154:	9d0c1701 	stcls	7, cr1, [ip, #-4]
 158:	20000000 	andcs	r0, r0, r0
 15c:	00006907 	andeq	r6, r0, r7, lsl #18
 160:	0a180100 	beq	600568 <startup-0x1f9ffa98>
 164:	000001a2 	andeq	r0, r0, r2, lsr #3
 168:	048a0724 	streq	r0, [sl], #1828	; 0x724
 16c:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
 170:	0001a20a 	andeq	sl, r1, sl, lsl #4
 174:	23072800 	movwcs	r2, #30720	; 0x7800
 178:	01000000 	mrseq	r0, (UNDEF: 0)
 17c:	01a20a1a 			; <UNDEFINED> instruction: 0x01a20a1a
 180:	072c0000 	streq	r0, [ip, -r0]!
 184:	0000006e 	andeq	r0, r0, lr, rrx
 188:	bd0a1b01 	vstrlt	d1, [sl, #-4]
 18c:	30000001 	andcc	r0, r0, r1
 190:	019c0d00 	orrseq	r0, ip, r0, lsl #26
 194:	9c0e0000 	stcls	0, cr0, [lr], {-0}
 198:	00000001 	andeq	r0, r0, r1
 19c:	00da040b 	sbcseq	r0, sl, fp, lsl #8
 1a0:	040b0000 	streq	r0, [fp], #-0
 1a4:	00000191 	muleq	r0, r1, r1
 1a8:	0001bd0d 	andeq	fp, r1, sp, lsl #26
 1ac:	019c0e00 	orrseq	r0, ip, r0, lsl #28
 1b0:	9d0e0000 	stcls	0, cr0, [lr, #-0]
 1b4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
 1b8:	0000009d 	muleq	r0, sp, r0
 1bc:	a8040b00 	stmdage	r4, {r8, r9, fp}
 1c0:	05000001 	streq	r0, [r0, #-1]
 1c4:	00000257 	andeq	r0, r0, r7, asr r2
 1c8:	da031c01 	ble	c71d4 <startup-0x1ff38e2c>
 1cc:	0f000000 	svceq	0x00000000
 1d0:	00000043 	andeq	r0, r0, r3, asr #32
 1d4:	bc111f01 	ldclt	15, cr1, [r1], {1}
 1d8:	0f000000 	svceq	0x00000000
 1dc:	00000028 	andeq	r0, r0, r8, lsr #32
 1e0:	bc112001 	ldclt	0, cr2, [r1], {1}
 1e4:	0f000000 	svceq	0x00000000
 1e8:	000001ae 	andeq	r0, r0, lr, lsr #3
 1ec:	bc112101 	ldflts	f2, [r1], {1}
 1f0:	10000000 	andne	r0, r0, r0
 1f4:	00746163 	rsbseq	r6, r4, r3, ror #2
 1f8:	c30f2301 	movwgt	r2, #62209	; 0xf301
 1fc:	0f000001 	svceq	0x00000001
 200:	000001d4 	ldrdeq	r0, [r0], -r4
 204:	c30f2401 	movwgt	r2, #62465	; 0xf401
 208:	0f000001 	svceq	0x00000001
 20c:	000000fd 	strdeq	r0, [r0], -sp
 210:	c30f2501 	movwgt	r2, #62721	; 0xf501
 214:	11000001 	tstne	r0, r1
 218:	000001cf 	andeq	r0, r0, pc, asr #3
 21c:	050b0802 	streq	r0, [fp, #-2050]	; 0xfffff7fe
 220:	000b1003 	andeq	r1, fp, r3
 224:	01db1120 	bicseq	r1, fp, r0, lsr #2
 228:	3c020000 	stccc	0, cr0, [r2], {-0}
 22c:	4403050b 	strmi	r0, [r3], #-1291	; 0xfffffaf5
 230:	11200015 			; <UNDEFINED> instruction: 0x11200015
 234:	000001e7 	andeq	r0, r0, r7, ror #3
 238:	050b6302 	streq	r6, [fp, #-770]	; 0xfffffcfe
 23c:	001f7803 	andseq	r7, pc, r3, lsl #16
 240:	019c1220 	orrseq	r1, ip, r0, lsr #4
 244:	8d020000 	stchi	0, cr0, [r2, #-0]
 248:	0000bc0b 	andeq	fp, r0, fp, lsl #24
 24c:	ac030500 	cfstr32ge	mvfx0, [r3], {-0}
 250:	12200029 	eorne	r0, r0, #41	; 0x29
 254:	00000082 	andeq	r0, r0, r2, lsl #1
 258:	bc0bc102 	stfltd	f4, [fp], {2}
 25c:	05000000 	streq	r0, [r0, #-0]
 260:	0033e003 	eorseq	lr, r3, r3
 264:	00971220 	addseq	r1, r7, r0, lsr #4
 268:	e2020000 	and	r0, r2, #0
 26c:	0000bc0b 	andeq	fp, r0, fp, lsl #24
 270:	14030500 	strne	r0, [r3], #-1280	; 0xfffffb00
 274:	1320003e 			; <UNDEFINED> instruction: 0x1320003e
 278:	0000018a 	andeq	r0, r0, sl, lsl #3
 27c:	0b010202 	bleq	40a8c <startup-0x1ffbf574>
 280:	000000bc 	strheq	r0, [r0], -ip
 284:	48480305 	stmdami	r8, {r0, r2, r8, r9}^
 288:	e9132000 	ldmdb	r3, {sp}
 28c:	02000000 	andeq	r0, r0, #0
 290:	bc0b011c 	stflts	f0, [fp], {28}
 294:	05000000 	streq	r0, [r0, #-0]
 298:	00527c03 	subseq	r7, r2, r3, lsl #24
 29c:	01f31420 	mvnseq	r1, r0, lsr #8
 2a0:	36020000 	strcc	r0, [r2], -r0
 2a4:	03050901 	movweq	r0, #22785	; 0x5901
 2a8:	20005cb0 			; <UNDEFINED> instruction: 0x20005cb0
 2ac:	0001ff14 	andeq	pc, r1, r4, lsl pc	; <UNPREDICTABLE>
 2b0:	01460200 	mrseq	r0, (UNDEF: 102)
 2b4:	e4030509 	str	r0, [r3], #-1289	; 0xfffffaf7
 2b8:	1420005c 	strtne	r0, [r0], #-92	; 0xffffffa4
 2bc:	0000020b 	andeq	r0, r0, fp, lsl #4
 2c0:	09015602 	stmdbeq	r1, {r1, r9, sl, ip, lr}
 2c4:	5d180305 	ldcpl	3, cr0, [r8, #-20]	; 0xffffffec
 2c8:	eb002000 	bl	82d0 <startup-0x1fff7d30>
 2cc:	04000000 	streq	r0, [r0], #-0
 2d0:	00011f00 	andeq	r1, r1, r0, lsl #30
 2d4:	0e010400 	cfcpyseq	mvf0, mvf1
 2d8:	0c000001 	stceq	0, cr0, [r0], {1}
 2dc:	000001f4 	strdeq	r0, [r0], -r4
 2e0:	00000015 	andeq	r0, r0, r5, lsl r0
 2e4:	20000010 	andcs	r0, r0, r0, lsl r0
 2e8:	00000158 	andeq	r0, r0, r8, asr r1
 2ec:	00000043 	andeq	r0, r0, r3, asr #32
 2f0:	5b080102 	blpl	200700 <startup-0x1fdff900>
 2f4:	03000000 	movweq	r0, #0
 2f8:	0000021d 	andeq	r0, r0, sp, lsl r2
 2fc:	3e050401 	cdpcc	4, 0, cr0, cr5, cr1, {0}
 300:	05000000 	streq	r0, [r0, #-0]
 304:	005d7403 	subseq	r7, sp, r3, lsl #8
 308:	05040420 	streq	r0, [r4, #-1056]	; 0xfffffbe0
 30c:	00746e69 	rsbseq	r6, r4, r9, ror #28
 310:	0001e605 	andeq	lr, r1, r5, lsl #12
 314:	0f1e0100 	svceq	0x001e0100
 318:	00000025 	andeq	r0, r0, r5, lsr #32
 31c:	200000c0 	andcs	r0, r0, r0, asr #1
 320:	000000a8 	andeq	r0, r0, r8, lsr #1
 324:	008d9c01 	addeq	r9, sp, r1, lsl #24
 328:	6b060000 	blvs	180330 <startup-0x1fe7fcd0>
 32c:	01007965 	tsteq	r0, r5, ror #18
 330:	008d1120 	addeq	r1, sp, r0, lsr #2
 334:	91020000 	mrsls	r0, (UNDEF: 2)
 338:	6f720658 	svcvs	0x00720658
 33c:	21010077 	tstcs	r1, r7, ror r0
 340:	00003e07 	andeq	r3, r0, r7, lsl #28
 344:	6c910200 	lfmvs	f0, 4, [r1], {0}
 348:	6c6f6306 	stclvs	3, cr6, [pc], #-24	; 338 <startup-0x1ffffcc8>
 34c:	0c210100 	stfeqs	f0, [r1], #-0
 350:	0000003e 	andeq	r0, r0, lr, lsr r0
 354:	00689102 	rsbeq	r9, r8, r2, lsl #2
 358:	00002507 	andeq	r2, r0, r7, lsl #10
 35c:	00009d00 	andeq	r9, r0, r0, lsl #26
 360:	009d0800 	addseq	r0, sp, r0, lsl #16
 364:	000f0000 	andeq	r0, pc, r0
 368:	dc070402 	cfstrsle	mvf0, [r7], {2}
 36c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 370:	00000212 	andeq	r0, r0, r2, lsl r2
 374:	3e051301 	cdpcc	3, 0, cr1, cr5, cr1, {0}
 378:	6c000000 	stcvs	0, cr0, [r0], {-0}
 37c:	54200000 	strtpl	r0, [r0], #-0
 380:	01000000 	mrseq	r0, (UNDEF: 0)
 384:	0000cc9c 	muleq	r0, ip, ip
 388:	00630600 	rsbeq	r0, r3, r0, lsl #12
 38c:	250f1501 	strcs	r1, [pc, #-1281]	; fffffe93 <keyb_state+0xdfffa11f>
 390:	02000000 	andeq	r0, r0, #0
 394:	0a007791 	beq	1e1e0 <startup-0x1ffe1e20>
 398:	000001da 	ldrdeq	r0, [r0], -sl
 39c:	10060601 	andne	r0, r6, r1, lsl #12
 3a0:	5c200000 	stcpl	0, cr0, [r0], #-0
 3a4:	01000000 	mrseq	r0, (UNDEF: 0)
 3a8:	6f720b9c 	svcvs	0x00720b9c
 3ac:	06010077 			; <UNDEFINED> instruction: 0x06010077
 3b0:	00009d20 	andeq	r9, r0, r0, lsr #26
 3b4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 3b8:	028a0000 	addeq	r0, sl, #0
 3bc:	00040000 	andeq	r0, r4, r0
 3c0:	000001e6 	andeq	r0, r0, r6, ror #3
 3c4:	010e0104 	tsteq	lr, r4, lsl #2
 3c8:	280c0000 	stmdacs	ip, {}	; <UNPREDICTABLE>
 3cc:	15000002 	strne	r0, [r0, #-2]
	...
 3d8:	6f000000 	svcvs	0x00000000
 3dc:	02000001 	andeq	r0, r0, #1
 3e0:	005b0801 	subseq	r0, fp, r1, lsl #16
 3e4:	55030000 	strpl	r0, [r3, #-0]
 3e8:	02000000 	andeq	r0, r0, #0
 3ec:	50100402 	andspl	r0, r0, r2, lsl #8
 3f0:	04000000 	streq	r0, [r0], #-0
 3f4:	05020078 	streq	r0, [r2, #-120]	; 0xffffff88
 3f8:	00005007 	andeq	r5, r0, r7
 3fc:	79040000 	stmdbvc	r4, {}	; <UNPREDICTABLE>
 400:	09050200 	stmdbeq	r5, {r9}
 404:	00000050 	andeq	r0, r0, r0, asr r0
 408:	01020001 	tsteq	r2, r1
 40c:	00006408 	andeq	r6, r0, r8, lsl #8
 410:	00550500 	subseq	r0, r5, r0, lsl #10
 414:	06020000 	streq	r0, [r2], -r0
 418:	00002c03 	andeq	r2, r0, r3, lsl #24
 41c:	00010600 	andeq	r0, r1, r0, lsl #12
 420:	0a340000 	beq	d00428 <startup-0x1f2ffbd8>
 424:	a5100802 	ldrge	r0, [r0, #-2050]	; 0xfffff7fe
 428:	07000000 	streq	r0, [r0, -r0]
 42c:	000001c1 	andeq	r0, r0, r1, asr #3
 430:	a5060a02 	strge	r0, [r6, #-2562]	; 0xfffff5fe
 434:	00000000 	andeq	r0, r0, r0
 438:	00010207 	andeq	r0, r1, r7, lsl #4
 43c:	060b0200 	streq	r0, [fp], -r0, lsl #4
 440:	000000a5 	andeq	r0, r0, r5, lsr #1
 444:	01080704 	tsteq	r8, r4, lsl #14
 448:	0c020000 	stceq	0, cr0, [r2], {-0}
 44c:	0000a506 	andeq	sl, r0, r6, lsl #10
 450:	70040800 	andvc	r0, r4, r0, lsl #16
 454:	0d020078 	stceq	0, cr0, [r2, #-480]	; 0xfffffe20
 458:	0000ac08 	andeq	sl, r0, r8, lsl #24
 45c:	08000c00 	stmdaeq	r0, {sl, fp}
 460:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 464:	57090074 	smlsdxpl	r9, r4, r0, r0
 468:	bd000000 	stclt	0, cr0, [r0, #-0]
 46c:	0a000000 	beq	474 <startup-0x1ffffb8c>
 470:	000000bd 	strheq	r0, [r0], -sp
 474:	02000513 	andeq	r0, r0, #79691776	; 0x4c00000
 478:	00dc0704 	sbcseq	r0, ip, r4, lsl #14
 47c:	01050000 	mrseq	r0, (UNDEF: 5)
 480:	02000000 	andeq	r0, r0, #0
 484:	0063020e 	rsbeq	r0, r3, lr, lsl #4
 488:	00050000 	andeq	r0, r5, r0
 48c:	02000000 	andeq	r0, r0, #0
 490:	00dc0c0e 	sbcseq	r0, ip, lr, lsl #24
 494:	040b0000 	streq	r0, [fp], #-0
 498:	00000063 	andeq	r0, r0, r3, rrx
 49c:	6a624f0c 	bvs	18940d4 <startup-0x1e76bf2c>
 4a0:	10023400 	andne	r3, r2, r0, lsl #8
 4a4:	00019910 	andeq	r9, r1, r0, lsl r9
 4a8:	00d20700 	sbcseq	r0, r2, r0, lsl #14
 4ac:	11020000 	mrsne	r0, (UNDEF: 2)
 4b0:	0000d00c 	andeq	sp, r0, ip
 4b4:	ca070000 	bgt	1c04bc <startup-0x1fe3fb44>
 4b8:	02000000 	andeq	r0, r0, #0
 4bc:	00d00c12 	sbcseq	r0, r0, r2, lsl ip
 4c0:	07040000 	streq	r0, [r4, -r0]
 4c4:	000000aa 	andeq	r0, r0, sl, lsr #1
 4c8:	d00c1302 	andle	r1, ip, r2, lsl #6
 4cc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 4d0:	0001cb07 	andeq	ip, r1, r7, lsl #22
 4d4:	0c140200 	lfmeq	f0, 4, [r4], {-0}
 4d8:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 4dc:	000a070c 	andeq	r0, sl, ip, lsl #14
 4e0:	15020000 	strne	r0, [r2, #-0]
 4e4:	0000a506 	andeq	sl, r0, r6, lsl #10
 4e8:	39071000 	stmdbcc	r7, {ip}
 4ec:	02000000 	andeq	r0, r0, #0
 4f0:	00a50616 	adceq	r0, r5, r6, lsl r6
 4f4:	07140000 	ldreq	r0, [r4, -r0]
 4f8:	0000003e 	andeq	r0, r0, lr, lsr r0
 4fc:	a50c1602 	strge	r1, [ip, #-1538]	; 0xfffff9fe
 500:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
 504:	00007807 	andeq	r7, r0, r7, lsl #16
 508:	06170200 	ldreq	r0, [r7], -r0, lsl #4
 50c:	000000a5 	andeq	r0, r0, r5, lsr #1
 510:	007d071c 	rsbseq	r0, sp, ip, lsl r7
 514:	17020000 	strne	r0, [r2, -r0]
 518:	0000a50c 	andeq	sl, r0, ip, lsl #10
 51c:	69072000 	stmdbvs	r7, {sp}
 520:	02000000 	andeq	r0, r0, #0
 524:	01aa0a18 			; <UNDEFINED> instruction: 0x01aa0a18
 528:	07240000 	streq	r0, [r4, -r0]!
 52c:	0000048a 	andeq	r0, r0, sl, lsl #9
 530:	aa0a1902 	bge	286940 <startup-0x1fd796c0>
 534:	28000001 	stmdacs	r0, {r0}
 538:	00002307 	andeq	r2, r0, r7, lsl #6
 53c:	0a1a0200 	beq	680d44 <startup-0x1f97f2bc>
 540:	000001aa 	andeq	r0, r0, sl, lsr #3
 544:	006e072c 	rsbeq	r0, lr, ip, lsr #14
 548:	1b020000 	blne	80550 <startup-0x1ff7fab0>
 54c:	0001c50a 	andeq	ip, r1, sl, lsl #10
 550:	0d003000 	stceq	0, cr3, [r0, #-0]
 554:	000001a4 	andeq	r0, r0, r4, lsr #3
 558:	0001a40e 	andeq	sl, r1, lr, lsl #8
 55c:	040b0000 	streq	r0, [fp], #-0
 560:	000000e2 	andeq	r0, r0, r2, ror #1
 564:	0199040b 	orrseq	r0, r9, fp, lsl #8
 568:	c50d0000 	strgt	r0, [sp, #-0]
 56c:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
 570:	000001a4 	andeq	r0, r0, r4, lsr #3
 574:	0000a50e 	andeq	sl, r0, lr, lsl #10
 578:	00a50e00 	adceq	r0, r5, r0, lsl #28
 57c:	0b000000 	bleq	584 <startup-0x1ffffa7c>
 580:	0001b004 	andeq	fp, r1, r4
 584:	02570500 	subseq	r0, r7, #0, 10
 588:	1c020000 	stcne	0, cr0, [r2], {-0}
 58c:	0000e203 	andeq	lr, r0, r3, lsl #4
 590:	02560500 	subseq	r0, r6, #0, 10
 594:	1c020000 	stcne	0, cr0, [r2], {-0}
 598:	0001a40c 	andeq	sl, r1, ip, lsl #8
 59c:	00430f00 	subeq	r0, r3, r0, lsl #30
 5a0:	1f020000 	svcne	0x00020000
 5a4:	0000c411 	andeq	ip, r0, r1, lsl r4
 5a8:	00280f00 	eoreq	r0, r8, r0, lsl #30
 5ac:	20020000 	andcs	r0, r2, r0
 5b0:	0000c411 	andeq	ip, r0, r1, lsl r4
 5b4:	01ae0f00 			; <UNDEFINED> instruction: 0x01ae0f00
 5b8:	21020000 	mrscs	r0, (UNDEF: 2)
 5bc:	0000c411 	andeq	ip, r0, r1, lsl r4
 5c0:	61631000 	cmnvs	r3, r0
 5c4:	23020074 	movwcs	r0, #8308	; 0x2074
 5c8:	0001cb0f 	andeq	ip, r1, pc, lsl #22
 5cc:	01d40f00 	bicseq	r0, r4, r0, lsl #30
 5d0:	24020000 	strcs	r0, [r2], #-0
 5d4:	0001cb0f 	andeq	ip, r1, pc, lsl #22
 5d8:	00fd0f00 	rscseq	r0, sp, r0, lsl #30
 5dc:	25020000 	strcs	r0, [r2, #-0]
 5e0:	0001cb0f 	andeq	ip, r1, pc, lsl #22
 5e4:	02491100 	subeq	r1, r9, #0, 2
 5e8:	24010000 	strcs	r0, [r1], #-0
 5ec:	0001b806 	andeq	fp, r1, r6, lsl #16
 5f0:	00005020 	andeq	r5, r0, r0, lsr #32
 5f4:	699c0100 	ldmibvs	ip, {r8}
 5f8:	12000002 	andne	r0, r0, #2
 5fc:	2701006d 	strcs	r0, [r1, -sp, rrx]
 600:	0001d70a 	andeq	sp, r1, sl, lsl #14
 604:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 608:	01006b12 	tsteq	r0, r2, lsl fp
 60c:	01d70a28 	bicseq	r0, r7, r8, lsr #20
 610:	91020000 	mrsls	r0, (UNDEF: 2)
 614:	00621270 	rsbeq	r1, r2, r0, ror r2
 618:	d70a2901 	strle	r2, [sl, -r1, lsl #18]
 61c:	02000001 	andeq	r0, r0, #1
 620:	13006c91 	movwne	r6, #3217	; 0xc91
 624:	00000240 	andeq	r0, r0, r0, asr #4
 628:	68061c01 	stmdavs	r6, {r0, sl, fp, ip}
 62c:	50200001 	eorpl	r0, r0, r1
 630:	01000000 	mrseq	r0, (UNDEF: 0)
 634:	024e139c 	subeq	r1, lr, #156, 6	; 0x70000002
 638:	06010000 	streq	r0, [r1], -r0
 63c:	00000006 	andeq	r0, r0, r6
 640:	00000c20 	andeq	r0, r0, r0, lsr #24
 644:	009c0100 	addseq	r0, ip, r0, lsl #2
 648:	00000255 	andeq	r0, r0, r5, asr r2
 64c:	030c0004 	movweq	r0, #49156	; 0xc004
 650:	01040000 	mrseq	r0, (UNDEF: 4)
 654:	0000010e 	andeq	r0, r0, lr, lsl #2
 658:	0002b30c 	andeq	fp, r2, ip, lsl #6
 65c:	00001500 	andeq	r1, r0, r0, lsl #10
 660:	00020800 	andeq	r0, r2, r0, lsl #16
 664:	00039a20 	andeq	r9, r3, r0, lsr #20
 668:	00022700 	andeq	r2, r2, r0, lsl #14
 66c:	08010200 	stmdaeq	r1, {r9}
 670:	0000005b 	andeq	r0, r0, fp, asr r0
 674:	00026a03 	andeq	r6, r2, r3, lsl #20
 678:	06880100 	streq	r0, [r8], r0, lsl #2
 67c:	2000056a 	andcs	r0, r0, sl, ror #10
 680:	00000038 	andeq	r0, r0, r8, lsr r0
 684:	006c9c01 	rsbeq	r9, ip, r1, lsl #24
 688:	78040000 	stmdavc	r4, {}	; <UNPREDICTABLE>
 68c:	17880100 	strne	r0, [r8, r0, lsl #2]
 690:	0000006c 	andeq	r0, r0, ip, rrx
 694:	046c9102 	strbteq	r9, [ip], #-258	; 0xfffffefe
 698:	88010079 	stmdahi	r1, {r0, r3, r4, r5, r6}
 69c:	00006c1e 	andeq	r6, r0, lr, lsl ip
 6a0:	68910200 	ldmvs	r1, {r9}
 6a4:	00033205 	andeq	r3, r3, r5, lsl #4
 6a8:	098b0100 	stmibeq	fp, {r8}
 6ac:	0000006c 	andeq	r0, r0, ip, rrx
 6b0:	00749102 	rsbseq	r9, r4, r2, lsl #2
 6b4:	69050406 	stmdbvs	r5, {r1, r2, sl}
 6b8:	0300746e 	movweq	r7, #1134	; 0x46e
 6bc:	00000346 	andeq	r0, r0, r6, asr #6
 6c0:	2e068001 	cdpcs	0, 0, cr8, cr6, cr1, {0}
 6c4:	3c200005 	stccc	0, cr0, [r0], #-20	; 0xffffffec
 6c8:	01000000 	mrseq	r0, (UNDEF: 0)
 6cc:	0000979c 	muleq	r0, ip, r7
 6d0:	00630400 	rsbeq	r0, r3, r0, lsl #8
 6d4:	25258001 	strcs	r8, [r5, #-1]!
 6d8:	02000000 	andeq	r0, r0, #0
 6dc:	07007791 			; <UNDEFINED> instruction: 0x07007791
 6e0:	0000036a 	andeq	r0, r0, sl, ror #6
 6e4:	94066901 	strls	r6, [r6], #-2305	; 0xfffff6ff
 6e8:	9a200004 	bls	800700 <startup-0x1f7ff900>
 6ec:	01000000 	mrseq	r0, (UNDEF: 0)
 6f0:	02dd039c 	sbcseq	r0, sp, #156, 6	; 0x70000002
 6f4:	63010000 	movwvs	r0, #4096	; 0x1000
 6f8:	00046a06 	andeq	r6, r4, r6, lsl #20
 6fc:	00002a20 	andeq	r2, r0, r0, lsr #20
 700:	cf9c0100 	svcgt	0x009c0100
 704:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 708:	00000321 	andeq	r0, r0, r1, lsr #6
 70c:	25256301 	strcs	r6, [r5, #-769]!	; 0xfffffcff
 710:	02000000 	andeq	r0, r0, #0
 714:	03007791 	movweq	r7, #1937	; 0x791
 718:	00000277 	andeq	r0, r0, r7, ror r2
 71c:	40065d01 	andmi	r5, r6, r1, lsl #26
 720:	2a200004 	bcs	800738 <startup-0x1f7ff8c8>
 724:	01000000 	mrseq	r0, (UNDEF: 0)
 728:	0000f59c 	muleq	r0, ip, r5
 72c:	03390800 	teqeq	r9, #0, 16
 730:	5d010000 	stcpl	0, cr0, [r1, #-0]
 734:	00002524 	andeq	r2, r0, r4, lsr #10
 738:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 73c:	03160900 	tsteq	r6, #0, 18
 740:	54010000 	strpl	r0, [r1], #-0
 744:	0000250f 	andeq	r2, r0, pc, lsl #10
 748:	00040000 	andeq	r0, r4, r0
 74c:	00004020 	andeq	r4, r0, r0, lsr #32
 750:	1e9c0100 	fmlnee	f0, f4, f0
 754:	0a000001 	beq	760 <startup-0x1ffff8a0>
 758:	01007672 	tsteq	r0, r2, ror r6
 75c:	00251358 	eoreq	r1, r5, r8, asr r3
 760:	91020000 	mrsls	r0, (UNDEF: 2)
 764:	ee09006f 	cdp	0, 0, cr0, cr9, cr15, {3}
 768:	01000002 	tsteq	r0, r2
 76c:	00250f4b 	eoreq	r0, r5, fp, asr #30
 770:	03c00000 	biceq	r0, r0, #0
 774:	00402000 	subeq	r2, r0, r0
 778:	9c010000 	stcls	0, cr0, [r1], {-0}
 77c:	00000147 	andeq	r0, r0, r7, asr #2
 780:	0076720a 	rsbseq	r7, r6, sl, lsl #4
 784:	25134f01 	ldrcs	r4, [r3, #-3841]	; 0xfffff0ff
 788:	02000000 	andeq	r0, r0, #0
 78c:	09006f91 	stmdbeq	r0, {r0, r4, r7, r8, r9, sl, fp, sp, lr}
 790:	00000300 	andeq	r0, r0, r0, lsl #6
 794:	250f4201 	strcs	r4, [pc, #-513]	; 59b <startup-0x1ffffa65>
 798:	8c000000 	stchi	0, cr0, [r0], {-0}
 79c:	34200003 	strtcc	r0, [r0], #-3
 7a0:	01000000 	mrseq	r0, (UNDEF: 0)
 7a4:	0001709c 	muleq	r1, ip, r0
 7a8:	76720a00 	ldrbtvc	r0, [r2], -r0, lsl #20
 7ac:	13460100 	movtne	r0, #24832	; 0x6100
 7b0:	00000025 	andeq	r0, r0, r5, lsr #32
 7b4:	00779102 	rsbseq	r9, r7, r2, lsl #2
 7b8:	00029c03 	andeq	r9, r2, r3, lsl #24
 7bc:	063b0100 	ldrteq	r0, [fp], -r0, lsl #2
 7c0:	2000035c 	andcs	r0, r0, ip, asr r3
 7c4:	00000030 	andeq	r0, r0, r0, lsr r0
 7c8:	01969c01 	orrseq	r9, r6, r1, lsl #24
 7cc:	41080000 	mrsmi	r0, (UNDEF: 8)
 7d0:	01000003 	tsteq	r0, r3
 7d4:	00252b3b 	eoreq	r2, r5, fp, lsr fp
 7d8:	91020000 	mrsls	r0, (UNDEF: 2)
 7dc:	870b0077 	smlsdxhi	fp, r7, r0, r0
 7e0:	01000002 	tsteq	r0, r2
 7e4:	03200637 			; <UNDEFINED> instruction: 0x03200637
 7e8:	003c2000 	eorseq	r2, ip, r0
 7ec:	9c010000 	stcls	0, cr0, [r1], {-0}
 7f0:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
 7f4:	01007804 	tsteq	r0, r4, lsl #16
 7f8:	00252937 	eoreq	r2, r5, r7, lsr r9
 7fc:	91020000 	mrsls	r0, (UNDEF: 2)
 800:	570b0077 	smlsdxpl	fp, r7, r0, r0
 804:	01000003 	tsteq	r0, r3
 808:	02ee0633 	rsceq	r0, lr, #53477376	; 0x3300000
 80c:	00322000 	eorseq	r2, r2, r0
 810:	9c010000 	stcls	0, cr0, [r1], {-0}
 814:	000001de 	ldrdeq	r0, [r0], -lr
 818:	01007804 	tsteq	r0, r4, lsl #16
 81c:	00252733 	eoreq	r2, r5, r3, lsr r7
 820:	91020000 	mrsls	r0, (UNDEF: 2)
 824:	5e030077 	mcrpl	0, 0, r0, cr3, cr7, {3}
 828:	01000002 	tsteq	r0, r2
 82c:	02920622 	addseq	r0, r2, #35651584	; 0x2200000
 830:	005c2000 	subseq	r2, ip, r0
 834:	9c010000 	stcls	0, cr0, [r1], {-0}
 838:	0000021a 	andeq	r0, r0, sl, lsl r2
 83c:	00736d04 	rsbseq	r6, r3, r4, lsl #26
 840:	1a1f2201 	bne	7c904c <startup-0x1f836fb4>
 844:	02000002 	andeq	r0, r0, #2
 848:	b20c6c91 	andlt	r6, ip, #37120	; 0x9100
 84c:	26200002 	strtcs	r0, [r0], -r2
 850:	0a000000 	beq	858 <startup-0x1ffff7a8>
 854:	29010063 	stmdbcs	r1, {r0, r1, r5, r6}
 858:	00006c0f 	andeq	r6, r0, pc, lsl #24
 85c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 860:	04020000 	streq	r0, [r2], #-0
 864:	0000dc07 	andeq	sp, r0, r7, lsl #24
 868:	03260300 			; <UNDEFINED> instruction: 0x03260300
 86c:	13010000 	movwne	r0, #4096	; 0x1000
 870:	00024c06 	andeq	r4, r2, r6, lsl #24
 874:	00004620 	andeq	r4, r0, r0, lsr #12
 878:	469c0100 	ldrmi	r0, [ip], r0, lsl #2
 87c:	04000002 	streq	r0, [r0], #-2
 880:	01007375 	tsteq	r0, r5, ror r3
 884:	021a1f13 	andseq	r1, sl, #19, 30	; 0x4c
 888:	91020000 	mrsls	r0, (UNDEF: 2)
 88c:	d10d0074 	tstle	sp, r4, ror r0
 890:	01000002 	tsteq	r0, r2
 894:	02080608 	andeq	r0, r8, #8, 12	; 0x800000
 898:	00442000 	subeq	r2, r4, r0
 89c:	9c010000 	stcls	0, cr0, [r1], {-0}
 8a0:	00055a00 	andeq	r5, r5, r0, lsl #20
 8a4:	0d000400 	cfstrseq	mvf0, [r0, #-0]
 8a8:	04000004 	streq	r0, [r0], #-4
 8ac:	00010e01 	andeq	r0, r1, r1, lsl #28
 8b0:	03a50c00 			; <UNDEFINED> instruction: 0x03a50c00
 8b4:	00150000 	andseq	r0, r5, r0
 8b8:	05a40000 	streq	r0, [r4, #0]!
 8bc:	04522000 	ldrbeq	r2, [r2], #-0
 8c0:	045a0000 	ldrbeq	r0, [sl], #-0
 8c4:	62020000 	andvs	r0, r2, #0
 8c8:	07000004 	streq	r0, [r0, -r4]
 8cc:	00005001 	andeq	r5, r0, r1
 8d0:	06290300 	strteq	r0, [r9], -r0, lsl #6
 8d4:	00000050 	andeq	r0, r0, r0, asr r0
 8d8:	0000d603 	andeq	sp, r0, r3, lsl #12
 8dc:	72040000 	andvc	r0, r4, #0
 8e0:	01006e75 	tsteq	r0, r5, ror lr
 8e4:	0000ae03 	andeq	sl, r0, r3, lsl #28
 8e8:	cf030200 	svcgt	0x00030200
 8ec:	03000001 	movweq	r0, #1
 8f0:	08010500 	stmdaeq	r1, {r8, sl}
 8f4:	0000005b 	andeq	r0, r0, fp, asr r0
 8f8:	00005506 	andeq	r5, r0, r6, lsl #10
 8fc:	04020200 	streq	r0, [r2], #-512	; 0xfffffe00
 900:	00007b10 	andeq	r7, r0, r0, lsl fp
 904:	00780700 	rsbseq	r0, r8, r0, lsl #14
 908:	7b070502 	blvc	1c1d18 <startup-0x1fe3e2e8>
 90c:	00000000 	andeq	r0, r0, r0
 910:	02007907 	andeq	r7, r0, #114688	; 0x1c000
 914:	007b0905 	rsbseq	r0, fp, r5, lsl #18
 918:	00010000 	andeq	r0, r1, r0
 91c:	64080105 	strvs	r0, [r8], #-261	; 0xfffffefb
 920:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 924:	00000055 	andeq	r0, r0, r5, asr r0
 928:	57030602 	strpl	r0, [r3, -r2, lsl #12]
 92c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 930:	00000001 	andeq	r0, r0, r1
 934:	08020a34 	stmdaeq	r2, {r2, r4, r5, r9, fp}
 938:	0000d010 	andeq	sp, r0, r0, lsl r0
 93c:	01c10a00 	biceq	r0, r1, r0, lsl #20
 940:	0a020000 	beq	80948 <startup-0x1ff7f6b8>
 944:	0000d006 	andeq	sp, r0, r6
 948:	020a0000 	andeq	r0, sl, #0
 94c:	02000001 	andeq	r0, r0, #1
 950:	00d0060b 	sbcseq	r0, r0, fp, lsl #12
 954:	0a040000 	beq	10095c <startup-0x1feff6a4>
 958:	00000108 	andeq	r0, r0, r8, lsl #2
 95c:	d0060c02 	andle	r0, r6, r2, lsl #24
 960:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 964:	00787007 	rsbseq	r7, r8, r7
 968:	d7080d02 	strle	r0, [r8, -r2, lsl #26]
 96c:	0c000000 	stceq	0, cr0, [r0], {-0}
 970:	05040b00 	streq	r0, [r4, #-2816]	; 0xfffff500
 974:	00746e69 	rsbseq	r6, r4, r9, ror #28
 978:	0000820c 	andeq	r8, r0, ip, lsl #4
 97c:	0000e800 	andeq	lr, r0, r0, lsl #16
 980:	00e80d00 	rsceq	r0, r8, r0, lsl #26
 984:	05130000 	ldreq	r0, [r3, #-0]
 988:	07040500 	streq	r0, [r4, -r0, lsl #10]
 98c:	000000dc 	ldrdeq	r0, [r0], -ip
 990:	00000108 	andeq	r0, r0, r8, lsl #2
 994:	020e0200 	andeq	r0, lr, #0, 4
 998:	0000008e 	andeq	r0, r0, lr, lsl #1
 99c:	00000008 	andeq	r0, r0, r8
 9a0:	0c0e0200 	sfmeq	f0, 4, [lr], {-0}
 9a4:	00000107 	andeq	r0, r0, r7, lsl #2
 9a8:	008e040e 	addeq	r0, lr, lr, lsl #8
 9ac:	4f0f0000 	svcmi	0x000f0000
 9b0:	34006a62 	strcc	r6, [r0], #-2658	; 0xfffff59e
 9b4:	c4101002 	ldrgt	r1, [r0], #-2
 9b8:	0a000001 	beq	9c4 <startup-0x1ffff63c>
 9bc:	000000d2 	ldrdeq	r0, [r0], -r2
 9c0:	fb0c1102 	blx	304dd2 <startup-0x1fcfb22e>
 9c4:	00000000 	andeq	r0, r0, r0
 9c8:	0000ca0a 	andeq	ip, r0, sl, lsl #20
 9cc:	0c120200 	lfmeq	f0, 4, [r2], {-0}
 9d0:	000000fb 	strdeq	r0, [r0], -fp
 9d4:	00aa0a04 	adceq	r0, sl, r4, lsl #20
 9d8:	13020000 	movwne	r0, #8192	; 0x2000
 9dc:	0000fb0c 	andeq	pc, r0, ip, lsl #22
 9e0:	cb0a0800 	blgt	2829e8 <startup-0x1fd7d618>
 9e4:	02000001 	andeq	r0, r0, #1
 9e8:	00fb0c14 	rscseq	r0, fp, r4, lsl ip
 9ec:	0a0c0000 	beq	3009f4 <startup-0x1fcff60c>
 9f0:	0000000a 	andeq	r0, r0, sl
 9f4:	d0061502 	andle	r1, r6, r2, lsl #10
 9f8:	10000000 	andne	r0, r0, r0
 9fc:	0000390a 	andeq	r3, r0, sl, lsl #18
 a00:	06160200 	ldreq	r0, [r6], -r0, lsl #4
 a04:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 a08:	003e0a14 	eorseq	r0, lr, r4, lsl sl
 a0c:	16020000 	strne	r0, [r2], -r0
 a10:	0000d00c 	andeq	sp, r0, ip
 a14:	780a1800 	stmdavc	sl, {fp, ip}
 a18:	02000000 	andeq	r0, r0, #0
 a1c:	00d00617 	sbcseq	r0, r0, r7, lsl r6
 a20:	0a1c0000 	beq	700a28 <startup-0x1f8ff5d8>
 a24:	0000007d 	andeq	r0, r0, sp, ror r0
 a28:	d00c1702 	andle	r1, ip, r2, lsl #14
 a2c:	20000000 	andcs	r0, r0, r0
 a30:	0000690a 	andeq	r6, r0, sl, lsl #18
 a34:	0a180200 	beq	60123c <startup-0x1f9fedc4>
 a38:	000001d5 	ldrdeq	r0, [r0], -r5
 a3c:	048a0a24 	streq	r0, [sl], #2596	; 0xa24
 a40:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
 a44:	0001d50a 	andeq	sp, r1, sl, lsl #10
 a48:	230a2800 	movwcs	r2, #43008	; 0xa800
 a4c:	02000000 	andeq	r0, r0, #0
 a50:	01d50a1a 	bicseq	r0, r5, sl, lsl sl
 a54:	0a2c0000 	beq	b00a5c <startup-0x1f4ff5a4>
 a58:	0000006e 	andeq	r0, r0, lr, rrx
 a5c:	f00a1b02 			; <UNDEFINED> instruction: 0xf00a1b02
 a60:	30000001 	andcc	r0, r0, r1
 a64:	01cf1000 	biceq	r1, pc, r0
 a68:	cf110000 	svcgt	0x00110000
 a6c:	00000001 	andeq	r0, r0, r1
 a70:	010d040e 	tsteq	sp, lr, lsl #8
 a74:	040e0000 	streq	r0, [lr], #-0
 a78:	000001c4 	andeq	r0, r0, r4, asr #3
 a7c:	0001f010 	andeq	pc, r1, r0, lsl r0	; <UNPREDICTABLE>
 a80:	01cf1100 	biceq	r1, pc, r0, lsl #2
 a84:	d0110000 	andsle	r0, r1, r0
 a88:	11000000 	mrsne	r0, (UNDEF: 0)
 a8c:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 a90:	db040e00 	blle	104298 <startup-0x1fefbd68>
 a94:	08000001 	stmdaeq	r0, {r0}
 a98:	00000257 	andeq	r0, r0, r7, asr r2
 a9c:	0d031c02 	stceq	12, cr1, [r3, #-8]
 aa0:	08000001 	stmdaeq	r0, {r0}
 aa4:	00000256 	andeq	r0, r0, r6, asr r2
 aa8:	cf0c1c02 	svcgt	0x000c1c02
 aac:	12000001 	andne	r0, r0, #1
 ab0:	00000043 	andeq	r0, r0, r3, asr #32
 ab4:	ef111f02 	svc	0x00111f02
 ab8:	12000000 	andne	r0, r0, #0
 abc:	00000028 	andeq	r0, r0, r8, lsr #32
 ac0:	ef112002 	svc	0x00112002
 ac4:	12000000 	andne	r0, r0, #0
 ac8:	000001ae 	andeq	r0, r0, lr, lsr #3
 acc:	ef112102 	svc	0x00112102
 ad0:	13000000 	movwne	r0, #0
 ad4:	00746163 	rsbseq	r6, r4, r3, ror #2
 ad8:	f60f2302 			; <UNDEFINED> instruction: 0xf60f2302
 adc:	12000001 	andne	r0, r0, #1
 ae0:	000001d4 	ldrdeq	r0, [r0], -r4
 ae4:	f60f2402 			; <UNDEFINED> instruction: 0xf60f2402
 ae8:	12000001 	andne	r0, r0, #1
 aec:	000000fd 	strdeq	r0, [r0], -sp
 af0:	f60f2502 			; <UNDEFINED> instruction: 0xf60f2502
 af4:	14000001 	strne	r0, [r0], #-1
 af8:	00000438 	andeq	r0, r0, r8, lsr r4
 afc:	d0058201 	andle	r8, r5, r1, lsl #4
 b00:	ca000000 	bgt	b08 <startup-0x1ffff4f8>
 b04:	2c200009 	stccs	0, cr0, [r0], #-36	; 0xffffffdc
 b08:	01000000 	mrseq	r0, (UNDEF: 0)
 b0c:	0002c99c 	muleq	r2, ip, r9
 b10:	316f1500 	cmncc	pc, r0, lsl #10
 b14:	24820100 	strcs	r0, [r2], #256	; 0x100
 b18:	00000202 	andeq	r0, r0, r2, lsl #4
 b1c:	15649102 	strbne	r9, [r4, #-258]!	; 0xfffffefe
 b20:	0100326f 	tsteq	r0, pc, ror #4
 b24:	02023082 	andeq	r3, r2, #130	; 0x82
 b28:	91020000 	mrsls	r0, (UNDEF: 2)
 b2c:	03e01660 	mvneq	r1, #96, 12	; 0x6000000
 b30:	83010000 	movwhi	r0, #4096	; 0x1000
 b34:	0000d007 	andeq	sp, r0, r7
 b38:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 b3c:	0003c416 	andeq	ip, r3, r6, lsl r4
 b40:	07840100 	streq	r0, [r4, r0, lsl #2]
 b44:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 b48:	16709102 	ldrbtne	r9, [r0], -r2, lsl #2
 b4c:	0000037f 	andeq	r0, r0, pc, ror r3
 b50:	d0078501 	andle	r8, r7, r1, lsl #10
 b54:	02000000 	andeq	r0, r0, #0
 b58:	1e166c91 	mrcne	12, 0, r6, cr6, cr1, {4}
 b5c:	01000004 	tsteq	r0, r4
 b60:	00d00786 	sbcseq	r0, r0, r6, lsl #15
 b64:	91020000 	mrsls	r0, (UNDEF: 2)
 b68:	27170068 	ldrcs	r0, [r7, -r8, rrx]
 b6c:	01000004 	tsteq	r0, r4
 b70:	09aa067c 	stmibeq	sl!, {r2, r3, r4, r5, r6, r9, sl}
 b74:	00202000 	eoreq	r2, r0, r0
 b78:	9c010000 	stcls	0, cr0, [r1], {-0}
 b7c:	0000030b 	andeq	r0, r0, fp, lsl #6
 b80:	01006f15 	tsteq	r0, r5, lsl pc
 b84:	0202207c 	andeq	r2, r2, #124	; 0x7c
 b88:	91020000 	mrsls	r0, (UNDEF: 2)
 b8c:	04901874 	ldreq	r1, [r0], #2164	; 0x874
 b90:	7c010000 	stcvc	0, cr0, [r1], {-0}
 b94:	0000d027 	andeq	sp, r0, r7, lsr #32
 b98:	70910200 	addsvc	r0, r1, r0, lsl #4
 b9c:	00049718 	andeq	r9, r4, r8, lsl r7
 ba0:	337c0100 	cmncc	ip, #0, 2
 ba4:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 ba8:	006c9102 	rsbeq	r9, ip, r2, lsl #2
 bac:	00037514 	andeq	r7, r3, r4, lsl r5
 bb0:	05730100 	ldrbeq	r0, [r3, #-256]!	; 0xffffff00
 bb4:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 bb8:	2000098c 	andcs	r0, r0, ip, lsl #19
 bbc:	0000001e 	andeq	r0, r0, lr, lsl r0
 bc0:	03339c01 	teqeq	r3, #256	; 0x100
 bc4:	6f150000 	svcvs	0x00150000
 bc8:	17730100 	ldrbne	r0, [r3, -r0, lsl #2]!
 bcc:	00000202 	andeq	r0, r0, r2, lsl #4
 bd0:	00749102 	rsbseq	r9, r4, r2, lsl #2
 bd4:	0003e919 	andeq	lr, r3, r9, lsl r9
 bd8:	066d0100 	strbteq	r0, [sp], -r0, lsl #2
 bdc:	20000966 	andcs	r0, r0, r6, ror #18
 be0:	00000026 	andeq	r0, r0, r6, lsr #32
 be4:	03579c01 	cmpeq	r7, #256	; 0x100
 be8:	6f150000 	svcvs	0x00150000
 bec:	236d0100 	cmncs	sp, #0, 2
 bf0:	00000202 	andeq	r0, r0, r2, lsl #4
 bf4:	00749102 	rsbseq	r9, r4, r2, lsl #2
 bf8:	00044e19 	andeq	r4, r4, r9, lsl lr
 bfc:	06630100 	strbteq	r0, [r3], -r0, lsl #2
 c00:	2000092c 	andcs	r0, r0, ip, lsr #18
 c04:	0000003a 	andeq	r0, r0, sl, lsr r0
 c08:	037b9c01 	cmneq	fp, #256	; 0x100
 c0c:	6f150000 	svcvs	0x00150000
 c10:	23630100 	cmncs	r3, #0, 2
 c14:	00000202 	andeq	r0, r0, r2, lsl #4
 c18:	00749102 	rsbseq	r9, r4, r2, lsl #2
 c1c:	00039419 	andeq	r9, r3, r9, lsl r4
 c20:	06570100 	ldrbeq	r0, [r7], -r0, lsl #2
 c24:	200008d4 	ldrdcs	r0, [r0], -r4
 c28:	00000058 	andeq	r0, r0, r8, asr r0
 c2c:	039f9c01 	orrseq	r9, pc, #256	; 0x100
 c30:	6f150000 	svcvs	0x00150000
 c34:	20570100 	subscs	r0, r7, r0, lsl #2
 c38:	00000202 	andeq	r0, r0, r2, lsl #4
 c3c:	00749102 	rsbseq	r9, r4, r2, lsl #2
 c40:	00040f19 	andeq	r0, r4, r9, lsl pc
 c44:	064d0100 	strbeq	r0, [sp], -r0, lsl #2
 c48:	20000898 	mulcs	r0, r8, r8
 c4c:	0000003c 	andeq	r0, r0, ip, lsr r0
 c50:	03c39c01 	biceq	r9, r3, #256	; 0x100
 c54:	6f150000 	svcvs	0x00150000
 c58:	1e4d0100 	dvfnee	f0, f5, f0
 c5c:	00000202 	andeq	r0, r0, r2, lsl #4
 c60:	00749102 	rsbseq	r9, r4, r2, lsl #2
 c64:	00046f19 	andeq	r6, r4, r9, lsl pc
 c68:	06360100 	ldrteq	r0, [r6], -r0, lsl #2
 c6c:	2000072a 	andcs	r0, r0, sl, lsr #14
 c70:	0000016e 	andeq	r0, r0, lr, ror #2
 c74:	044f9c01 	strbeq	r9, [pc], #-3073	; c7c <startup-0x1ffff384>
 c78:	6f150000 	svcvs	0x00150000
 c7c:	1c360100 	ldfnes	f0, [r6], #-0
 c80:	00000202 	andeq	r0, r0, r2, lsl #4
 c84:	1a649102 	bne	1925094 <startup-0x1e6daf6c>
 c88:	2000073a 	andcs	r0, r0, sl, lsr r7
 c8c:	0000004e 	andeq	r0, r0, lr, asr #32
 c90:	00000401 	andeq	r0, r0, r1, lsl #8
 c94:	0100691b 	tsteq	r0, fp, lsl r9
 c98:	00d00d38 	sbcseq	r0, r0, r8, lsr sp
 c9c:	91020000 	mrsls	r0, (UNDEF: 2)
 ca0:	921a0074 	andsls	r0, sl, #116	; 0x74
 ca4:	4e200007 	cdpmi	0, 2, cr0, cr0, cr7, {0}
 ca8:	1c000000 	stcne	0, cr0, [r0], {-0}
 cac:	1b000004 	blne	cc4 <startup-0x1ffff33c>
 cb0:	3d010069 	stccc	0, cr0, [r1, #-420]	; 0xfffffe5c
 cb4:	0000d00d 	andeq	sp, r0, sp
 cb8:	70910200 	addsvc	r0, r1, r0, lsl #4
 cbc:	07ea1a00 	strbeq	r1, [sl, r0, lsl #20]!
 cc0:	004e2000 	subeq	r2, lr, r0
 cc4:	04370000 	ldrteq	r0, [r7], #-0
 cc8:	691b0000 	ldmdbvs	fp, {}	; <UNPREDICTABLE>
 ccc:	0d420100 	stfeqe	f0, [r2, #-0]
 cd0:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 cd4:	006c9102 	rsbeq	r9, ip, r2, lsl #2
 cd8:	0008421c 	andeq	r4, r8, ip, lsl r2
 cdc:	00004e20 	andeq	r4, r0, r0, lsr #28
 ce0:	00691b00 	rsbeq	r1, r9, r0, lsl #22
 ce4:	d00d4701 	andle	r4, sp, r1, lsl #14
 ce8:	02000000 	andeq	r0, r0, #0
 cec:	00006891 	muleq	r0, r1, r8
 cf0:	00038819 	andeq	r8, r3, r9, lsl r8
 cf4:	061f0100 	ldreq	r0, [pc], -r0, lsl #2
 cf8:	200005bc 			; <UNDEFINED> instruction: 0x200005bc
 cfc:	0000016e 	andeq	r0, r0, lr, ror #2
 d00:	04db9c01 	ldrbeq	r9, [fp], #3073	; 0xc01
 d04:	6f150000 	svcvs	0x00150000
 d08:	1b1f0100 	blne	7c1110 <startup-0x1f83eef0>
 d0c:	00000202 	andeq	r0, r0, r2, lsl #4
 d10:	1a649102 	bne	1925120 <startup-0x1e6daee0>
 d14:	200005cc 	andcs	r0, r0, ip, asr #11
 d18:	0000004e 	andeq	r0, r0, lr, asr #32
 d1c:	0000048d 	andeq	r0, r0, sp, lsl #9
 d20:	0100691b 	tsteq	r0, fp, lsl r9
 d24:	00d00d21 	sbcseq	r0, r0, r1, lsr #26
 d28:	91020000 	mrsls	r0, (UNDEF: 2)
 d2c:	241a0074 	ldrcs	r0, [sl], #-116	; 0xffffff8c
 d30:	4e200006 	cdpmi	0, 2, cr0, cr0, cr6, {0}
 d34:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
 d38:	1b000004 	blne	d50 <startup-0x1ffff2b0>
 d3c:	26010069 	strcs	r0, [r1], -r9, rrx
 d40:	0000d00d 	andeq	sp, r0, sp
 d44:	70910200 	addsvc	r0, r1, r0, lsl #4
 d48:	067c1a00 	ldrbteq	r1, [ip], -r0, lsl #20
 d4c:	004e2000 	subeq	r2, lr, r0
 d50:	04c30000 	strbeq	r0, [r3], #0
 d54:	691b0000 	ldmdbvs	fp, {}	; <UNPREDICTABLE>
 d58:	0d2b0100 	stfeqs	f0, [fp, #-0]
 d5c:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 d60:	006c9102 	rsbeq	r9, ip, r2, lsl #2
 d64:	0006d41c 	andeq	sp, r6, ip, lsl r4
 d68:	00004e20 	andeq	r4, r0, r0, lsr #28
 d6c:	00691b00 	rsbeq	r1, r9, r0, lsl #22
 d70:	d00d3001 	andle	r3, sp, r1
 d74:	02000000 	andeq	r0, r0, #0
 d78:	00006891 	muleq	r0, r1, r8
 d7c:	00047c17 	andeq	r7, r4, r7, lsl ip
 d80:	06180100 	ldreq	r0, [r8], -r0, lsl #2
 d84:	200005b6 			; <UNDEFINED> instruction: 0x200005b6
 d88:	00000006 	andeq	r0, r0, r6
 d8c:	050a9c01 	streq	r9, [sl, #-3073]	; 0xfffff3ff
 d90:	78150000 	ldmdavc	r5, {}	; <UNPREDICTABLE>
 d94:	1e180100 	mufnee	f0, f0, f0
 d98:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 d9c:	79155001 	ldmdbvc	r5, {r0, ip, lr}
 da0:	25180100 	ldrcs	r0, [r8, #-256]	; 0xffffff00
 da4:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 da8:	17005101 	strne	r5, [r0, -r1, lsl #2]
 dac:	000003fd 	strdeq	r0, [r0], -sp
 db0:	b0061201 	andlt	r1, r6, r1, lsl #4
 db4:	06200005 	strteq	r0, [r0], -r5
 db8:	01000000 	mrseq	r0, (UNDEF: 0)
 dbc:	0005399c 	muleq	r5, ip, r9
 dc0:	00781500 	rsbseq	r1, r8, r0, lsl #10
 dc4:	d01c1201 	andsle	r1, ip, r1, lsl #4
 dc8:	01000000 	mrseq	r0, (UNDEF: 0)
 dcc:	00791550 	rsbseq	r1, r9, r0, asr r5
 dd0:	d0231201 	eorle	r1, r3, r1, lsl #4
 dd4:	01000000 	mrseq	r0, (UNDEF: 0)
 dd8:	9e1d0051 	mrcls	0, 0, r0, cr13, cr1, {2}
 ddc:	01000004 	tsteq	r0, r4
 de0:	05aa060c 	streq	r0, [sl, #1548]!	; 0x60c
 de4:	00062000 	andeq	r2, r6, r0
 de8:	9c010000 	stcls	0, cr0, [r1], {-0}
 dec:	0003cd1d 	andeq	ip, r3, sp, lsl sp
 df0:	06060100 	streq	r0, [r6], -r0, lsl #2
 df4:	200005a4 	andcs	r0, r0, r4, lsr #11
 df8:	00000006 	andeq	r0, r0, r6
 dfc:	Address 0x00000dfc is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	100e1b0e 	andne	r1, lr, lr, lsl #22
   c:	02000017 	andeq	r0, r0, #23
  10:	0b0b0024 	bleq	2c00a8 <startup-0x1fd3ff58>
  14:	0e030b3e 	vmoveq.16	d3[0], r0
  18:	13030000 	movwne	r0, #12288	; 0x3000
  1c:	0b0e0301 	bleq	380c28 <startup-0x1fc7f3d8>
  20:	3b0b3a0b 	blcc	2ce854 <startup-0x1fd317ac>
  24:	010b390b 	tsteq	fp, fp, lsl #18
  28:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
  2c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
  30:	0b3b0b3a 	bleq	ec2d20 <startup-0x1f13d2e0>
  34:	13490b39 	movtne	r0, #39737	; 0x9b39
  38:	00000b38 	andeq	r0, r0, r8, lsr fp
  3c:	03001605 	movweq	r1, #1541	; 0x605
  40:	3b0b3a0e 	blcc	2ce880 <startup-0x1fd31780>
  44:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  48:	06000013 			; <UNDEFINED> instruction: 0x06000013
  4c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
  50:	0b3a050b 	bleq	e81484 <startup-0x1f17eb7c>
  54:	0b390b3b 	bleq	e42d48 <startup-0x1f1bd2b8>
  58:	00001301 	andeq	r1, r0, r1, lsl #6
  5c:	03000d07 	movweq	r0, #3335	; 0xd07
  60:	3b0b3a0e 	blcc	2ce8a0 <startup-0x1fd31760>
  64:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  68:	000b3813 	andeq	r3, fp, r3, lsl r8
  6c:	00240800 	eoreq	r0, r4, r0, lsl #16
  70:	0b3e0b0b 	bleq	f82ca4 <startup-0x1f07d35c>
  74:	00000803 	andeq	r0, r0, r3, lsl #16
  78:	49010109 	stmdbmi	r1, {r0, r3, r8}
  7c:	00130113 	andseq	r0, r3, r3, lsl r1
  80:	00210a00 	eoreq	r0, r1, r0, lsl #20
  84:	052f1349 	streq	r1, [pc, #-841]!	; fffffd43 <keyb_state+0xdfff9fcf>
  88:	0f0b0000 	svceq	0x000b0000
  8c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
  90:	0c000013 	stceq	0, cr0, [r0], {19}
  94:	08030113 	stmdaeq	r3, {r0, r1, r4, r8}
  98:	0b3a0b0b 	bleq	e82ccc <startup-0x1f17d334>
  9c:	0b390b3b 	bleq	e42d90 <startup-0x1f1bd270>
  a0:	00001301 	andeq	r1, r0, r1, lsl #6
  a4:	2701150d 	strcs	r1, [r1, -sp, lsl #10]
  a8:	00130119 	andseq	r0, r3, r9, lsl r1
  ac:	00050e00 	andeq	r0, r5, r0, lsl #28
  b0:	00001349 	andeq	r1, r0, r9, asr #6
  b4:	0300340f 	movweq	r3, #1039	; 0x40f
  b8:	3b0b3a0e 	blcc	2ce8f8 <startup-0x1fd31708>
  bc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  c0:	3c193f13 	ldccc	15, cr3, [r9], {19}
  c4:	10000019 	andne	r0, r0, r9, lsl r0
  c8:	08030034 	stmdaeq	r3, {r2, r4, r5}
  cc:	0b3b0b3a 	bleq	ec2dbc <startup-0x1f13d244>
  d0:	13490b39 	movtne	r0, #39737	; 0x9b39
  d4:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  d8:	34110000 	ldrcc	r0, [r1], #-0
  dc:	3a134700 	bcc	4d1ce4 <startup-0x1fb2e31c>
  e0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  e4:	0018020b 	andseq	r0, r8, fp, lsl #4
  e8:	00341200 	eorseq	r1, r4, r0, lsl #4
  ec:	0b3a0e03 	bleq	e83900 <startup-0x1f17c700>
  f0:	0b390b3b 	bleq	e42de4 <startup-0x1f1bd21c>
  f4:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
  f8:	00001802 	andeq	r1, r0, r2, lsl #16
  fc:	03003413 	movweq	r3, #1043	; 0x413
 100:	3b0b3a0e 	blcc	2ce940 <startup-0x1fd316c0>
 104:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 108:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 10c:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
 110:	13470034 	movtne	r0, #28724	; 0x7034
 114:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 118:	18020b39 	stmdane	r2, {r0, r3, r4, r5, r8, r9, fp}
 11c:	01000000 	mrseq	r0, (UNDEF: 0)
 120:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 124:	0e030b13 	vmoveq.32	d3[0], r0
 128:	01110e1b 	tsteq	r1, fp, lsl lr
 12c:	17100612 			; <UNDEFINED> instruction: 0x17100612
 130:	24020000 	strcs	r0, [r2], #-0
 134:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 138:	000e030b 	andeq	r0, lr, fp, lsl #6
 13c:	00340300 	eorseq	r0, r4, r0, lsl #6
 140:	0b3a0e03 	bleq	e83954 <startup-0x1f17c6ac>
 144:	0b390b3b 	bleq	e42e38 <startup-0x1f1bd1c8>
 148:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 14c:	00001802 	andeq	r1, r0, r2, lsl #16
 150:	0b002404 	bleq	9168 <startup-0x1fff6e98>
 154:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 158:	05000008 	streq	r0, [r0, #-8]
 15c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 160:	0b3a0e03 	bleq	e83974 <startup-0x1f17c68c>
 164:	0b390b3b 	bleq	e42e58 <startup-0x1f1bd1a8>
 168:	13491927 	movtne	r1, #39207	; 0x9927
 16c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 170:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 174:	00130119 	andseq	r0, r3, r9, lsl r1
 178:	00340600 	eorseq	r0, r4, r0, lsl #12
 17c:	0b3a0803 	bleq	e82190 <startup-0x1f17de70>
 180:	0b390b3b 	bleq	e42e74 <startup-0x1f1bd18c>
 184:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 188:	01070000 	mrseq	r0, (UNDEF: 7)
 18c:	01134901 	tsteq	r3, r1, lsl #18
 190:	08000013 	stmdaeq	r0, {r0, r1, r4}
 194:	13490021 	movtne	r0, #36897	; 0x9021
 198:	00000b2f 	andeq	r0, r0, pc, lsr #22
 19c:	3f012e09 	svccc	0x00012e09
 1a0:	3a0e0319 	bcc	380e0c <startup-0x1fc7f1f4>
 1a4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1a8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 1ac:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 1b0:	97184006 	ldrls	r4, [r8, -r6]
 1b4:	13011942 	movwne	r1, #6466	; 0x1942
 1b8:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
 1bc:	03193f01 	tsteq	r9, #1, 30
 1c0:	3b0b3a0e 	blcc	2cea00 <startup-0x1fd31600>
 1c4:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 1c8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 1cc:	97184006 	ldrls	r4, [r8, -r6]
 1d0:	00001942 	andeq	r1, r0, r2, asr #18
 1d4:	0300050b 	movweq	r0, #1291	; 0x50b
 1d8:	3b0b3a08 	blcc	2cea00 <startup-0x1fd31600>
 1dc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 1e0:	00180213 	andseq	r0, r8, r3, lsl r2
 1e4:	11010000 	mrsne	r0, (UNDEF: 1)
 1e8:	130e2501 	movwne	r2, #58625	; 0xe501
 1ec:	1b0e030b 	blne	380e20 <startup-0x1fc7f1e0>
 1f0:	1117550e 	tstne	r7, lr, lsl #10
 1f4:	00171001 	andseq	r1, r7, r1
 1f8:	00240200 	eoreq	r0, r4, r0, lsl #4
 1fc:	0b3e0b0b 	bleq	f82e30 <startup-0x1f07d1d0>
 200:	00000e03 	andeq	r0, r0, r3, lsl #28
 204:	03011303 	movweq	r1, #4867	; 0x1303
 208:	3a0b0b0e 	bcc	2c2e48 <startup-0x1fd3d1b8>
 20c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 210:	0013010b 	andseq	r0, r3, fp, lsl #2
 214:	000d0400 	andeq	r0, sp, r0, lsl #8
 218:	0b3a0803 	bleq	e8222c <startup-0x1f17ddd4>
 21c:	0b390b3b 	bleq	e42f10 <startup-0x1f1bd0f0>
 220:	0b381349 	bleq	e04f4c <startup-0x1f1fb0b4>
 224:	16050000 	strne	r0, [r5], -r0
 228:	3a0e0300 	bcc	380e30 <startup-0x1fc7f1d0>
 22c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 230:	0013490b 	andseq	r4, r3, fp, lsl #18
 234:	01130600 	tsteq	r3, r0, lsl #12
 238:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
 23c:	0b3b0b3a 	bleq	ec2f2c <startup-0x1f13d0d4>
 240:	13010b39 	movwne	r0, #6969	; 0x1b39
 244:	0d070000 	stceq	0, cr0, [r7, #-0]
 248:	3a0e0300 	bcc	380e50 <startup-0x1fc7f1b0>
 24c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 250:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 254:	0800000b 	stmdaeq	r0, {r0, r1, r3}
 258:	0b0b0024 	bleq	2c02f0 <startup-0x1fd3fd10>
 25c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 260:	01090000 	mrseq	r0, (UNDEF: 9)
 264:	01134901 	tsteq	r3, r1, lsl #18
 268:	0a000013 	beq	2bc <startup-0x1ffffd44>
 26c:	13490021 	movtne	r0, #36897	; 0x9021
 270:	0000052f 	andeq	r0, r0, pc, lsr #10
 274:	0b000f0b 	bleq	3ea8 <startup-0x1fffc158>
 278:	0013490b 	andseq	r4, r3, fp, lsl #18
 27c:	01130c00 	tsteq	r3, r0, lsl #24
 280:	0b0b0803 	bleq	2c2294 <startup-0x1fd3dd6c>
 284:	0b3b0b3a 	bleq	ec2f74 <startup-0x1f13d08c>
 288:	13010b39 	movwne	r0, #6969	; 0x1b39
 28c:	150d0000 	strne	r0, [sp, #-0]
 290:	01192701 	tsteq	r9, r1, lsl #14
 294:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 298:	13490005 	movtne	r0, #36869	; 0x9005
 29c:	340f0000 	strcc	r0, [pc], #-0	; 2a4 <startup-0x1ffffd5c>
 2a0:	3a0e0300 	bcc	380ea8 <startup-0x1fc7f158>
 2a4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2a8:	3f13490b 	svccc	0x0013490b
 2ac:	00193c19 	andseq	r3, r9, r9, lsl ip
 2b0:	00341000 	eorseq	r1, r4, r0
 2b4:	0b3a0803 	bleq	e822c8 <startup-0x1f17dd38>
 2b8:	0b390b3b 	bleq	e42fac <startup-0x1f1bd054>
 2bc:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 2c0:	0000193c 	andeq	r1, r0, ip, lsr r9
 2c4:	3f012e11 	svccc	0x00012e11
 2c8:	3a0e0319 	bcc	380f34 <startup-0x1fc7f0cc>
 2cc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2d0:	1119270b 	tstne	r9, fp, lsl #14
 2d4:	40061201 	andmi	r1, r6, r1, lsl #4
 2d8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 2dc:	00001301 	andeq	r1, r0, r1, lsl #6
 2e0:	03003412 	movweq	r3, #1042	; 0x412
 2e4:	3b0b3a08 	blcc	2ceb0c <startup-0x1fd314f4>
 2e8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 2ec:	00180213 	andseq	r0, r8, r3, lsl r2
 2f0:	002e1300 	eoreq	r1, lr, r0, lsl #6
 2f4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2f8:	0b3b0b3a 	bleq	ec2fe8 <startup-0x1f13d018>
 2fc:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 300:	06120111 			; <UNDEFINED> instruction: 0x06120111
 304:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 308:	00000019 	andeq	r0, r0, r9, lsl r0
 30c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 310:	030b130e 	movweq	r1, #45838	; 0xb30e
 314:	110e1b0e 	tstne	lr, lr, lsl #22
 318:	10061201 	andne	r1, r6, r1, lsl #4
 31c:	02000017 	andeq	r0, r0, #23
 320:	0b0b0024 	bleq	2c03b8 <startup-0x1fd3fc48>
 324:	0e030b3e 	vmoveq.16	d3[0], r0
 328:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
 32c:	03193f01 	tsteq	r9, #1, 30
 330:	3b0b3a0e 	blcc	2ceb70 <startup-0x1fd31490>
 334:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 338:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 33c:	96184006 	ldrls	r4, [r8], -r6
 340:	13011942 	movwne	r1, #6466	; 0x1942
 344:	05040000 	streq	r0, [r4, #-0]
 348:	3a080300 	bcc	200f50 <startup-0x1fdff0b0>
 34c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 350:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 354:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
 358:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 35c:	0b3b0b3a 	bleq	ec304c <startup-0x1f13cfb4>
 360:	13490b39 	movtne	r0, #39737	; 0x9b39
 364:	00001802 	andeq	r1, r0, r2, lsl #16
 368:	0b002406 	bleq	9388 <startup-0x1fff6c78>
 36c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 370:	07000008 	streq	r0, [r0, -r8]
 374:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 378:	0b3a0e03 	bleq	e83b8c <startup-0x1f17c474>
 37c:	0b390b3b 	bleq	e43070 <startup-0x1f1bcf90>
 380:	01111927 	tsteq	r1, r7, lsr #18
 384:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 388:	00194296 	mulseq	r9, r6, r2
 38c:	00050800 	andeq	r0, r5, r0, lsl #16
 390:	0b3a0e03 	bleq	e83ba4 <startup-0x1f17c45c>
 394:	0b390b3b 	bleq	e43088 <startup-0x1f1bcf78>
 398:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 39c:	2e090000 	cdpcs	0, 0, cr0, cr9, cr0, {0}
 3a0:	03193f01 	tsteq	r9, #1, 30
 3a4:	3b0b3a0e 	blcc	2cebe4 <startup-0x1fd3141c>
 3a8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 3ac:	11134919 	tstne	r3, r9, lsl r9
 3b0:	40061201 	andmi	r1, r6, r1, lsl #4
 3b4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 3b8:	00001301 	andeq	r1, r0, r1, lsl #6
 3bc:	0300340a 	movweq	r3, #1034	; 0x40a
 3c0:	3b0b3a08 	blcc	2cebe8 <startup-0x1fd31418>
 3c4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 3c8:	00180213 	andseq	r0, r8, r3, lsl r2
 3cc:	012e0b00 			; <UNDEFINED> instruction: 0x012e0b00
 3d0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 3d4:	0b3b0b3a 	bleq	ec30c4 <startup-0x1f13cf3c>
 3d8:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 3dc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3e0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 3e4:	00130119 	andseq	r0, r3, r9, lsl r1
 3e8:	010b0c00 	tsteq	fp, r0, lsl #24
 3ec:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3f0:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
 3f4:	03193f00 	tsteq	r9, #0, 30
 3f8:	3b0b3a0e 	blcc	2cec38 <startup-0x1fd313c8>
 3fc:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 400:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 404:	97184006 	ldrls	r4, [r8, -r6]
 408:	00001942 	andeq	r1, r0, r2, asr #18
 40c:	01110100 	tsteq	r1, r0, lsl #2
 410:	0b130e25 	bleq	4c3cac <startup-0x1fb3c354>
 414:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 418:	06120111 			; <UNDEFINED> instruction: 0x06120111
 41c:	00001710 	andeq	r1, r0, r0, lsl r7
 420:	03010402 	movweq	r0, #5122	; 0x1402
 424:	0b0b3e0e 	bleq	2cfc64 <startup-0x1fd3039c>
 428:	3a13490b 	bcc	4d285c <startup-0x1fb2d7a4>
 42c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 430:	0013010b 	andseq	r0, r3, fp, lsl #2
 434:	00280300 	eoreq	r0, r8, r0, lsl #6
 438:	0b1c0e03 	bleq	703c4c <startup-0x1f8fc3b4>
 43c:	28040000 	stmdacs	r4, {}	; <UNPREDICTABLE>
 440:	1c080300 	stcne	3, cr0, [r8], {-0}
 444:	0500000b 	streq	r0, [r0, #-11]
 448:	0b0b0024 	bleq	2c04e0 <startup-0x1fd3fb20>
 44c:	0e030b3e 	vmoveq.16	d3[0], r0
 450:	13060000 	movwne	r0, #24576	; 0x6000
 454:	0b0e0301 	bleq	381060 <startup-0x1fc7efa0>
 458:	3b0b3a0b 	blcc	2cec8c <startup-0x1fd31374>
 45c:	010b390b 	tsteq	fp, fp, lsl #18
 460:	07000013 	smladeq	r0, r3, r0, r0
 464:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 468:	0b3b0b3a 	bleq	ec3158 <startup-0x1f13cea8>
 46c:	13490b39 	movtne	r0, #39737	; 0x9b39
 470:	00000b38 	andeq	r0, r0, r8, lsr fp
 474:	03001608 	movweq	r1, #1544	; 0x608
 478:	3b0b3a0e 	blcc	2cecb8 <startup-0x1fd31348>
 47c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 480:	09000013 	stmdbeq	r0, {r0, r1, r4}
 484:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 488:	0b3a050b 	bleq	e818bc <startup-0x1f17e744>
 48c:	0b390b3b 	bleq	e43180 <startup-0x1f1bce80>
 490:	00001301 	andeq	r1, r0, r1, lsl #6
 494:	03000d0a 	movweq	r0, #3338	; 0xd0a
 498:	3b0b3a0e 	blcc	2cecd8 <startup-0x1fd31328>
 49c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 4a0:	000b3813 	andeq	r3, fp, r3, lsl r8
 4a4:	00240b00 	eoreq	r0, r4, r0, lsl #22
 4a8:	0b3e0b0b 	bleq	f830dc <startup-0x1f07cf24>
 4ac:	00000803 	andeq	r0, r0, r3, lsl #16
 4b0:	4901010c 	stmdbmi	r1, {r2, r3, r8}
 4b4:	00130113 	andseq	r0, r3, r3, lsl r1
 4b8:	00210d00 	eoreq	r0, r1, r0, lsl #26
 4bc:	052f1349 	streq	r1, [pc, #-841]!	; 17b <startup-0x1ffffe85>
 4c0:	0f0e0000 	svceq	0x000e0000
 4c4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 4c8:	0f000013 	svceq	0x00000013
 4cc:	08030113 	stmdaeq	r3, {r0, r1, r4, r8}
 4d0:	0b3a0b0b 	bleq	e83104 <startup-0x1f17cefc>
 4d4:	0b390b3b 	bleq	e431c8 <startup-0x1f1bce38>
 4d8:	00001301 	andeq	r1, r0, r1, lsl #6
 4dc:	27011510 	smladcs	r1, r0, r5, r1
 4e0:	00130119 	andseq	r0, r3, r9, lsl r1
 4e4:	00051100 	andeq	r1, r5, r0, lsl #2
 4e8:	00001349 	andeq	r1, r0, r9, asr #6
 4ec:	03003412 	movweq	r3, #1042	; 0x412
 4f0:	3b0b3a0e 	blcc	2ced30 <startup-0x1fd312d0>
 4f4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 4f8:	3c193f13 	ldccc	15, cr3, [r9], {19}
 4fc:	13000019 	movwne	r0, #25
 500:	08030034 	stmdaeq	r3, {r2, r4, r5}
 504:	0b3b0b3a 	bleq	ec31f4 <startup-0x1f13ce0c>
 508:	13490b39 	movtne	r0, #39737	; 0x9b39
 50c:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 510:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
 514:	03193f01 	tsteq	r9, #1, 30
 518:	3b0b3a0e 	blcc	2ced58 <startup-0x1fd312a8>
 51c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 520:	11134919 	tstne	r3, r9, lsl r9
 524:	40061201 	andmi	r1, r6, r1, lsl #4
 528:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 52c:	00001301 	andeq	r1, r0, r1, lsl #6
 530:	03000515 	movweq	r0, #1301	; 0x515
 534:	3b0b3a08 	blcc	2ced5c <startup-0x1fd312a4>
 538:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 53c:	00180213 	andseq	r0, r8, r3, lsl r2
 540:	00341600 	eorseq	r1, r4, r0, lsl #12
 544:	0b3a0e03 	bleq	e83d58 <startup-0x1f17c2a8>
 548:	0b390b3b 	bleq	e4323c <startup-0x1f1bcdc4>
 54c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 550:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
 554:	03193f01 	tsteq	r9, #1, 30
 558:	3b0b3a0e 	blcc	2ced98 <startup-0x1fd31268>
 55c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 560:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 564:	97184006 	ldrls	r4, [r8, -r6]
 568:	13011942 	movwne	r1, #6466	; 0x1942
 56c:	05180000 	ldreq	r0, [r8, #-0]
 570:	3a0e0300 	bcc	381178 <startup-0x1fc7ee88>
 574:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 578:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 57c:	19000018 	stmdbne	r0, {r3, r4}
 580:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 584:	0b3a0e03 	bleq	e83d98 <startup-0x1f17c268>
 588:	0b390b3b 	bleq	e4327c <startup-0x1f1bcd84>
 58c:	01111927 	tsteq	r1, r7, lsr #18
 590:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 594:	01194296 			; <UNDEFINED> instruction: 0x01194296
 598:	1a000013 	bne	5ec <startup-0x1ffffa14>
 59c:	0111010b 	tsteq	r1, fp, lsl #2
 5a0:	13010612 	movwne	r0, #5650	; 0x1612
 5a4:	341b0000 	ldrcc	r0, [fp], #-0
 5a8:	3a080300 	bcc	2011b0 <startup-0x1fdfee50>
 5ac:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 5b0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 5b4:	1c000018 	stcne	0, cr0, [r0], {24}
 5b8:	0111010b 	tsteq	r1, fp, lsl #2
 5bc:	00000612 	andeq	r0, r0, r2, lsl r6
 5c0:	3f002e1d 	svccc	0x00002e1d
 5c4:	3a0e0319 	bcc	381230 <startup-0x1fc7edd0>
 5c8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 5cc:	1119270b 	tstne	r9, fp, lsl #14
 5d0:	40061201 	andmi	r1, r6, r1, lsl #4
 5d4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 5d8:	Address 0x000005d8 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000014 	andeq	r0, r0, r4, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
	...
  18:	0000001c 	andeq	r0, r0, ip, lsl r0
  1c:	02cb0002 	sbceq	r0, fp, #2
  20:	00040000 	andeq	r0, r4, r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000158 	andeq	r0, r0, r8, asr r1
	...
  38:	00000024 	andeq	r0, r0, r4, lsr #32
  3c:	03ba0002 			; <UNDEFINED> instruction: 0x03ba0002
  40:	00040000 	andeq	r0, r4, r0
  44:	00000000 	andeq	r0, r0, r0
  48:	20000168 	andcs	r0, r0, r8, ror #2
  4c:	000000a0 	andeq	r0, r0, r0, lsr #1
  50:	20000000 	andcs	r0, r0, r0
  54:	0000000c 	andeq	r0, r0, ip
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	06480002 	strbeq	r0, [r8], -r2
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	20000208 	andcs	r0, r0, r8, lsl #4
  74:	0000039a 	muleq	r0, sl, r3
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	08a10002 	stmiaeq	r1!, {r1}
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	200005a4 	andcs	r0, r0, r4, lsr #11
  94:	00000452 	andeq	r0, r0, r2, asr r4
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000003f 	andeq	r0, r0, pc, lsr r0
   4:	00390003 	eorseq	r0, r9, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	5a010000 	bpl	40020 <startup-0x1ffbffe0>
  1c:	70532f3a 	subsvc	r2, r3, sl, lsr pc
  20:	2f326c65 	svccs	0x00326c65
  24:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
  28:	72670000 	rsbvc	r0, r7, #0
  2c:	6b696661 	blvs	1a599b8 <startup-0x1e5a6648>
  30:	0100682e 	tsteq	r0, lr, lsr #16
  34:	72670000 	rsbvc	r0, r7, #0
  38:	6b696661 	blvs	1a599c4 <startup-0x1e5a663c>
  3c:	0100632e 	tsteq	r0, lr, lsr #6
  40:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
  44:	03000001 	movweq	r0, #1
  48:	00003400 	andeq	r3, r0, r0, lsl #8
  4c:	fb010200 	blx	40856 <startup-0x1ffbf7aa>
  50:	01000d0e 	tsteq	r0, lr, lsl #26
  54:	00010101 	andeq	r0, r1, r1, lsl #2
  58:	00010000 	andeq	r0, r1, r0
  5c:	3a5a0100 	bcc	1680464 <startup-0x1e97fb9c>
  60:	6570532f 	ldrbvs	r5, [r0, #-815]!	; 0xfffffcd1
  64:	532f326c 			; <UNDEFINED> instruction: 0x532f326c
  68:	006c6570 	rsbeq	r6, ip, r0, ror r5
  6c:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
  70:	5f646170 	svcpl	0x00646170
  74:	76697264 	strbtvc	r7, [r9], -r4, ror #4
  78:	632e7265 			; <UNDEFINED> instruction: 0x632e7265
  7c:	00000100 	andeq	r0, r0, r0, lsl #2
  80:	00260500 	eoreq	r0, r6, r0, lsl #10
  84:	00100205 	andseq	r0, r0, r5, lsl #4
  88:	05172000 	ldreq	r2, [r7, #-0]
  8c:	1b05cc0a 	blne	1730bc <startup-0x1fe8cf44>
  90:	2e020520 	cfsh32cs	mvfx0, mvfx2, #16
  94:	05210a05 	streq	r0, [r1, #-2565]!	; 0xfffff5fb
  98:	0205201b 	andeq	r2, r5, #27
  9c:	210a052e 	tstcs	sl, lr, lsr #10
  a0:	05201b05 	streq	r1, [r0, #-2821]!	; 0xfffff4fb
  a4:	0a052e02 	beq	14b8b4 <startup-0x1feb474c>
  a8:	201b0521 	andscs	r0, fp, r1, lsr #10
  ac:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
  b0:	1b05210a 	blne	1484e0 <startup-0x1feb7b20>
  b4:	2e020520 	cfsh32cs	mvfx0, mvfx2, #16
  b8:	05210a05 	streq	r0, [r1, #-2565]!	; 0xfffff5fb
  bc:	0205201b 	andeq	r2, r5, #27
  c0:	2201052e 	andcs	r0, r1, #192937984	; 0xb800000
  c4:	3e050593 	mcrcc	5, 0, r0, cr5, cr3, {4}
  c8:	05200305 	streq	r0, [r0, #-773]!	; 0xfffffcfb
  cc:	04053d08 	streq	r3, [r5], #-3336	; 0xfffff2f8
  d0:	0017054a 	andseq	r0, r7, sl, asr #10
  d4:	20010402 	andcs	r0, r1, r2, lsl #8
  d8:	052f0805 	streq	r0, [pc, #-2053]!	; fffff8db <keyb_state+0xdfff9b67>
  dc:	17054a04 	strne	r4, [r5, -r4, lsl #20]
  e0:	01040200 	mrseq	r0, R12_usr
  e4:	2f080520 	svccs	0x00080520
  e8:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
  ec:	04020017 	streq	r0, [r2], #-23	; 0xffffffe9
  f0:	08052001 	stmdaeq	r5, {r0, sp}
  f4:	4a04052f 	bmi	1015b8 <startup-0x1fefea48>
  f8:	02001705 	andeq	r1, r0, #1310720	; 0x140000
  fc:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 100:	01052f08 	tsteq	r5, r8, lsl #30
 104:	69020521 	stmdbvs	r2, {r0, r5, r8, sl}
 108:	053d1105 	ldreq	r1, [sp, #-261]!	; 0xfffffefb
 10c:	06056912 			; <UNDEFINED> instruction: 0x06056912
 110:	2f04052e 	svccs	0x0004052e
 114:	053e0d05 	ldreq	r0, [lr, #-3333]!	; 0xfffff2fb
 118:	10054a06 	andne	r4, r5, r6, lsl #20
 11c:	4e11053d 	mrcmi	5, 0, r0, cr1, cr13, {1}
 120:	053d0d05 	ldreq	r0, [sp, #-3333]!	; 0xfffff2fb
 124:	06053312 			; <UNDEFINED> instruction: 0x06053312
 128:	300b052e 	andcc	r0, fp, lr, lsr #10
 12c:	052e0405 	streq	r0, [lr, #-1029]!	; 0xfffffbfb
 130:	10052106 	andne	r2, r5, r6, lsl #2
 134:	4a08054b 	bmi	201668 <startup-0x1fdfe998>
 138:	053d1205 	ldreq	r1, [sp, #-517]!	; 0xfffffdfb
 13c:	19053d07 	stmdbne	r5, {r0, r1, r2, r8, sl, fp, ip, sp}
 140:	2e14053d 	mrccs	5, 0, r0, cr4, cr13, {1}
 144:	05202105 	streq	r2, [r0, #-261]!	; 0xfffffefb
 148:	12052e1c 	andne	r2, r5, #28, 28	; 0x1c0
 14c:	001c0520 	andseq	r0, ip, r0, lsr #10
 150:	37020402 	strcc	r0, [r2, -r2, lsl #8]
 154:	02000405 	andeq	r0, r0, #83886080	; 0x5000000
 158:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 15c:	3c0a0303 	stccc	3, cr0, [sl], {3}
 160:	053d0a05 	ldreq	r0, [sp, #-2565]!	; 0xfffff5fb
 164:	04020001 	streq	r0, [r2], #-1
 168:	09022101 	stmdbeq	r2, {r0, r8, sp}
 16c:	b4010100 	strlt	r0, [r1], #-256	; 0xffffff00
 170:	03000000 	movweq	r0, #0
 174:	00003a00 	andeq	r3, r0, r0, lsl #20
 178:	fb010200 	blx	40982 <startup-0x1ffbf67e>
 17c:	01000d0e 	tsteq	r0, lr, lsl #26
 180:	00010101 	andeq	r0, r1, r1, lsl #2
 184:	00010000 	andeq	r0, r1, r0
 188:	3a5a0100 	bcc	1680590 <startup-0x1e97fa70>
 18c:	6570532f 	ldrbvs	r5, [r0, #-815]!	; 0xfffffcd1
 190:	532f326c 			; <UNDEFINED> instruction: 0x532f326c
 194:	006c6570 	rsbeq	r6, ip, r0, ror r5
 198:	61747300 	cmnvs	r4, r0, lsl #6
 19c:	70757472 	rsbsvc	r7, r5, r2, ror r4
 1a0:	0100632e 	tsteq	r0, lr, lsr #6
 1a4:	72670000 	rsbvc	r0, r7, #0
 1a8:	6b696661 	blvs	1a59b34 <startup-0x1e5a64cc>
 1ac:	0100682e 	tsteq	r0, lr, lsr #16
 1b0:	05000000 	streq	r0, [r0, #-0]
 1b4:	02050001 	andeq	r0, r5, #1
 1b8:	20000000 	andcs	r0, r0, r0
 1bc:	21211318 			; <UNDEFINED> instruction: 0x21211318
 1c0:	0302212f 	movweq	r2, #8495	; 0x212f
 1c4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
 1c8:	02050015 	andeq	r0, r5, #21
 1cc:	20000168 	andcs	r0, r0, r8, ror #2
 1d0:	05011b03 	streq	r1, [r1, #-2819]	; 0xfffff4fd
 1d4:	05592f10 	ldrbeq	r2, [r9, #-3856]	; 0xfffff0f0
 1d8:	2a056711 	bcs	159e24 <startup-0x1fea61dc>
 1dc:	01053d59 	tsteq	r5, r9, asr sp
 1e0:	0205bd75 	andeq	fp, r5, #7488	; 0x1d40
 1e4:	2f0a053d 	svccs	0x000a053d
 1e8:	02052f2f 	andeq	r2, r5, #47, 30	; 0xbc
 1ec:	06052f30 			; <UNDEFINED> instruction: 0x06052f30
 1f0:	01040200 	mrseq	r0, R12_usr
 1f4:	00050532 	andeq	r0, r5, r2, lsr r5
 1f8:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 1fc:	02000605 	andeq	r0, r0, #5242880	; 0x500000
 200:	053d0104 	ldreq	r0, [sp, #-260]!	; 0xfffffefc
 204:	04020005 	streq	r0, [r2], #-5
 208:	06052e01 	streq	r2, [r5], -r1, lsl #28
 20c:	01040200 	mrseq	r0, R12_usr
 210:	0005053d 	andeq	r0, r5, sp, lsr r5
 214:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 218:	01040200 	mrseq	r0, R12_usr
 21c:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 220:	07023901 	streq	r3, [r2, -r1, lsl #18]
 224:	2f010100 	svccs	0x00010100
 228:	03000002 	movweq	r0, #2
 22c:	00003400 	andeq	r3, r0, r0, lsl #8
 230:	fb010200 	blx	40a3a <startup-0x1ffbf5c6>
 234:	01000d0e 	tsteq	r0, lr, lsl #26
 238:	00010101 	andeq	r0, r1, r1, lsl #2
 23c:	00010000 	andeq	r0, r1, r0
 240:	3a5a0100 	bcc	1680648 <startup-0x1e97f9b8>
 244:	6570532f 	ldrbvs	r5, [r0, #-815]!	; 0xfffffcd1
 248:	532f326c 			; <UNDEFINED> instruction: 0x532f326c
 24c:	006c6570 	rsbeq	r6, ip, r0, ror r5
 250:	63736100 	cmnvs	r3, #0, 2
 254:	645f6969 	ldrbvs	r6, [pc], #-2409	; 25c <startup-0x1ffffda4>
 258:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 25c:	632e7961 			; <UNDEFINED> instruction: 0x632e7961
 260:	00000100 	andeq	r0, r0, r0, lsl #2
 264:	001a0500 	andseq	r0, sl, r0, lsl #10
 268:	02080205 	andeq	r0, r8, #1342177280	; 0x50000000
 26c:	05192000 	ldreq	r2, [r9, #-0]
 270:	0f053005 	svceq	0x00053005
 274:	2f050520 	svccs	0x00050520
 278:	05200f05 	streq	r0, [r0, #-3845]!	; 0xfffff0fb
 27c:	0e052f05 	cdpeq	15, 0, cr2, cr5, cr5, {0}
 280:	2f050520 	svccs	0x00050520
 284:	05200f05 	streq	r0, [r0, #-3845]!	; 0xfffff0fb
 288:	0d05300a 	stceq	0, cr3, [r5, #-40]	; 0xffffffd8
 28c:	01040200 	mrseq	r0, R12_usr
 290:	00170520 	andseq	r0, r7, r0, lsr #10
 294:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 298:	02000a05 	andeq	r0, r0, #20480	; 0x5000
 29c:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 2a0:	0f052105 	svceq	0x00052105
 2a4:	2f010520 	svccs	0x00010520
 2a8:	05a02305 	streq	r2, [r0, #773]!	; 0x305
 2ac:	08054c09 	stmdaeq	r5, {r0, r3, sl, fp, lr}
 2b0:	3f0a0583 	svccc	0x000a0583
 2b4:	2f210605 	svccs	0x00210605
 2b8:	08052f2f 	stmdaeq	r5, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}
 2bc:	370a052f 	strcc	r0, [sl, -pc, lsr #10]
 2c0:	05430105 	strbeq	r0, [r3, #-261]	; 0xfffffefb
 2c4:	09055a23 	stmdbeq	r5, {r0, r1, r5, r9, fp, ip, lr}
 2c8:	8308054c 	movwhi	r0, #34124	; 0x854c
 2cc:	053f0a05 	ldreq	r0, [pc, #-2565]!	; fffff8cf <keyb_state+0xdfff9b5b>
 2d0:	0605210f 	streq	r2, [r5], -pc, lsl #2
 2d4:	0007052e 	andeq	r0, r7, lr, lsr #10
 2d8:	21030402 	tstcs	r3, r2, lsl #8
 2dc:	03040200 	movweq	r0, #16896	; 0x4200
 2e0:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 2e4:	02002f03 	andeq	r2, r0, #3, 30
 2e8:	052f0304 	streq	r0, [pc, #-772]!	; ffffffec <keyb_state+0xdfffa278>
 2ec:	04020024 	streq	r0, [r2], #-36	; 0xffffffdc
 2f0:	06052a03 	streq	r2, [r5], -r3, lsl #20
 2f4:	01040200 	mrseq	r0, R12_usr
 2f8:	5e08053c 	mcrpl	5, 0, r0, cr8, cr12, {1}
 2fc:	79030a05 	stmdbvc	r3, {r0, r2, r9, fp}
 300:	0301053c 	movweq	r0, #5436	; 0x153c
 304:	2a053c09 	bcs	14f330 <startup-0x1feb0cd0>
 308:	6715055a 			; <UNDEFINED> instruction: 0x6715055a
 30c:	05740505 	ldrbeq	r0, [r4, #-1285]!	; 0xfffffafb
 310:	01052015 	tsteq	r5, r5, lsl r0
 314:	762c054b 	strtvc	r0, [ip], -fp, asr #10
 318:	05672305 	strbeq	r2, [r7, #-773]!	; 0xfffffcfb
 31c:	20054a33 	andcs	r4, r5, r3, lsr sl
 320:	3c050574 	cfstr32cc	mvfx0, [r5], {116}	; 0x74
 324:	05202005 	streq	r2, [r0, #-5]!
 328:	01052015 	tsteq	r5, r5, lsl r0
 32c:	76310521 	ldrtvc	r0, [r1], -r1, lsr #10
 330:	3d670505 	cfstr64cc	mvdx0, [r7, #-20]!	; 0xffffffec
 334:	05201605 	streq	r1, [r0, #-1541]!	; 0xfffff9fb
 338:	052f3d05 	streq	r3, [pc, #-3333]!	; fffff63b <keyb_state+0xdfff98c7>
 33c:	2b053d01 	blcs	14f748 <startup-0x1feb08b8>
 340:	3d050568 	cfstr32cc	mvfx0, [r5, #-416]	; 0xfffffe60
 344:	18052f3d 	stmdane	r5, {r0, r2, r3, r4, r5, r8, r9, sl, fp, sp}
 348:	2013052f 	andscs	r0, r3, pc, lsr #10
 34c:	053d0505 	ldreq	r0, [sp, #-1285]!	; 0xfffffafb
 350:	01053d0c 	tsteq	r5, ip, lsl #26
 354:	7627052f 	strtvc	r0, [r7], -pc, lsr #10
 358:	053d0505 	ldreq	r0, [sp, #-1285]!	; 0xfffffafb
 35c:	05052013 	streq	r2, [r5, #-19]	; 0xffffffed
 360:	18053d2f 	stmdane	r5, {r0, r1, r2, r3, r5, r8, sl, fp, ip, sp}
 364:	5905053d 	stmdbpl	r5, {r0, r2, r3, r4, r5, r8, sl}
 368:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
 36c:	01052f0c 	tsteq	r5, ip, lsl #30
 370:	a025052f 	eorge	r0, r5, pc, lsr #10
 374:	053d0505 	ldreq	r0, [sp, #-1285]!	; 0xfffffafb
 378:	05052013 	streq	r2, [r5, #-19]	; 0xffffffed
 37c:	18053d2f 	stmdane	r5, {r0, r1, r2, r3, r5, r8, sl, fp, ip, sp}
 380:	5905053d 	stmdbpl	r5, {r0, r2, r3, r4, r5, r8, sl}
 384:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
 388:	01052f0c 	tsteq	r5, ip, lsl #30
 38c:	a02d052f 	eorge	r0, sp, pc, lsr #10
 390:	3d670505 	cfstr64cc	mvdx0, [r7, #-20]!	; 0xffffffec
 394:	5901053d 	stmdbpl	r1, {r0, r2, r3, r4, r5, r8, sl}
 398:	054c2b05 	strbeq	r2, [ip, #-2821]	; 0xfffff4fb
 39c:	3d3d6705 	ldccc	7, cr6, [sp, #-20]!	; 0xffffffec
 3a0:	05590105 	ldrbeq	r0, [r9, #-261]	; 0xfffffefb
 3a4:	0a054c17 	beq	153408 <startup-0x1feacbf8>
 3a8:	000e052f 	andeq	r0, lr, pc, lsr #10
 3ac:	20010402 	andcs	r0, r1, r2, lsl #8
 3b0:	02002205 	andeq	r2, r0, #1342177280	; 0x50000000
 3b4:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 3b8:	0402000a 	streq	r0, [r2], #-10
 3bc:	05053c01 	streq	r3, [r5, #-3073]	; 0xfffff3ff
 3c0:	053d3d2f 	ldreq	r3, [sp, #-3375]!	; 0xfffff2d1
 3c4:	0e053e0a 	cdpeq	14, 0, cr3, cr5, cr10, {0}
 3c8:	01040200 	mrseq	r0, R12_usr
 3cc:	00220520 	eoreq	r0, r2, r0, lsr #10
 3d0:	3c010402 	cfstrscc	mvf0, [r1], {2}
 3d4:	02000a05 	andeq	r0, r0, #20480	; 0x5000
 3d8:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 3dc:	3d3d2f05 	ldccc	15, cr2, [sp, #-20]!	; 0xffffffec
 3e0:	053e0a05 	ldreq	r0, [lr, #-2565]!	; 0xfffff5fb
 3e4:	0402000e 	streq	r0, [r2], #-14
 3e8:	22052001 	andcs	r2, r5, #1
 3ec:	01040200 	mrseq	r0, R12_usr
 3f0:	000a053c 	andeq	r0, sl, ip, lsr r5
 3f4:	3c010402 	cfstrscc	mvf0, [r1], {2}
 3f8:	3d2f0505 	cfstr32cc	mvfx0, [pc, #-20]!	; 3ec <startup-0x1ffffc14>
 3fc:	3e0a053d 	mcrcc	5, 0, r0, cr10, cr13, {1}
 400:	02000e05 	andeq	r0, r0, #5, 28	; 0x50
 404:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 408:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
 40c:	0a053c01 	beq	14f418 <startup-0x1feb0be8>
 410:	01040200 	mrseq	r0, R12_usr
 414:	2f05053c 	svccs	0x0005053c
 418:	01053d3d 	tsteq	r5, sp, lsr sp
 41c:	3e28053e 	mcrcc	5, 1, r0, cr8, cr14, {1}
 420:	05680a05 	strbeq	r0, [r8, #-2565]!	; 0xfffff5fb
 424:	0402000e 	streq	r0, [r2], #-14
 428:	22052001 	andcs	r2, r5, #1
 42c:	01040200 	mrseq	r0, R12_usr
 430:	000a053c 	andeq	r0, sl, ip, lsr r5
 434:	3c010402 	cfstrscc	mvf0, [r1], {2}
 438:	3d2f0505 	cfstr32cc	mvfx0, [pc, #-20]!	; 42c <startup-0x1ffffbd4>
 43c:	3d010559 	cfstr32cc	mvfx0, [r1, #-356]	; 0xfffffe9c
 440:	054c2105 	strbeq	r2, [ip, #-261]	; 0xfffffefb
 444:	08055b09 	stmdaeq	r5, {r0, r3, r8, r9, fp, ip, lr}
 448:	3d0d053e 	cfstr32cc	mvfx0, [sp, #-248]	; 0xffffff08
 44c:	053e1b05 	ldreq	r1, [lr, #-2821]!	; 0xfffff4fb
 450:	01056605 	tsteq	r5, r5, lsl #12
 454:	0004024b 	andeq	r0, r4, fp, asr #4
 458:	04460101 	strbeq	r0, [r6], #-257	; 0xfffffeff
 45c:	00030000 	andeq	r0, r3, r0
 460:	00000054 	andeq	r0, r0, r4, asr r0
 464:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 468:	0101000d 	tsteq	r1, sp
 46c:	00000101 	andeq	r0, r0, r1, lsl #2
 470:	00000100 	andeq	r0, r0, r0, lsl #2
 474:	2f3a5a01 	svccs	0x003a5a01
 478:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
 47c:	70532f32 	subsvc	r2, r3, r2, lsr pc
 480:	00006c65 	andeq	r6, r0, r5, ror #24
 484:	70617267 	rsbvc	r7, r1, r7, ror #4
 488:	5f636968 	svcpl	0x00636968
 48c:	76697264 	strbtvc	r7, [r9], -r4, ror #4
 490:	632e7265 			; <UNDEFINED> instruction: 0x632e7265
 494:	00000100 	andeq	r0, r0, r0, lsl #2
 498:	66617267 	strbtvs	r7, [r1], -r7, ror #4
 49c:	682e6b69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, fp, sp, lr}
 4a0:	00000100 	andeq	r0, r0, r0, lsl #2
 4a4:	69666564 	stmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 4a8:	675f656e 	ldrbvs	r6, [pc, -lr, ror #10]
 4ac:	61626f6c 	cmnvs	r2, ip, ror #30
 4b0:	00682e6c 	rsbeq	r2, r8, ip, ror #28
 4b4:	00000001 	andeq	r0, r0, r1
 4b8:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
 4bc:	0005a402 	andeq	sl, r5, r2, lsl #8
 4c0:	13211820 			; <UNDEFINED> instruction: 0x13211820
 4c4:	13212321 			; <UNDEFINED> instruction: 0x13212321
 4c8:	13212321 			; <UNDEFINED> instruction: 0x13212321
 4cc:	13212321 			; <UNDEFINED> instruction: 0x13212321
 4d0:	231d0521 	tstcs	sp, #138412032	; 0x8400000
 4d4:	054b0705 	strbeq	r0, [fp, #-1797]	; 0xfffff8fb
 4d8:	0d052e05 	stceq	14, cr2, [r5, #-20]	; 0xffffffec
 4dc:	2e03052f 	cfsh32cs	mvfx0, mvfx3, #31
 4e0:	02001805 	andeq	r1, r0, #327680	; 0x50000
 4e4:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 4e8:	0402002a 	streq	r0, [r2], #-42	; 0xffffffd6
 4ec:	30052e03 	andcc	r2, r5, r3, lsl #28
 4f0:	03040200 	movweq	r0, #16896	; 0x4200
 4f4:	00030574 	andeq	r0, r3, r4, ror r5
 4f8:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 4fc:	02003b05 	andeq	r3, r0, #5120	; 0x1400
 500:	05200304 	streq	r0, [r0, #-772]!	; 0xfffffcfc
 504:	0402004d 	streq	r0, [r2], #-77	; 0xffffffb3
 508:	53052e03 	movwpl	r2, #24067	; 0x5e03
 50c:	03040200 	movweq	r0, #16896	; 0x4200
 510:	00030574 	andeq	r0, r3, r4, ror r5
 514:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 518:	02003505 	andeq	r3, r0, #20971520	; 0x1400000
 51c:	05490304 	strbeq	r0, [r9, #-772]	; 0xfffffcfc
 520:	04020019 	streq	r0, [r2], #-25	; 0xffffffe7
 524:	24053c01 	strcs	r3, [r5], #-3073	; 0xfffff3ff
 528:	01040200 	mrseq	r0, R12_usr
 52c:	0003052e 	andeq	r0, r3, lr, lsr #10
 530:	20010402 	andcs	r0, r1, r2, lsl #8
 534:	13030105 	movwne	r0, #12549	; 0x3105
 538:	030c053c 	movweq	r0, #50492	; 0xc53c
 53c:	0a052071 	beq	148708 <startup-0x1feb78f8>
 540:	2f0d052e 	svccs	0x000d052e
 544:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
 548:	04020018 	streq	r0, [r2], #-24	; 0xffffffe8
 54c:	28052103 	stmdacs	r5, {r0, r1, r8, sp}
 550:	03040200 	movweq	r0, #16896	; 0x4200
 554:	002e052e 	eoreq	r0, lr, lr, lsr #10
 558:	74030402 	strvc	r0, [r3], #-1026	; 0xfffffbfe
 55c:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 560:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 564:	04020039 	streq	r0, [r2], #-57	; 0xffffffc7
 568:	49052003 	stmdbmi	r5, {r0, r1, sp}
 56c:	03040200 	movweq	r0, #16896	; 0x4200
 570:	004f052e 	subeq	r0, pc, lr, lsr #10
 574:	74030402 	strvc	r0, [r3], #-1026	; 0xfffffbfe
 578:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 57c:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 580:	04020033 	streq	r0, [r2], #-51	; 0xffffffcd
 584:	19054903 	stmdbne	r5, {r0, r1, r8, fp, lr}
 588:	01040200 	mrseq	r0, R12_usr
 58c:	0022053c 	eoreq	r0, r2, ip, lsr r5
 590:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 594:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 598:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 59c:	3c0e0301 	stccc	3, cr0, [lr], {1}
 5a0:	76030c05 	strvc	r0, [r3], -r5, lsl #24
 5a4:	2e0a0520 	cfsh32cs	mvfx0, mvfx10, #16
 5a8:	052f0d05 	streq	r0, [pc, #-3333]!	; fffff8ab <keyb_state+0xdfff9b37>
 5ac:	18052e03 	stmdane	r5, {r0, r1, r9, sl, fp, sp}
 5b0:	03040200 	movweq	r0, #16896	; 0x4200
 5b4:	00290521 	eoreq	r0, r9, r1, lsr #10
 5b8:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 5bc:	02002f05 	andeq	r2, r0, #5, 30
 5c0:	05740304 	ldrbeq	r0, [r4, #-772]!	; 0xfffffcfc
 5c4:	04020003 	streq	r0, [r2], #-3
 5c8:	3a052e03 	bcc	14bddc <startup-0x1feb4224>
 5cc:	03040200 	movweq	r0, #16896	; 0x4200
 5d0:	004b0520 	subeq	r0, fp, r0, lsr #10
 5d4:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 5d8:	02005105 	andeq	r5, r0, #1073741825	; 0x40000001
 5dc:	05740304 	ldrbeq	r0, [r4, #-772]!	; 0xfffffcfc
 5e0:	04020003 	streq	r0, [r2], #-3
 5e4:	34052e03 	strcc	r2, [r5], #-3587	; 0xfffff1fd
 5e8:	03040200 	movweq	r0, #16896	; 0x4200
 5ec:	00190549 	andseq	r0, r9, r9, asr #10
 5f0:	3c010402 	cfstrscc	mvf0, [r1], {2}
 5f4:	02002305 	andeq	r2, r0, #335544320	; 0x14000000
 5f8:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 5fc:	04020003 	streq	r0, [r2], #-3
 600:	01052001 	tsteq	r5, r1
 604:	053c0903 	ldreq	r0, [ip, #-2307]!	; 0xfffff6fd
 608:	0a051b0c 	beq	147240 <startup-0x1feb8dc0>
 60c:	2f0d052e 	svccs	0x000d052e
 610:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
 614:	04020018 	streq	r0, [r2], #-24	; 0xffffffe8
 618:	29052103 	stmdbcs	r5, {r0, r1, r8, sp}
 61c:	03040200 	movweq	r0, #16896	; 0x4200
 620:	002f052e 	eoreq	r0, pc, lr, lsr #10
 624:	74030402 	strvc	r0, [r3], #-1026	; 0xfffffbfe
 628:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 62c:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 630:	0402003a 	streq	r0, [r2], #-58	; 0xffffffc6
 634:	4b052003 	blmi	148648 <startup-0x1feb79b8>
 638:	03040200 	movweq	r0, #16896	; 0x4200
 63c:	0051052e 	subseq	r0, r1, lr, lsr #10
 640:	74030402 	strvc	r0, [r3], #-1026	; 0xfffffbfe
 644:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 648:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 64c:	04020034 	streq	r0, [r2], #-52	; 0xffffffcc
 650:	19054903 	stmdbne	r5, {r0, r1, r8, fp, lr}
 654:	01040200 	mrseq	r0, R12_usr
 658:	0023053c 	eoreq	r0, r3, ip, lsr r5
 65c:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 660:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 664:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 668:	1e054001 	cdpne	0, 0, cr4, cr5, cr1, {0}
 66c:	4b07054c 	blmi	1c1ba4 <startup-0x1fe3e45c>
 670:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 674:	03052f0d 	movweq	r2, #24333	; 0x5f0d
 678:	001a052e 	andseq	r0, sl, lr, lsr #10
 67c:	21030402 	tstcs	r3, r2, lsl #8
 680:	02002c05 	andeq	r2, r0, #1280	; 0x500
 684:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 688:	04020032 	streq	r0, [r2], #-50	; 0xffffffce
 68c:	03057403 	movweq	r7, #21507	; 0x5403
 690:	03040200 	movweq	r0, #16896	; 0x4200
 694:	003d052e 	eorseq	r0, sp, lr, lsr #10
 698:	20030402 	andcs	r0, r3, r2, lsl #8
 69c:	02004f05 	andeq	r4, r0, #5, 30
 6a0:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 6a4:	04020055 	streq	r0, [r2], #-85	; 0xffffffab
 6a8:	03057403 	movweq	r7, #21507	; 0x5403
 6ac:	03040200 	movweq	r0, #16896	; 0x4200
 6b0:	0035052e 	eorseq	r0, r5, lr, lsr #10
 6b4:	49030402 	stmdbmi	r3, {r1, sl}
 6b8:	02001905 	andeq	r1, r0, #81920	; 0x14000
 6bc:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 6c0:	04020024 	streq	r0, [r2], #-36	; 0xffffffdc
 6c4:	03052e01 	movweq	r2, #24065	; 0x5e01
 6c8:	01040200 	mrseq	r0, R12_usr
 6cc:	03010520 	movweq	r0, #5408	; 0x1520
 6d0:	0c053c13 	stceq	12, cr3, [r5], {19}
 6d4:	05207103 	streq	r7, [r0, #-259]!	; 0xfffffefd
 6d8:	0d052e0a 	stceq	14, cr2, [r5, #-40]	; 0xffffffd8
 6dc:	2e03052f 	cfsh32cs	mvfx0, mvfx3, #31
 6e0:	02001a05 	andeq	r1, r0, #20480	; 0x5000
 6e4:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 6e8:	0402002a 	streq	r0, [r2], #-42	; 0xffffffd6
 6ec:	30052e03 	andcc	r2, r5, r3, lsl #28
 6f0:	03040200 	movweq	r0, #16896	; 0x4200
 6f4:	00030574 	andeq	r0, r3, r4, ror r5
 6f8:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 6fc:	02003b05 	andeq	r3, r0, #5120	; 0x1400
 700:	05200304 	streq	r0, [r0, #-772]!	; 0xfffffcfc
 704:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 708:	51052e03 	tstpl	r5, r3, lsl #28
 70c:	03040200 	movweq	r0, #16896	; 0x4200
 710:	00030574 	andeq	r0, r3, r4, ror r5
 714:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 718:	02003305 	andeq	r3, r0, #335544320	; 0x14000000
 71c:	05490304 	strbeq	r0, [r9, #-772]	; 0xfffffcfc
 720:	04020019 	streq	r0, [r2], #-25	; 0xffffffe7
 724:	22053c01 	andcs	r3, r5, #256	; 0x100
 728:	01040200 	mrseq	r0, R12_usr
 72c:	0003052e 	andeq	r0, r3, lr, lsr #10
 730:	20010402 	andcs	r0, r1, r2, lsl #8
 734:	0e030105 	adfeqs	f0, f3, f5
 738:	030c053c 	movweq	r0, #50492	; 0xc53c
 73c:	0a052076 	beq	14891c <startup-0x1feb76e4>
 740:	2f0d052e 	svccs	0x000d052e
 744:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
 748:	0402001a 	streq	r0, [r2], #-26	; 0xffffffe6
 74c:	2b052103 	blcs	148b60 <startup-0x1feb74a0>
 750:	03040200 	movweq	r0, #16896	; 0x4200
 754:	0031052e 	eorseq	r0, r1, lr, lsr #10
 758:	74030402 	strvc	r0, [r3], #-1026	; 0xfffffbfe
 75c:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 760:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 764:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
 768:	4d052003 	stcmi	0, cr2, [r5, #-12]
 76c:	03040200 	movweq	r0, #16896	; 0x4200
 770:	0053052e 	subseq	r0, r3, lr, lsr #10
 774:	74030402 	strvc	r0, [r3], #-1026	; 0xfffffbfe
 778:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 77c:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 780:	04020034 	streq	r0, [r2], #-52	; 0xffffffcc
 784:	19054903 	stmdbne	r5, {r0, r1, r8, fp, lr}
 788:	01040200 	mrseq	r0, R12_usr
 78c:	0023053c 	eoreq	r0, r3, ip, lsr r5
 790:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 794:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 798:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 79c:	3c090301 	stccc	3, cr0, [r9], {1}
 7a0:	051b0c05 	ldreq	r0, [fp, #-3077]	; 0xfffff3fb
 7a4:	0d052e0a 	stceq	14, cr2, [r5, #-40]	; 0xffffffd8
 7a8:	2e03052f 	cfsh32cs	mvfx0, mvfx3, #31
 7ac:	02001a05 	andeq	r1, r0, #20480	; 0x5000
 7b0:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 7b4:	0402002b 	streq	r0, [r2], #-43	; 0xffffffd5
 7b8:	31052e03 	tstcc	r5, r3, lsl #28
 7bc:	03040200 	movweq	r0, #16896	; 0x4200
 7c0:	00030574 	andeq	r0, r3, r4, ror r5
 7c4:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 7c8:	02003c05 	andeq	r3, r0, #1280	; 0x500
 7cc:	05200304 	streq	r0, [r0, #-772]!	; 0xfffffcfc
 7d0:	0402004d 	streq	r0, [r2], #-77	; 0xffffffb3
 7d4:	53052e03 	movwpl	r2, #24067	; 0x5e03
 7d8:	03040200 	movweq	r0, #16896	; 0x4200
 7dc:	00030574 	andeq	r0, r3, r4, ror r5
 7e0:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 7e4:	02003405 	andeq	r3, r0, #83886080	; 0x5000000
 7e8:	05490304 	strbeq	r0, [r9, #-772]	; 0xfffffcfc
 7ec:	04020019 	streq	r0, [r2], #-25	; 0xffffffe7
 7f0:	23053c01 	movwcs	r3, #23553	; 0x5c01
 7f4:	01040200 	mrseq	r0, R12_usr
 7f8:	0003052e 	andeq	r0, r3, lr, lsr #10
 7fc:	20010402 	andcs	r0, r1, r2, lsl #8
 800:	05400105 	strbeq	r0, [r0, #-261]	; 0xfffffefb
 804:	02054c20 	andeq	r4, r5, #32, 24	; 0x2000
 808:	4b0f054c 	blmi	3c1d40 <startup-0x1fc3e2c0>
 80c:	4b3d0205 	blmi	f41028 <startup-0x1f0befd8>
 810:	054b0f05 	strbeq	r0, [fp, #-3845]	; 0xfffff0fb
 814:	01053d02 	tsteq	r5, r2, lsl #26
 818:	4c22054b 	cfstr32mi	mvfx0, [r2], #-300	; 0xfffffed4
 81c:	054c0205 	strbeq	r0, [ip, #-517]	; 0xfffffdfb
 820:	02054b0f 	andeq	r4, r5, #15360	; 0x3c00
 824:	4b0e053d 	blmi	381d20 <startup-0x1fc7e2e0>
 828:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
 82c:	0a052e15 	beq	14c088 <startup-0x1feb3f78>
 830:	2f020520 	svccs	0x00020520
 834:	054b0f05 	strbeq	r0, [fp, #-3845]	; 0xfffff0fb
 838:	0e053d02 	cdpeq	13, 0, cr3, cr5, cr2, {0}
 83c:	2e18054b 	cfmac32cs	mvfx0, mvfx8, mvfx11
 840:	052e1505 	streq	r1, [lr, #-1285]!	; 0xfffffafb
 844:	0105200a 	tsteq	r5, sl
 848:	4c25052f 	cfstr32mi	mvfx0, [r5], #-188	; 0xffffff44
 84c:	054b0205 	strbeq	r0, [fp, #-517]	; 0xfffffdfb
 850:	0c054b0f 			; <UNDEFINED> instruction: 0x0c054b0f
 854:	2e14053d 	mrccs	5, 0, r0, cr4, cr13, {1}
 858:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
 85c:	0a052009 	beq	148888 <startup-0x1feb7778>
 860:	3e020530 	cfmv64hrcc	mvdx2, r0
 864:	054b0105 	strbeq	r0, [fp, #-261]	; 0xfffffefb
 868:	02054c25 	andeq	r4, r5, #9472	; 0x2500
 86c:	4b0f054b 	blmi	3c1da0 <startup-0x1fc3e260>
 870:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
 874:	19054b01 	stmdbne	r5, {r0, r8, r9, fp, lr}
 878:	4b08054c 	blmi	201db0 <startup-0x1fdfe250>
 87c:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
 880:	05312f0a 	ldreq	r2, [r1, #-3850]!	; 0xfffff0f6
 884:	054d2201 	strbeq	r2, [sp, #-513]	; 0xfffffdff
 888:	053d6708 	ldreq	r6, [sp, #-1800]!	; 0xfffff8f8
 88c:	33053d01 	movwcc	r3, #23809	; 0x5d01
 890:	5907054c 	stmdbpl	r7, {r2, r3, r6, r8, sl}
 894:	053d3d3d 	ldreq	r3, [sp, #-3389]!	; 0xfffff2c3
 898:	3c09030a 	stccc	3, cr0, [r9], {10}
 89c:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
 8a0:	01010004 	tsteq	r1, r4

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	4f454750 	svcmi	0x00454750
   4:	5254454d 	subspl	r4, r4, #322961408	; 0x13400000
   8:	65670059 	strbvs	r0, [r7, #-89]!	; 0xffffffa7
   c:	756e5f6f 	strbvc	r5, [lr, #-3951]!	; 0xfffff091
  10:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
  14:	5c3a5a00 			; <UNDEFINED> instruction: 0x5c3a5a00
  18:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
  1c:	70535c32 	subsvc	r5, r3, r2, lsr ip
  20:	6d006c65 	stcvs	12, cr6, [r0, #-404]	; 0xfffffe6c
  24:	0065766f 	rsbeq	r7, r5, pc, ror #12
  28:	5f746163 	svcpl	0x00746163
  2c:	5f6e7572 	svcpl	0x006e7572
  30:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; fffffe9c <keyb_state+0xdfffa128>
  34:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
  38:	72696400 	rsbvc	r6, r9, #0, 8
  3c:	69640078 	stmdbvs	r4!, {r3, r4, r5, r6}^
  40:	63007972 	movwvs	r7, #2418	; 0x972
  44:	6a5f7461 	bvs	17dd1d0 <startup-0x1e822e30>
  48:	5f706d75 	svcpl	0x00706d75
  4c:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; fffffeb8 <keyb_state+0xdfffa144>
  50:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
  54:	494f5000 	stmdbmi	pc, {ip, lr}^	; <UNPREDICTABLE>
  58:	7500544e 	strvc	r5, [r0, #-1102]	; 0xfffffbb2
  5c:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
  60:	2064656e 	rsbcs	r6, r4, lr, ror #10
  64:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
  68:	61726400 	cmnvs	r2, r0, lsl #8
  6c:	65730077 	ldrbvs	r0, [r3, #-119]!	; 0xffffff89
  70:	70735f74 	rsbsvc	r5, r3, r4, ror pc
  74:	00646565 	rsbeq	r6, r4, r5, ror #10
  78:	78736f70 	ldmdavc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
  7c:	736f7000 	cmnvc	pc, #0
  80:	6f6d0079 	svcvs	0x006d0079
  84:	5f657375 	svcpl	0x00657375
  88:	6e617473 	mcrvs	4, 3, r7, cr1, cr3, {3}
  8c:	65675f64 	strbvs	r5, [r7, #-3940]!	; 0xfffff09c
  90:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
  94:	6d007972 	vstrvs.16	s14, [r0, #-228]	; 0xffffff1c	; <UNPREDICTABLE>
  98:	6573756f 	ldrbvs	r7, [r3, #-1391]!	; 0xfffffa91
  9c:	6e75725f 	mrcvs	2, 3, r7, cr5, cr15, {2}
  a0:	6f65675f 	svcvs	0x0065675f
  a4:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
  a8:	65670079 	strbvs	r0, [r7, #-121]!	; 0xffffff87
  ac:	756a5f6f 	strbvc	r5, [sl, #-3951]!	; 0xfffff091
  b0:	5a00706d 	bpl	1c26c <startup-0x1ffe3d94>
  b4:	70532f3a 	subsvc	r2, r3, sl, lsr pc
  b8:	2f326c65 	svccs	0x00326c65
  bc:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
  c0:	6172672f 	cmnvs	r2, pc, lsr #14
  c4:	2e6b6966 	vnmulcs.f16	s13, s22, s13	; <UNPREDICTABLE>
  c8:	65670063 	strbvs	r0, [r7, #-99]!	; 0xffffff9d
  cc:	75725f6f 	ldrbvc	r5, [r2, #-3951]!	; 0xfffff091
  d0:	6567006e 	strbvs	r0, [r7, #-110]!	; 0xffffff92
  d4:	74735f6f 	ldrbtvc	r5, [r3], #-3951	; 0xfffff091
  d8:	00646e61 	rsbeq	r6, r4, r1, ror #28
  dc:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  e0:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
  e4:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
  e8:	72696200 	rsbvc	r6, r9, #0, 4
  ec:	74735f64 	ldrbtvc	r5, [r3], #-3940	; 0xfffff09c
  f0:	5f646e61 	svcpl	0x00646e61
  f4:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; ffffff60 <keyb_state+0xdfffa1ec>
  f8:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
  fc:	72696200 	rsbvc	r6, r9, #0, 4
 100:	69730064 	ldmdbvs	r3!, {r2, r5, r6}^
 104:	0078657a 	rsbseq	r6, r8, sl, ror r5
 108:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 10c:	4e470079 	mcrmi	0, 2, r0, cr7, cr9, {3}
 110:	39432055 	stmdbcc	r3, {r0, r2, r4, r6, sp}^
 114:	2e392039 	mrccs	0, 1, r2, cr9, cr9, {1}
 118:	20312e32 	eorscs	r2, r1, r2, lsr lr
 11c:	39313032 	ldmdbcc	r1!, {r1, r4, r5, ip, sp}
 120:	35323031 	ldrcc	r3, [r2, #-49]!	; 0xffffffcf
 124:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
 128:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
 12c:	5b202965 	blpl	80a6c8 <startup-0x1f7f5938>
 130:	2f4d5241 	svccs	0x004d5241
 134:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 138:	72622d39 	rsbvc	r2, r2, #3648	; 0xe40
 13c:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
 140:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
 144:	6f697369 	svcvs	0x00697369
 148:	3732206e 	ldrcc	r2, [r2, -lr, rrx]!
 14c:	39393537 	ldmdbcc	r9!, {r0, r1, r2, r4, r5, r8, sl, ip, sp}
 150:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
 154:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
 158:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
 15c:	616f6c66 	cmnvs	pc, r6, ror #24
 160:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
 164:	6f733d69 	svcvs	0x00733d69
 168:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
 16c:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
 170:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
 174:	2d36766d 	ldccs	6, cr7, [r6, #-436]!	; 0xfffffe4c
 178:	672d206d 	strvs	r2, [sp, -sp, rrx]!
 17c:	304f2d20 	subcc	r2, pc, r0, lsr #26
 180:	74732d20 	ldrbtvc	r2, [r3], #-3360	; 0xfffff2e0
 184:	39633d64 	stmdbcc	r3!, {r2, r5, r6, r8, sl, fp, ip, sp}^
 188:	69620039 	stmdbvs	r2!, {r0, r3, r4, r5}^
 18c:	725f6472 	subsvc	r6, pc, #1912602624	; 0x72000000
 190:	675f6e75 			; <UNDEFINED> instruction: 0x675f6e75
 194:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 198:	00797274 	rsbseq	r7, r9, r4, ror r2
 19c:	5f746163 	svcpl	0x00746163
 1a0:	6b637564 	blvs	18dd738 <startup-0x1e7228c8>
 1a4:	6f65675f 	svcvs	0x0065675f
 1a8:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 1ac:	61630079 	smcvs	12297	; 0x3009
 1b0:	74735f74 	ldrbtvc	r5, [r3], #-3956	; 0xfffff08c
 1b4:	5f646e61 	svcpl	0x00646e61
 1b8:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; 24 <startup-0x1fffffdc>
 1bc:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 1c0:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
 1c4:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
 1c8:	67007374 	smlsdxvs	r0, r4, r3, r7
 1cc:	645f6f65 	ldrbvs	r6, [pc], #-3941	; 1d4 <startup-0x1ffffe2c>
 1d0:	006b6375 	rsbeq	r6, fp, r5, ror r3
 1d4:	73756f6d 	cmnvc	r5, #436	; 0x1b4
 1d8:	63410065 	movtvs	r0, #4197	; 0x1065
 1dc:	61766974 	cmnvs	r6, r4, ror r9
 1e0:	6f526574 	svcvs	0x00526574
 1e4:	656b0077 	strbvs	r0, [fp, #-119]!	; 0xffffff89
 1e8:	655f6279 	ldrbvs	r6, [pc, #-633]	; ffffff77 <keyb_state+0xdfffa203>
 1ec:	6e61686e 	cdpvs	8, 6, cr6, cr1, cr14, {3}
 1f0:	00646563 	rsbeq	r6, r4, r3, ror #10
 1f4:	532f3a5a 			; <UNDEFINED> instruction: 0x532f3a5a
 1f8:	326c6570 	rsbcc	r6, ip, #112, 10	; 0x1c000000
 1fc:	6570532f 	ldrbvs	r5, [r0, #-815]!	; 0xfffffcd1
 200:	656b2f6c 	strbvs	r2, [fp, #-3948]!	; 0xfffff094
 204:	64617079 	strbtvs	r7, [r1], #-121	; 0xffffff87
 208:	6972645f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, sp, lr}^
 20c:	2e726576 	mrccs	5, 3, r6, cr2, cr6, {3}
 210:	65520063 	ldrbvs	r0, [r2, #-99]	; 0xffffff9d
 214:	6f436461 	svcvs	0x00436461
 218:	6e6d756c 	cdpvs	5, 6, cr7, cr13, cr12, {3}
 21c:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 220:	74735f62 	ldrbtvc	r5, [r3], #-3938	; 0xfffff09e
 224:	00657461 	rsbeq	r7, r5, r1, ror #8
 228:	532f3a5a 			; <UNDEFINED> instruction: 0x532f3a5a
 22c:	326c6570 	rsbcc	r6, ip, #112, 10	; 0x1c000000
 230:	6570532f 	ldrbvs	r5, [r0, #-815]!	; 0xfffffcd1
 234:	74732f6c 	ldrbtvc	r2, [r3], #-3948	; 0xfffff094
 238:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 23c:	00632e70 	rsbeq	r2, r3, r0, ror lr
 240:	5f707061 	svcpl	0x00707061
 244:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 248:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 24c:	7473006e 	ldrbtvc	r0, [r3], #-110	; 0xffffff92
 250:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 254:	4f500070 	svcmi	0x00500070
 258:	43454a42 	movtmi	r4, #23106	; 0x5a42
 25c:	65640054 	strbvs	r0, [r4, #-84]!	; 0xffffffac
 260:	5f79616c 	svcpl	0x0079616c
 264:	6c6c696d 			; <UNDEFINED> instruction: 0x6c6c696d
 268:	73610069 	cmnvc	r1, #105	; 0x69
 26c:	5f696963 	svcpl	0x00696963
 270:	6f746f67 	svcvs	0x00746f67
 274:	61007978 	tstvs	r0, r8, ror r9
 278:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 27c:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 280:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 284:	6100646d 	tstvs	r0, sp, ror #8
 288:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 28c:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 290:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 294:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
 298:	00726165 	rsbseq	r6, r2, r5, ror #2
 29c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 2a0:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 2a4:	5f657469 	svcpl	0x00657469
 2a8:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 2ac:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 2b0:	5a007265 	bpl	1cc4c <startup-0x1ffe33b4>
 2b4:	70532f3a 	subsvc	r2, r3, sl, lsr pc
 2b8:	2f326c65 	svccs	0x00326c65
 2bc:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
 2c0:	6373612f 	cmnvs	r3, #-1073741813	; 0xc000000b
 2c4:	645f6969 	ldrbvs	r6, [pc], #-2409	; 2cc <startup-0x1ffffd34>
 2c8:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 2cc:	632e7961 			; <UNDEFINED> instruction: 0x632e7961
 2d0:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 2d4:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
 2d8:	736e3035 	cmnvc	lr, #53	; 0x35
 2dc:	63736100 	cmnvs	r3, #0, 2
 2e0:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 2e4:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 2e8:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 2ec:	73610061 	cmnvc	r1, #97	; 0x61
 2f0:	5f696963 	svcpl	0x00696963
 2f4:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 2f8:	6174735f 	cmnvs	r4, pc, asr r3
 2fc:	00737574 	rsbseq	r7, r3, r4, ror r5
 300:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 304:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
 308:	635f6461 	cmpvs	pc, #1627389952	; 0x61000000
 30c:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 310:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 314:	73610072 	cmnvc	r1, #114	; 0x72
 318:	5f696963 	svcpl	0x00696963
 31c:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 320:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 324:	65640061 	strbvs	r0, [r4, #-97]!	; 0xffffff9f
 328:	5f79616c 	svcpl	0x0079616c
 32c:	7263696d 	rsbvc	r6, r3, #1785856	; 0x1b4000
 330:	6461006f 	strbtvs	r0, [r1], #-111	; 0xffffff91
 334:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
 338:	6d6f6300 	stclvs	3, cr6, [pc, #-0]	; 340 <startup-0x1ffffcc0>
 33c:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
 340:	74796200 	ldrbtvc	r6, [r9], #-512	; 0xfffffe00
 344:	73610065 	cmnvc	r1, #101	; 0x65
 348:	5f696963 	svcpl	0x00696963
 34c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 350:	68635f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 354:	61007261 	tstvs	r0, r1, ror #4
 358:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 35c:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 360:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 364:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
 368:	73610074 	cmnvc	r1, #116	; 0x74
 36c:	5f696963 	svcpl	0x00696963
 370:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 374:	74696800 	strbtvc	r6, [r9], #-2048	; 0xfffff800
 378:	6f725f73 	svcvs	0x00725f73
 37c:	6f00666f 	svcvs	0x0000666f
 380:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
 384:	00783274 	rsbseq	r3, r8, r4, ror r2
 388:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 38c:	6a626f5f 	bvs	189c110 <startup-0x1e763ef0>
 390:	00746365 	rsbseq	r6, r4, r5, ror #6
 394:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
 398:	756f6d5f 	strbvc	r6, [pc, #-3423]!	; fffff641 <keyb_state+0xdfff98cd>
 39c:	626f6573 	rsbvs	r6, pc, #482344960	; 0x1cc00000
 3a0:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 3a4:	2f3a5a00 	svccs	0x003a5a00
 3a8:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
 3ac:	70532f32 	subsvc	r2, r3, r2, lsr pc
 3b0:	672f6c65 	strvs	r6, [pc, -r5, ror #24]!
 3b4:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 3b8:	645f6369 	ldrbvs	r6, [pc], #-873	; 3c0 <startup-0x1ffffc40>
 3bc:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 3c0:	00632e72 	rsbeq	r2, r3, r2, ror lr
 3c4:	7366666f 	cmnvc	r6, #116391936	; 0x6f00000
 3c8:	79317465 	ldmdbvc	r1!, {r0, r2, r5, r6, sl, ip, sp, lr}
 3cc:	61726700 	cmnvs	r2, r0, lsl #14
 3d0:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 3d4:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 3d8:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
 3dc:	00657a69 	rsbeq	r7, r5, r9, ror #20
 3e0:	7366666f 	cmnvc	r6, #116391936	; 0x6f00000
 3e4:	78317465 	ldmdavc	r1!, {r0, r2, r5, r6, sl, ip, sp, lr}
 3e8:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 3ec:	75645f65 	strbvc	r5, [r4, #-3941]!	; 0xfffff09b
 3f0:	635f6b63 	cmpvs	pc, #101376	; 0x18c00
 3f4:	626f7461 	rsbvs	r7, pc, #1627389952	; 0x61000000
 3f8:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 3fc:	61726700 	cmnvs	r2, r0, lsl #14
 400:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 404:	7869705f 	stmdavc	r9!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
 408:	735f6c65 	cmpvc	pc, #25856	; 0x6500
 40c:	6d007465 	cfstrsvs	mvf7, [r0, #-404]	; 0xfffffe6c
 410:	5f65766f 	svcpl	0x0065766f
 414:	6f746163 	svcvs	0x00746163
 418:	63656a62 	cmnvs	r5, #401408	; 0x62000
 41c:	666f0074 			; <UNDEFINED> instruction: 0x666f0074
 420:	74657366 	strbtvc	r7, [r5], #-870	; 0xfffffc9a
 424:	73007932 	movwvc	r7, #2354	; 0x932
 428:	6f5f7465 	svcvs	0x005f7465
 42c:	63656a62 	cmnvs	r5, #401408	; 0x62000
 430:	70735f74 	rsbsvc	r5, r3, r4, ror pc
 434:	00646565 	rsbeq	r6, r4, r5, ror #10
 438:	63617865 	cmnvs	r1, #6619136	; 0x650000
 43c:	626f5f74 	rsbvs	r5, pc, #116, 30	; 0x1d0
 440:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 444:	766f5f73 	uqsub16vc	r5, pc, r3	; <UNPREDICTABLE>
 448:	616c7265 	cmnvs	ip, r5, ror #4
 44c:	6f6d0070 	svcvs	0x006d0070
 450:	6a5f6576 	bvs	17d9a30 <startup-0x1e8265d0>
 454:	5f706d75 	svcpl	0x00706d75
 458:	6f746163 	svcvs	0x00746163
 45c:	63656a62 	cmnvs	r5, #401408	; 0x62000
 460:	65670074 	strbvs	r0, [r7, #-116]!	; 0xffffff8c
 464:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 468:	635f6972 	cmpvs	pc, #1867776	; 0x1c8000
 46c:	63007461 	movwvs	r7, #1121	; 0x461
 470:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 474:	6a626f5f 	bvs	189c1f8 <startup-0x1e763e08>
 478:	00746365 	rsbseq	r6, r4, r5, ror #6
 47c:	70617267 	rsbvc	r7, r1, r7, ror #4
 480:	5f636968 	svcpl	0x00636968
 484:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0xfffff690
 488:	6c635f6c 	stclvs	15, cr5, [r3], #-432	; 0xfffffe50
 48c:	00726165 	rsbseq	r6, r2, r5, ror #2
 490:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 494:	73007864 	movwvc	r7, #2148	; 0x864
 498:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 49c:	72670079 	rsbvc	r0, r7, #121	; 0x79
 4a0:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 4a4:	6c635f63 	stclvs	15, cr5, [r3], #-396	; 0xfffffe74
 4a8:	5f726165 	svcpl	0x00726165
 4ac:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
 4b0:	Address 0x000004b0 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	0000005c 	andeq	r0, r0, ip, asr r0
  20:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  24:	41018e02 	tstmi	r1, r2, lsl #28
  28:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  2c:	00000007 	andeq	r0, r0, r7
  30:	0000001c 	andeq	r0, r0, ip, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	2000006c 	andcs	r0, r0, ip, rrx
  3c:	00000054 	andeq	r0, r0, r4, asr r0
  40:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  44:	41018e02 	tstmi	r1, r2, lsl #28
  48:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  4c:	00000007 	andeq	r0, r0, r7
  50:	0000001c 	andeq	r0, r0, ip, lsl r0
  54:	00000000 	andeq	r0, r0, r0
  58:	200000c0 	andcs	r0, r0, r0, asr #1
  5c:	000000a8 	andeq	r0, r0, r8, lsr #1
  60:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
  64:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
  68:	280e4101 	stmdacs	lr, {r0, r8, lr}
  6c:	00070d41 	andeq	r0, r7, r1, asr #26
  70:	0000000c 	andeq	r0, r0, ip
  74:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  78:	7c020001 	stcvc	0, cr0, [r2], {1}
  7c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  80:	0000000c 	andeq	r0, r0, ip
  84:	00000070 	andeq	r0, r0, r0, ror r0
  88:	20000000 	andcs	r0, r0, r0
  8c:	0000000c 	andeq	r0, r0, ip
  90:	00000018 	andeq	r0, r0, r8, lsl r0
  94:	00000070 	andeq	r0, r0, r0, ror r0
  98:	20000168 	andcs	r0, r0, r8, ror #2
  9c:	00000050 	andeq	r0, r0, r0, asr r0
  a0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  a4:	41018e02 	tstmi	r1, r2, lsl #28
  a8:	0000070d 	andeq	r0, r0, sp, lsl #14
  ac:	0000001c 	andeq	r0, r0, ip, lsl r0
  b0:	00000070 	andeq	r0, r0, r0, ror r0
  b4:	200001b8 			; <UNDEFINED> instruction: 0x200001b8
  b8:	00000050 	andeq	r0, r0, r0, asr r0
  bc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  c0:	41018e02 	tstmi	r1, r2, lsl #28
  c4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  c8:	00000007 	andeq	r0, r0, r7
  cc:	0000000c 	andeq	r0, r0, ip
  d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  d4:	7c020001 	stcvc	0, cr0, [r2], {1}
  d8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  dc:	00000018 	andeq	r0, r0, r8, lsl r0
  e0:	000000cc 	andeq	r0, r0, ip, asr #1
  e4:	20000208 	andcs	r0, r0, r8, lsl #4
  e8:	00000044 	andeq	r0, r0, r4, asr #32
  ec:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  f0:	41018e02 	tstmi	r1, r2, lsl #28
  f4:	0000070d 	andeq	r0, r0, sp, lsl #14
  f8:	0000001c 	andeq	r0, r0, ip, lsl r0
  fc:	000000cc 	andeq	r0, r0, ip, asr #1
 100:	2000024c 	andcs	r0, r0, ip, asr #4
 104:	00000046 	andeq	r0, r0, r6, asr #32
 108:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 10c:	41018e02 	tstmi	r1, r2, lsl #28
 110:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 114:	00000007 	andeq	r0, r0, r7
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	000000cc 	andeq	r0, r0, ip, asr #1
 120:	20000292 	mulcs	r0, r2, r2
 124:	0000005c 	andeq	r0, r0, ip, asr r0
 128:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 12c:	41018e02 	tstmi	r1, r2, lsl #28
 130:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 134:	00000007 	andeq	r0, r0, r7
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	000000cc 	andeq	r0, r0, ip, asr #1
 140:	200002ee 	andcs	r0, r0, lr, ror #5
 144:	00000032 	andeq	r0, r0, r2, lsr r0
 148:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 14c:	41018e02 	tstmi	r1, r2, lsl #28
 150:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 154:	00000007 	andeq	r0, r0, r7
 158:	0000001c 	andeq	r0, r0, ip, lsl r0
 15c:	000000cc 	andeq	r0, r0, ip, asr #1
 160:	20000320 	andcs	r0, r0, r0, lsr #6
 164:	0000003c 	andeq	r0, r0, ip, lsr r0
 168:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 16c:	41018e02 	tstmi	r1, r2, lsl #28
 170:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 174:	00000007 	andeq	r0, r0, r7
 178:	0000001c 	andeq	r0, r0, ip, lsl r0
 17c:	000000cc 	andeq	r0, r0, ip, asr #1
 180:	2000035c 	andcs	r0, r0, ip, asr r3
 184:	00000030 	andeq	r0, r0, r0, lsr r0
 188:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 18c:	41018e02 	tstmi	r1, r2, lsl #28
 190:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 194:	00000007 	andeq	r0, r0, r7
 198:	0000001c 	andeq	r0, r0, ip, lsl r0
 19c:	000000cc 	andeq	r0, r0, ip, asr #1
 1a0:	2000038c 	andcs	r0, r0, ip, lsl #7
 1a4:	00000034 	andeq	r0, r0, r4, lsr r0
 1a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1ac:	41018e02 	tstmi	r1, r2, lsl #28
 1b0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1b4:	00000007 	andeq	r0, r0, r7
 1b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1bc:	000000cc 	andeq	r0, r0, ip, asr #1
 1c0:	200003c0 	andcs	r0, r0, r0, asr #7
 1c4:	00000040 	andeq	r0, r0, r0, asr #32
 1c8:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 1cc:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 1d0:	180e4101 	stmdane	lr, {r0, r8, lr}
 1d4:	00070d41 	andeq	r0, r7, r1, asr #26
 1d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1dc:	000000cc 	andeq	r0, r0, ip, asr #1
 1e0:	20000400 	andcs	r0, r0, r0, lsl #8
 1e4:	00000040 	andeq	r0, r0, r0, asr #32
 1e8:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 1ec:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 1f0:	180e4101 	stmdane	lr, {r0, r8, lr}
 1f4:	00070d41 	andeq	r0, r7, r1, asr #26
 1f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1fc:	000000cc 	andeq	r0, r0, ip, asr #1
 200:	20000440 	andcs	r0, r0, r0, asr #8
 204:	0000002a 	andeq	r0, r0, sl, lsr #32
 208:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 20c:	41018e02 	tstmi	r1, r2, lsl #28
 210:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 214:	00000007 	andeq	r0, r0, r7
 218:	0000001c 	andeq	r0, r0, ip, lsl r0
 21c:	000000cc 	andeq	r0, r0, ip, asr #1
 220:	2000046a 	andcs	r0, r0, sl, ror #8
 224:	0000002a 	andeq	r0, r0, sl, lsr #32
 228:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 22c:	41018e02 	tstmi	r1, r2, lsl #28
 230:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 234:	00000007 	andeq	r0, r0, r7
 238:	00000018 	andeq	r0, r0, r8, lsl r0
 23c:	000000cc 	andeq	r0, r0, ip, asr #1
 240:	20000494 	mulcs	r0, r4, r4
 244:	0000009a 	muleq	r0, sl, r0
 248:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 24c:	41018e02 	tstmi	r1, r2, lsl #28
 250:	0000070d 	andeq	r0, r0, sp, lsl #14
 254:	0000001c 	andeq	r0, r0, ip, lsl r0
 258:	000000cc 	andeq	r0, r0, ip, asr #1
 25c:	2000052e 	andcs	r0, r0, lr, lsr #10
 260:	0000003c 	andeq	r0, r0, ip, lsr r0
 264:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 268:	41018e02 	tstmi	r1, r2, lsl #28
 26c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 270:	00000007 	andeq	r0, r0, r7
 274:	0000001c 	andeq	r0, r0, ip, lsl r0
 278:	000000cc 	andeq	r0, r0, ip, asr #1
 27c:	2000056a 	andcs	r0, r0, sl, ror #10
 280:	00000038 	andeq	r0, r0, r8, lsr r0
 284:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 288:	41018e02 	tstmi	r1, r2, lsl #28
 28c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 290:	00000007 	andeq	r0, r0, r7
 294:	0000000c 	andeq	r0, r0, ip
 298:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 29c:	7c020001 	stcvc	0, cr0, [r2], {1}
 2a0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2a4:	0000000c 	andeq	r0, r0, ip
 2a8:	00000294 	muleq	r0, r4, r2
 2ac:	200005a4 	andcs	r0, r0, r4, lsr #11
 2b0:	00000006 	andeq	r0, r0, r6
 2b4:	0000000c 	andeq	r0, r0, ip
 2b8:	00000294 	muleq	r0, r4, r2
 2bc:	200005aa 	andcs	r0, r0, sl, lsr #11
 2c0:	00000006 	andeq	r0, r0, r6
 2c4:	0000000c 	andeq	r0, r0, ip
 2c8:	00000294 	muleq	r0, r4, r2
 2cc:	200005b0 			; <UNDEFINED> instruction: 0x200005b0
 2d0:	00000006 	andeq	r0, r0, r6
 2d4:	0000000c 	andeq	r0, r0, ip
 2d8:	00000294 	muleq	r0, r4, r2
 2dc:	200005b6 			; <UNDEFINED> instruction: 0x200005b6
 2e0:	00000006 	andeq	r0, r0, r6
 2e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2e8:	00000294 	muleq	r0, r4, r2
 2ec:	200005bc 			; <UNDEFINED> instruction: 0x200005bc
 2f0:	0000016e 	andeq	r0, r0, lr, ror #2
 2f4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2f8:	41018e02 	tstmi	r1, r2, lsl #28
 2fc:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 300:	00000007 	andeq	r0, r0, r7
 304:	0000001c 	andeq	r0, r0, ip, lsl r0
 308:	00000294 	muleq	r0, r4, r2
 30c:	2000072a 	andcs	r0, r0, sl, lsr #14
 310:	0000016e 	andeq	r0, r0, lr, ror #2
 314:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 318:	41018e02 	tstmi	r1, r2, lsl #28
 31c:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 320:	00000007 	andeq	r0, r0, r7
 324:	0000001c 	andeq	r0, r0, ip, lsl r0
 328:	00000294 	muleq	r0, r4, r2
 32c:	20000898 	mulcs	r0, r8, r8
 330:	0000003c 	andeq	r0, r0, ip, lsr r0
 334:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 338:	41018e02 	tstmi	r1, r2, lsl #28
 33c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 340:	00000007 	andeq	r0, r0, r7
 344:	0000001c 	andeq	r0, r0, ip, lsl r0
 348:	00000294 	muleq	r0, r4, r2
 34c:	200008d4 	ldrdcs	r0, [r0], -r4
 350:	00000058 	andeq	r0, r0, r8, asr r0
 354:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 358:	41018e02 	tstmi	r1, r2, lsl #28
 35c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 360:	00000007 	andeq	r0, r0, r7
 364:	0000001c 	andeq	r0, r0, ip, lsl r0
 368:	00000294 	muleq	r0, r4, r2
 36c:	2000092c 	andcs	r0, r0, ip, lsr #18
 370:	0000003a 	andeq	r0, r0, sl, lsr r0
 374:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 378:	41018e02 	tstmi	r1, r2, lsl #28
 37c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 380:	00000007 	andeq	r0, r0, r7
 384:	0000001c 	andeq	r0, r0, ip, lsl r0
 388:	00000294 	muleq	r0, r4, r2
 38c:	20000966 	andcs	r0, r0, r6, ror #18
 390:	00000026 	andeq	r0, r0, r6, lsr #32
 394:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 398:	41018e02 	tstmi	r1, r2, lsl #28
 39c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 3a0:	00000007 	andeq	r0, r0, r7
 3a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3a8:	00000294 	muleq	r0, r4, r2
 3ac:	2000098c 	andcs	r0, r0, ip, lsl #19
 3b0:	0000001e 	andeq	r0, r0, lr, lsl r0
 3b4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3b8:	41018e02 	tstmi	r1, r2, lsl #28
 3bc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 3c0:	00000007 	andeq	r0, r0, r7
 3c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3c8:	00000294 	muleq	r0, r4, r2
 3cc:	200009aa 	andcs	r0, r0, sl, lsr #19
 3d0:	00000020 	andeq	r0, r0, r0, lsr #32
 3d4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3d8:	41018e02 	tstmi	r1, r2, lsl #28
 3dc:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 3e0:	00000007 	andeq	r0, r0, r7
 3e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3e8:	00000294 	muleq	r0, r4, r2
 3ec:	200009ca 	andcs	r0, r0, sl, asr #19
 3f0:	0000002c 	andeq	r0, r0, ip, lsr #32
 3f4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3f8:	41018e02 	tstmi	r1, r2, lsl #28
 3fc:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 400:	00000007 	andeq	r0, r0, r7
 404:	0000000c 	andeq	r0, r0, ip
 408:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 40c:	7c010001 	stcvc	0, cr0, [r1], {1}
 410:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 414:	0000000c 	andeq	r0, r0, ip
 418:	00000404 	andeq	r0, r0, r4, lsl #8
 41c:	200009f9 	strdcs	r0, [r0], -r9
 420:	0000010a 	andeq	r0, r0, sl, lsl #2

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000168 	andcs	r0, r0, r8, ror #2
   4:	20000208 	andcs	r0, r0, r8, lsl #4
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
