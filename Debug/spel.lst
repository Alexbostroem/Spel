
Debug/spel:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
 *
 */
__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 f8b4 	bl	20000170 <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <ActivateRow>:
#include "define_global.h"

//GLOBAL
int keyb_state = 0;

void ActivateRow( unsigned int row ) {
20000010:	b580      	push	{r7, lr}
20000012:	b082      	sub	sp, #8
20000014:	af00      	add	r7, sp, #0
20000016:	6078      	str	r0, [r7, #4]
20000018:	687b      	ldr	r3, [r7, #4]
2000001a:	2b04      	cmp	r3, #4
2000001c:	d819      	bhi.n	20000052 <ActivateRow+0x42>
2000001e:	687b      	ldr	r3, [r7, #4]
20000020:	009a      	lsls	r2, r3, #2
20000022:	4b0e      	ldr	r3, [pc, #56]	; (2000005c <ActivateRow+0x4c>)
20000024:	18d3      	adds	r3, r2, r3
20000026:	681b      	ldr	r3, [r3, #0]
20000028:	469f      	mov	pc, r3

	switch( row )
	{
	case 1: *GPIO_D_ODR_HIGH = 0x10; break;
2000002a:	4b0d      	ldr	r3, [pc, #52]	; (20000060 <ActivateRow+0x50>)
2000002c:	2210      	movs	r2, #16
2000002e:	701a      	strb	r2, [r3, #0]
20000030:	e00f      	b.n	20000052 <ActivateRow+0x42>
	case 2: *GPIO_D_ODR_HIGH = 0x20; break;
20000032:	4b0b      	ldr	r3, [pc, #44]	; (20000060 <ActivateRow+0x50>)
20000034:	2220      	movs	r2, #32
20000036:	701a      	strb	r2, [r3, #0]
20000038:	e00b      	b.n	20000052 <ActivateRow+0x42>
	case 3: *GPIO_D_ODR_HIGH = 0x40; break;
2000003a:	4b09      	ldr	r3, [pc, #36]	; (20000060 <ActivateRow+0x50>)
2000003c:	2240      	movs	r2, #64	; 0x40
2000003e:	701a      	strb	r2, [r3, #0]
20000040:	e007      	b.n	20000052 <ActivateRow+0x42>
	case 4: *GPIO_D_ODR_HIGH = 0x80; break;
20000042:	4b07      	ldr	r3, [pc, #28]	; (20000060 <ActivateRow+0x50>)
20000044:	2280      	movs	r2, #128	; 0x80
20000046:	701a      	strb	r2, [r3, #0]
20000048:	e003      	b.n	20000052 <ActivateRow+0x42>
	//case 5: *GPIO_D_ODR_HIGH = 0xF0; break;
	case 0: *GPIO_D_ODR_HIGH = 0x00; break;
2000004a:	4b05      	ldr	r3, [pc, #20]	; (20000060 <ActivateRow+0x50>)
2000004c:	2200      	movs	r2, #0
2000004e:	701a      	strb	r2, [r3, #0]
20000050:	46c0      	nop			; (mov r8, r8)
	}
}
20000052:	46c0      	nop			; (mov r8, r8)
20000054:	46bd      	mov	sp, r7
20000056:	b002      	add	sp, #8
20000058:	bd80      	pop	{r7, pc}
2000005a:	46c0      	nop			; (mov r8, r8)
2000005c:	200067c4 	andcs	r6, r0, r4, asr #15
20000060:	40020c15 	andmi	r0, r2, r5, lsl ip

20000064 <ReadColumn>:

int ReadColumn( void )
{ 
20000064:	b580      	push	{r7, lr}
20000066:	b082      	sub	sp, #8
20000068:	af00      	add	r7, sp, #0
unsigned char c;
c = *GPIO_D_IDR_HIGH;
2000006a:	4a12      	ldr	r2, [pc, #72]	; (200000b4 <ReadColumn+0x50>)
2000006c:	1dfb      	adds	r3, r7, #7
2000006e:	7812      	ldrb	r2, [r2, #0]
20000070:	701a      	strb	r2, [r3, #0]
if ( c & 0x8 ) return 4;
20000072:	1dfb      	adds	r3, r7, #7
20000074:	781b      	ldrb	r3, [r3, #0]
20000076:	2208      	movs	r2, #8
20000078:	4013      	ands	r3, r2
2000007a:	d001      	beq.n	20000080 <ReadColumn+0x1c>
2000007c:	2304      	movs	r3, #4
2000007e:	e015      	b.n	200000ac <ReadColumn+0x48>
if ( c & 0x4 ) return 3;
20000080:	1dfb      	adds	r3, r7, #7
20000082:	781b      	ldrb	r3, [r3, #0]
20000084:	2204      	movs	r2, #4
20000086:	4013      	ands	r3, r2
20000088:	d001      	beq.n	2000008e <ReadColumn+0x2a>
2000008a:	2303      	movs	r3, #3
2000008c:	e00e      	b.n	200000ac <ReadColumn+0x48>
if ( c & 0x2 ) return 2;
2000008e:	1dfb      	adds	r3, r7, #7
20000090:	781b      	ldrb	r3, [r3, #0]
20000092:	2202      	movs	r2, #2
20000094:	4013      	ands	r3, r2
20000096:	d001      	beq.n	2000009c <ReadColumn+0x38>
20000098:	2302      	movs	r3, #2
2000009a:	e007      	b.n	200000ac <ReadColumn+0x48>
if ( c & 0x1 ) return 1;
2000009c:	1dfb      	adds	r3, r7, #7
2000009e:	781b      	ldrb	r3, [r3, #0]
200000a0:	2201      	movs	r2, #1
200000a2:	4013      	ands	r3, r2
200000a4:	d001      	beq.n	200000aa <ReadColumn+0x46>
200000a6:	2301      	movs	r3, #1
200000a8:	e000      	b.n	200000ac <ReadColumn+0x48>
return 0;
200000aa:	2300      	movs	r3, #0
}
200000ac:	0018      	movs	r0, r3
200000ae:	46bd      	mov	sp, r7
200000b0:	b002      	add	sp, #8
200000b2:	bd80      	pop	{r7, pc}
200000b4:	40020c11 	andmi	r0, r2, r1, lsl ip

200000b8 <keyb>:
		
		ActivateRow(0);
		return 0xFF;
} 
*/
unsigned char keyb(void) {
200000b8:	b590      	push	{r4, r7, lr}
200000ba:	b087      	sub	sp, #28
200000bc:	af00      	add	r7, sp, #0
    
unsigned char key[]={1,2,3,0xA,4,5,6,0xB,7,8,9,0xC,0xE,0,0xF,0xD};
200000be:	003b      	movs	r3, r7
200000c0:	4a16      	ldr	r2, [pc, #88]	; (2000011c <keyb+0x64>)
200000c2:	ca13      	ldmia	r2!, {r0, r1, r4}
200000c4:	c313      	stmia	r3!, {r0, r1, r4}
200000c6:	6812      	ldr	r2, [r2, #0]
200000c8:	601a      	str	r2, [r3, #0]
int row, col;
for(row=1; row <=4 ; row++ ) {
200000ca:	2301      	movs	r3, #1
200000cc:	617b      	str	r3, [r7, #20]
200000ce:	e019      	b.n	20000104 <keyb+0x4c>
ActivateRow( row );
200000d0:	697b      	ldr	r3, [r7, #20]
200000d2:	0018      	movs	r0, r3
200000d4:	f7ff ff9c 	bl	20000010 <ActivateRow>
    if( (col = ReadColumn () ) ) {
200000d8:	f7ff ffc4 	bl	20000064 <ReadColumn>
200000dc:	0003      	movs	r3, r0
200000de:	613b      	str	r3, [r7, #16]
200000e0:	693b      	ldr	r3, [r7, #16]
200000e2:	2b00      	cmp	r3, #0
200000e4:	d00b      	beq.n	200000fe <keyb+0x46>
        ActivateRow( 0 );
200000e6:	2000      	movs	r0, #0
200000e8:	f7ff ff92 	bl	20000010 <ActivateRow>
        return key [4*(row-1)+(col-1) ];
200000ec:	697b      	ldr	r3, [r7, #20]
200000ee:	3b01      	subs	r3, #1
200000f0:	009a      	lsls	r2, r3, #2
200000f2:	693b      	ldr	r3, [r7, #16]
200000f4:	3b01      	subs	r3, #1
200000f6:	18d3      	adds	r3, r2, r3
200000f8:	003a      	movs	r2, r7
200000fa:	5cd3      	ldrb	r3, [r2, r3]
200000fc:	e009      	b.n	20000112 <keyb+0x5a>
for(row=1; row <=4 ; row++ ) {
200000fe:	697b      	ldr	r3, [r7, #20]
20000100:	3301      	adds	r3, #1
20000102:	617b      	str	r3, [r7, #20]
20000104:	697b      	ldr	r3, [r7, #20]
20000106:	2b04      	cmp	r3, #4
20000108:	dde2      	ble.n	200000d0 <keyb+0x18>
        }
    }
    ActivateRow( 0 );
2000010a:	2000      	movs	r0, #0
2000010c:	f7ff ff80 	bl	20000010 <ActivateRow>
return 0xFF;
20000110:	23ff      	movs	r3, #255	; 0xff
}
20000112:	0018      	movs	r0, r3
20000114:	46bd      	mov	sp, r7
20000116:	b007      	add	sp, #28
20000118:	bd90      	pop	{r4, r7, pc}
2000011a:	46c0      	nop			; (mov r8, r8)
2000011c:	200067d8 	ldrdcs	r6, [r0], -r8

20000120 <app_init>:
#include "ascii_display.h"
#include "grafik.h"
#include "graphic_driver.h"
#include "keypad_driver.h"

void app_init(void) {
20000120:	b580      	push	{r7, lr}
20000122:	af00      	add	r7, sp, #0
	*GPIO_D_MODER &= 0x00000000;	// Nollställer bit 31-16 resten kvarstår
20000124:	4b0e      	ldr	r3, [pc, #56]	; (20000160 <app_init+0x40>)
20000126:	681b      	ldr	r3, [r3, #0]
20000128:	4b0d      	ldr	r3, [pc, #52]	; (20000160 <app_init+0x40>)
2000012a:	2200      	movs	r2, #0
2000012c:	601a      	str	r2, [r3, #0]
	*GPIO_D_MODER |= 0x55005555;	// 0101 0101 0101 0101 (bit 31-16) resten kvarstår, bit 31-16 utsignaler med varje pin representerade med 2 bitar
2000012e:	4b0c      	ldr	r3, [pc, #48]	; (20000160 <app_init+0x40>)
20000130:	681a      	ldr	r2, [r3, #0]
20000132:	4b0b      	ldr	r3, [pc, #44]	; (20000160 <app_init+0x40>)
20000134:	490b      	ldr	r1, [pc, #44]	; (20000164 <app_init+0x44>)
20000136:	430a      	orrs	r2, r1
20000138:	601a      	str	r2, [r3, #0]
	*GPIO_D_OTYPER &= 0x0000;	//	Nollställ bit 15-12 i OTYPER (push-pull), bit 11-8 kvarstår. utpinnar som push-pull
2000013a:	4b0b      	ldr	r3, [pc, #44]	; (20000168 <app_init+0x48>)
2000013c:	881b      	ldrh	r3, [r3, #0]
2000013e:	4b0a      	ldr	r3, [pc, #40]	; (20000168 <app_init+0x48>)
20000140:	2200      	movs	r2, #0
20000142:	801a      	strh	r2, [r3, #0]
	*((unsigned long *) GPIO_D_BASE + 0x0E) &= 0x00000000;
20000144:	4b09      	ldr	r3, [pc, #36]	; (2000016c <app_init+0x4c>)
20000146:	2200      	movs	r2, #0
20000148:	601a      	str	r2, [r3, #0]
	*((unsigned long *) GPIO_D_BASE + 0x0E) |= 0x00AA0000;	//	Sätt pull-down (1010) på inpinnar i register PUPDR(2bit/pin)
2000014a:	4b08      	ldr	r3, [pc, #32]	; (2000016c <app_init+0x4c>)
2000014c:	681a      	ldr	r2, [r3, #0]
2000014e:	4b07      	ldr	r3, [pc, #28]	; (2000016c <app_init+0x4c>)
20000150:	21aa      	movs	r1, #170	; 0xaa
20000152:	0409      	lsls	r1, r1, #16
20000154:	430a      	orrs	r2, r1
20000156:	601a      	str	r2, [r3, #0]
}
20000158:	46c0      	nop			; (mov r8, r8)
2000015a:	46bd      	mov	sp, r7
2000015c:	bd80      	pop	{r7, pc}
2000015e:	46c0      	nop			; (mov r8, r8)
20000160:	40020c00 	andmi	r0, r2, r0, lsl #24
20000164:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab
20000168:	40020c08 	andmi	r0, r2, r8, lsl #24
2000016c:	40020c38 	andmi	r0, r2, r8, lsr ip

20000170 <main>:

void main(void)
{
20000170:	b590      	push	{r4, r7, lr}
20000172:	b085      	sub	sp, #20
20000174:	af00      	add	r7, sp, #0
	app_init();
20000176:	f7ff ffd3 	bl	20000120 <app_init>
	POBJECT m = &mouse;
2000017a:	4b1c      	ldr	r3, [pc, #112]	; (200001ec <main+0x7c>)
2000017c:	60fb      	str	r3, [r7, #12]
	POBJECT k = &cat;
2000017e:	4b1c      	ldr	r3, [pc, #112]	; (200001f0 <main+0x80>)
20000180:	60bb      	str	r3, [r7, #8]
	POBJECT b = &bird;
20000182:	4b1c      	ldr	r3, [pc, #112]	; (200001f4 <main+0x84>)
20000184:	607b      	str	r3, [r7, #4]
	char c;
	graphic_initialize();
20000186:	f000 fa05 	bl	20000594 <graphic_initialize>
	graphic_clear_screen();
2000018a:	f000 fa06 	bl	2000059a <graphic_clear_screen>
	
	while(1)
			{
				m->move(m);
2000018e:	68fb      	ldr	r3, [r7, #12]
20000190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20000192:	68fa      	ldr	r2, [r7, #12]
20000194:	0010      	movs	r0, r2
20000196:	4798      	blx	r3
				k->move(k);
20000198:	68bb      	ldr	r3, [r7, #8]
2000019a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000019c:	68ba      	ldr	r2, [r7, #8]
2000019e:	0010      	movs	r0, r2
200001a0:	4798      	blx	r3
				b->move(b);
200001a2:	687b      	ldr	r3, [r7, #4]
200001a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200001a6:	687a      	ldr	r2, [r7, #4]
200001a8:	0010      	movs	r0, r2
200001aa:	4798      	blx	r3
				
				c = keyb();
200001ac:	1cfc      	adds	r4, r7, #3
200001ae:	f7ff ff83 	bl	200000b8 <keyb>
200001b2:	0003      	movs	r3, r0
200001b4:	7023      	strb	r3, [r4, #0]
        switch(c)
200001b6:	1cfb      	adds	r3, r7, #3
200001b8:	781b      	ldrb	r3, [r3, #0]
200001ba:	2b02      	cmp	r3, #2
200001bc:	d002      	beq.n	200001c4 <main+0x54>
200001be:	2b08      	cmp	r3, #8
200001c0:	d00b      	beq.n	200001da <main+0x6a>
        {
			case 2: k->geo_number = jump; k->set_speed(k,0,-2); break;
            case 8: k->geo_number = duck; break;
                default: break;
200001c2:	e00e      	b.n	200001e2 <main+0x72>
			case 2: k->geo_number = jump; k->set_speed(k,0,-2); break;
200001c4:	68bb      	ldr	r3, [r7, #8]
200001c6:	2202      	movs	r2, #2
200001c8:	611a      	str	r2, [r3, #16]
200001ca:	68bb      	ldr	r3, [r7, #8]
200001cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200001ce:	2202      	movs	r2, #2
200001d0:	4252      	negs	r2, r2
200001d2:	68b8      	ldr	r0, [r7, #8]
200001d4:	2100      	movs	r1, #0
200001d6:	4798      	blx	r3
200001d8:	e003      	b.n	200001e2 <main+0x72>
            case 8: k->geo_number = duck; break;
200001da:	68bb      	ldr	r3, [r7, #8]
200001dc:	2203      	movs	r2, #3
200001de:	611a      	str	r2, [r3, #16]
200001e0:	46c0      	nop			; (mov r8, r8)
		}
		delay_micro(200);
200001e2:	20c8      	movs	r0, #200	; 0xc8
200001e4:	f000 f82a 	bl	2000023c <delay_micro>
				m->move(m);
200001e8:	e7d1      	b.n	2000018e <main+0x1e>
200001ea:	46c0      	nop			; (mov r8, r8)
200001ec:	20006728 	andcs	r6, r0, r8, lsr #14
200001f0:	200066f4 	strdcs	r6, [r0], -r4
200001f4:	2000675c 	andcs	r6, r0, ip, asr r7

200001f8 <delay_250ns>:
// FUNKTIONER FÖR ATT SKRIVA TILL ASCII DISPLAY

#include "define_global.h"
#define SIMULATOR

void delay_250ns( void ) {
200001f8:	b580      	push	{r7, lr}
200001fa:	af00      	add	r7, sp, #0
/* SystemCoreClock = 168000000 */
    *STK_CTRL = 0;
200001fc:	4b0c      	ldr	r3, [pc, #48]	; (20000230 <delay_250ns+0x38>)
200001fe:	2200      	movs	r2, #0
20000200:	601a      	str	r2, [r3, #0]
    *STK_LOAD = ( (168/4) -1 );    // 168 cp ger 1 us -> 168/4 cp ger 0.25 us = 250 ns
20000202:	4b0c      	ldr	r3, [pc, #48]	; (20000234 <delay_250ns+0x3c>)
20000204:	2229      	movs	r2, #41	; 0x29
20000206:	601a      	str	r2, [r3, #0]
    *STK_VAL = 0;
20000208:	4b0b      	ldr	r3, [pc, #44]	; (20000238 <delay_250ns+0x40>)
2000020a:	2200      	movs	r2, #0
2000020c:	601a      	str	r2, [r3, #0]
    *STK_CTRL = 5;   	 // Bit 2 = 1 (systemklocka), bit 0 = 1 (räknare aktiv, ENABLE-bit)
2000020e:	4b08      	ldr	r3, [pc, #32]	; (20000230 <delay_250ns+0x38>)
20000210:	2205      	movs	r2, #5
20000212:	601a      	str	r2, [r3, #0]
    
    while( (*STK_CTRL & 0x10000 )== 0 );    // Väntar på att räknaren räknat ner 250ns
20000214:	46c0      	nop			; (mov r8, r8)
20000216:	4b06      	ldr	r3, [pc, #24]	; (20000230 <delay_250ns+0x38>)
20000218:	681a      	ldr	r2, [r3, #0]
2000021a:	2380      	movs	r3, #128	; 0x80
2000021c:	025b      	lsls	r3, r3, #9
2000021e:	4013      	ands	r3, r2
20000220:	d0f9      	beq.n	20000216 <delay_250ns+0x1e>
    *STK_CTRL = 0;   						 // Stäng av räknaren
20000222:	4b03      	ldr	r3, [pc, #12]	; (20000230 <delay_250ns+0x38>)
20000224:	2200      	movs	r2, #0
20000226:	601a      	str	r2, [r3, #0]
}
20000228:	46c0      	nop			; (mov r8, r8)
2000022a:	46bd      	mov	sp, r7
2000022c:	bd80      	pop	{r7, pc}
2000022e:	46c0      	nop			; (mov r8, r8)
20000230:	e000e010 	and	lr, r0, r0, lsl r0
20000234:	e000e014 	and	lr, r0, r4, lsl r0
20000238:	e000e018 	and	lr, r0, r8, lsl r0

2000023c <delay_micro>:

void delay_micro(unsigned int us) {
2000023c:	b580      	push	{r7, lr}
2000023e:	b082      	sub	sp, #8
20000240:	af00      	add	r7, sp, #0
20000242:	6078      	str	r0, [r7, #4]
    #ifdef SIMULATOR    // Simulator mycket långsammare än hårdvara
   	 us = us / 1000;
20000244:	687b      	ldr	r3, [r7, #4]
20000246:	22fa      	movs	r2, #250	; 0xfa
20000248:	0091      	lsls	r1, r2, #2
2000024a:	0018      	movs	r0, r3
2000024c:	f000 fbdc 	bl	20000a08 <__udivsi3>
20000250:	0003      	movs	r3, r0
20000252:	607b      	str	r3, [r7, #4]
   	 us++;    // För att undvika att us skulle vara 0
20000254:	687b      	ldr	r3, [r7, #4]
20000256:	3301      	adds	r3, #1
20000258:	607b      	str	r3, [r7, #4]
    #endif
    
    while( us > 0 ) {
2000025a:	e00a      	b.n	20000272 <delay_micro+0x36>
   	 delay_250ns();
2000025c:	f7ff ffcc 	bl	200001f8 <delay_250ns>
   	 delay_250ns();
20000260:	f7ff ffca 	bl	200001f8 <delay_250ns>
   	 delay_250ns();
20000264:	f7ff ffc8 	bl	200001f8 <delay_250ns>
   	 delay_250ns();    // 0.25 us * 4 = 1 us
20000268:	f7ff ffc6 	bl	200001f8 <delay_250ns>
   	 us--;
2000026c:	687b      	ldr	r3, [r7, #4]
2000026e:	3b01      	subs	r3, #1
20000270:	607b      	str	r3, [r7, #4]
    while( us > 0 ) {
20000272:	687b      	ldr	r3, [r7, #4]
20000274:	2b00      	cmp	r3, #0
20000276:	d1f1      	bne.n	2000025c <delay_micro+0x20>
    }
}
20000278:	46c0      	nop			; (mov r8, r8)
2000027a:	46c0      	nop			; (mov r8, r8)
2000027c:	46bd      	mov	sp, r7
2000027e:	b002      	add	sp, #8
20000280:	bd80      	pop	{r7, pc}

20000282 <delay_milli>:

void delay_milli(unsigned int ms) {
20000282:	b580      	push	{r7, lr}
20000284:	b084      	sub	sp, #16
20000286:	af00      	add	r7, sp, #0
20000288:	6078      	str	r0, [r7, #4]
    #ifdef SIMULATOR    // Simulator mycket långsammare än hårdvara
   	 ms = ms / 1000;
2000028a:	687b      	ldr	r3, [r7, #4]
2000028c:	22fa      	movs	r2, #250	; 0xfa
2000028e:	0091      	lsls	r1, r2, #2
20000290:	0018      	movs	r0, r3
20000292:	f000 fbb9 	bl	20000a08 <__udivsi3>
20000296:	0003      	movs	r3, r0
20000298:	607b      	str	r3, [r7, #4]
   	 ms++;    // För att undvika att ms skulle vara 0
2000029a:	687b      	ldr	r3, [r7, #4]
2000029c:	3301      	adds	r3, #1
2000029e:	607b      	str	r3, [r7, #4]
    #endif
    
    while( ms > 0 ) {
200002a0:	e015      	b.n	200002ce <delay_milli+0x4c>
   	 for (int c = 1 ; c <= 1000 ; c++) {
200002a2:	2301      	movs	r3, #1
200002a4:	60fb      	str	r3, [r7, #12]
200002a6:	e00a      	b.n	200002be <delay_milli+0x3c>
   		 delay_250ns();  // 1 us * 1000 = 1 ms
200002a8:	f7ff ffa6 	bl	200001f8 <delay_250ns>
   		 delay_250ns();
200002ac:	f7ff ffa4 	bl	200001f8 <delay_250ns>
   		 delay_250ns();
200002b0:	f7ff ffa2 	bl	200001f8 <delay_250ns>
   		 delay_250ns();
200002b4:	f7ff ffa0 	bl	200001f8 <delay_250ns>
   	 for (int c = 1 ; c <= 1000 ; c++) {
200002b8:	68fb      	ldr	r3, [r7, #12]
200002ba:	3301      	adds	r3, #1
200002bc:	60fb      	str	r3, [r7, #12]
200002be:	68fa      	ldr	r2, [r7, #12]
200002c0:	23fa      	movs	r3, #250	; 0xfa
200002c2:	009b      	lsls	r3, r3, #2
200002c4:	429a      	cmp	r2, r3
200002c6:	ddef      	ble.n	200002a8 <delay_milli+0x26>
   	 }
   	 ms--;
200002c8:	687b      	ldr	r3, [r7, #4]
200002ca:	3b01      	subs	r3, #1
200002cc:	607b      	str	r3, [r7, #4]
    while( ms > 0 ) {
200002ce:	687b      	ldr	r3, [r7, #4]
200002d0:	2b00      	cmp	r3, #0
200002d2:	d1e6      	bne.n	200002a2 <delay_milli+0x20>
    }
}
200002d4:	46c0      	nop			; (mov r8, r8)
200002d6:	46c0      	nop			; (mov r8, r8)
200002d8:	46bd      	mov	sp, r7
200002da:	b004      	add	sp, #16
200002dc:	bd80      	pop	{r7, pc}

200002de <ascii_ctrl_bit_set>:

void ascii_ctrl_bit_set(unsigned char x) {
200002de:	b580      	push	{r7, lr}
200002e0:	b082      	sub	sp, #8
200002e2:	af00      	add	r7, sp, #0
200002e4:	0002      	movs	r2, r0
200002e6:	1dfb      	adds	r3, r7, #7
200002e8:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW = B_SELECT | x | *GPIO_E_ODR_LOW;
200002ea:	4b08      	ldr	r3, [pc, #32]	; (2000030c <ascii_ctrl_bit_set+0x2e>)
200002ec:	781b      	ldrb	r3, [r3, #0]
200002ee:	b2da      	uxtb	r2, r3
200002f0:	1dfb      	adds	r3, r7, #7
200002f2:	781b      	ldrb	r3, [r3, #0]
200002f4:	4313      	orrs	r3, r2
200002f6:	b2db      	uxtb	r3, r3
200002f8:	4a04      	ldr	r2, [pc, #16]	; (2000030c <ascii_ctrl_bit_set+0x2e>)
200002fa:	2104      	movs	r1, #4
200002fc:	430b      	orrs	r3, r1
200002fe:	b2db      	uxtb	r3, r3
20000300:	7013      	strb	r3, [r2, #0]
}
20000302:	46c0      	nop			; (mov r8, r8)
20000304:	46bd      	mov	sp, r7
20000306:	b002      	add	sp, #8
20000308:	bd80      	pop	{r7, pc}
2000030a:	46c0      	nop			; (mov r8, r8)
2000030c:	40021014 	andmi	r1, r2, r4, lsl r0

20000310 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x) {
20000310:	b580      	push	{r7, lr}
20000312:	b082      	sub	sp, #8
20000314:	af00      	add	r7, sp, #0
20000316:	0002      	movs	r2, r0
20000318:	1dfb      	adds	r3, r7, #7
2000031a:	701a      	strb	r2, [r3, #0]
    *GPIO_E_ODR_LOW = B_SELECT | (*GPIO_E_ODR_LOW & ~x);
2000031c:	4b0a      	ldr	r3, [pc, #40]	; (20000348 <ascii_ctrl_bit_clear+0x38>)
2000031e:	781b      	ldrb	r3, [r3, #0]
20000320:	b2db      	uxtb	r3, r3
20000322:	b25b      	sxtb	r3, r3
20000324:	1dfa      	adds	r2, r7, #7
20000326:	7812      	ldrb	r2, [r2, #0]
20000328:	b252      	sxtb	r2, r2
2000032a:	43d2      	mvns	r2, r2
2000032c:	b252      	sxtb	r2, r2
2000032e:	4013      	ands	r3, r2
20000330:	b25b      	sxtb	r3, r3
20000332:	2204      	movs	r2, #4
20000334:	4313      	orrs	r3, r2
20000336:	b25a      	sxtb	r2, r3
20000338:	4b03      	ldr	r3, [pc, #12]	; (20000348 <ascii_ctrl_bit_clear+0x38>)
2000033a:	b2d2      	uxtb	r2, r2
2000033c:	701a      	strb	r2, [r3, #0]
}
2000033e:	46c0      	nop			; (mov r8, r8)
20000340:	46bd      	mov	sp, r7
20000342:	b002      	add	sp, #8
20000344:	bd80      	pop	{r7, pc}
20000346:	46c0      	nop			; (mov r8, r8)
20000348:	40021014 	andmi	r1, r2, r4, lsl r0

2000034c <ascii_write_controller>:

void ascii_write_controller(unsigned char byte) {
2000034c:	b580      	push	{r7, lr}
2000034e:	b082      	sub	sp, #8
20000350:	af00      	add	r7, sp, #0
20000352:	0002      	movs	r2, r0
20000354:	1dfb      	adds	r3, r7, #7
20000356:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_set(B_E);
20000358:	2040      	movs	r0, #64	; 0x40
2000035a:	f7ff ffc0 	bl	200002de <ascii_ctrl_bit_set>
    *GPIO_E_ODR_HIGH = byte;
2000035e:	4a06      	ldr	r2, [pc, #24]	; (20000378 <ascii_write_controller+0x2c>)
20000360:	1dfb      	adds	r3, r7, #7
20000362:	781b      	ldrb	r3, [r3, #0]
20000364:	7013      	strb	r3, [r2, #0]
    delay_250ns();  	 
20000366:	f7ff ff47 	bl	200001f8 <delay_250ns>
    ascii_ctrl_bit_clear(B_E);
2000036a:	2040      	movs	r0, #64	; 0x40
2000036c:	f7ff ffd0 	bl	20000310 <ascii_ctrl_bit_clear>
}
20000370:	46c0      	nop			; (mov r8, r8)
20000372:	46bd      	mov	sp, r7
20000374:	b002      	add	sp, #8
20000376:	bd80      	pop	{r7, pc}
20000378:	40021015 	andmi	r1, r2, r5, lsl r0

2000037c <ascii_read_controller>:

unsigned char ascii_read_controller(void) {
2000037c:	b580      	push	{r7, lr}
2000037e:	b082      	sub	sp, #8
20000380:	af00      	add	r7, sp, #0
    ascii_ctrl_bit_set(B_E);
20000382:	2040      	movs	r0, #64	; 0x40
20000384:	f7ff ffab 	bl	200002de <ascii_ctrl_bit_set>
    delay_250ns();    
20000388:	f7ff ff36 	bl	200001f8 <delay_250ns>
    delay_250ns();
2000038c:	f7ff ff34 	bl	200001f8 <delay_250ns>
    unsigned char rv = *GPIO_E_IDR_HIGH;    // Ändrat enl. kod nedan
20000390:	4a06      	ldr	r2, [pc, #24]	; (200003ac <ascii_read_controller+0x30>)
20000392:	1dfb      	adds	r3, r7, #7
20000394:	7812      	ldrb	r2, [r2, #0]
20000396:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_clear(B_E);
20000398:	2040      	movs	r0, #64	; 0x40
2000039a:	f7ff ffb9 	bl	20000310 <ascii_ctrl_bit_clear>
    return rv;
2000039e:	1dfb      	adds	r3, r7, #7
200003a0:	781b      	ldrb	r3, [r3, #0]
}
200003a2:	0018      	movs	r0, r3
200003a4:	46bd      	mov	sp, r7
200003a6:	b002      	add	sp, #8
200003a8:	bd80      	pop	{r7, pc}
200003aa:	46c0      	nop			; (mov r8, r8)
200003ac:	40021011 	andmi	r1, r2, r1, lsl r0

200003b0 <ascii_read_status>:

unsigned char ascii_read_status(void) {
200003b0:	b590      	push	{r4, r7, lr}
200003b2:	b083      	sub	sp, #12
200003b4:	af00      	add	r7, sp, #0
    *GPIO_E_MODER = 0x00005555;
200003b6:	4b0b      	ldr	r3, [pc, #44]	; (200003e4 <ascii_read_status+0x34>)
200003b8:	4a0b      	ldr	r2, [pc, #44]	; (200003e8 <ascii_read_status+0x38>)
200003ba:	601a      	str	r2, [r3, #0]
    ascii_ctrl_bit_clear(B_RS);
200003bc:	2001      	movs	r0, #1
200003be:	f7ff ffa7 	bl	20000310 <ascii_ctrl_bit_clear>
    ascii_ctrl_bit_set(B_RW);
200003c2:	2002      	movs	r0, #2
200003c4:	f7ff ff8b 	bl	200002de <ascii_ctrl_bit_set>
    unsigned char rv = ascii_read_controller();
200003c8:	1dfc      	adds	r4, r7, #7
200003ca:	f7ff ffd7 	bl	2000037c <ascii_read_controller>
200003ce:	0003      	movs	r3, r0
200003d0:	7023      	strb	r3, [r4, #0]
    *GPIO_E_MODER = 0x55555555;
200003d2:	4b04      	ldr	r3, [pc, #16]	; (200003e4 <ascii_read_status+0x34>)
200003d4:	4a05      	ldr	r2, [pc, #20]	; (200003ec <ascii_read_status+0x3c>)
200003d6:	601a      	str	r2, [r3, #0]
    return rv;
200003d8:	1dfb      	adds	r3, r7, #7
200003da:	781b      	ldrb	r3, [r3, #0]
}
200003dc:	0018      	movs	r0, r3
200003de:	46bd      	mov	sp, r7
200003e0:	b003      	add	sp, #12
200003e2:	bd90      	pop	{r4, r7, pc}
200003e4:	40021000 	andmi	r1, r2, r0
200003e8:	00005555 	andeq	r5, r0, r5, asr r5
200003ec:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200003f0 <ascii_read_data>:

unsigned char ascii_read_data(void) {
200003f0:	b590      	push	{r4, r7, lr}
200003f2:	b083      	sub	sp, #12
200003f4:	af00      	add	r7, sp, #0
    *GPIO_E_MODER = 0x00005555;
200003f6:	4b0b      	ldr	r3, [pc, #44]	; (20000424 <ascii_read_data+0x34>)
200003f8:	4a0b      	ldr	r2, [pc, #44]	; (20000428 <ascii_read_data+0x38>)
200003fa:	601a      	str	r2, [r3, #0]
    ascii_ctrl_bit_set(B_RS);
200003fc:	2001      	movs	r0, #1
200003fe:	f7ff ff6e 	bl	200002de <ascii_ctrl_bit_set>
    ascii_ctrl_bit_set(B_RW);
20000402:	2002      	movs	r0, #2
20000404:	f7ff ff6b 	bl	200002de <ascii_ctrl_bit_set>
    unsigned char rv = ascii_read_controller();
20000408:	1dfc      	adds	r4, r7, #7
2000040a:	f7ff ffb7 	bl	2000037c <ascii_read_controller>
2000040e:	0003      	movs	r3, r0
20000410:	7023      	strb	r3, [r4, #0]
    *GPIO_E_MODER = 0x55555555;
20000412:	4b04      	ldr	r3, [pc, #16]	; (20000424 <ascii_read_data+0x34>)
20000414:	4a05      	ldr	r2, [pc, #20]	; (2000042c <ascii_read_data+0x3c>)
20000416:	601a      	str	r2, [r3, #0]
    return rv;
20000418:	1dfb      	adds	r3, r7, #7
2000041a:	781b      	ldrb	r3, [r3, #0]
}
2000041c:	0018      	movs	r0, r3
2000041e:	46bd      	mov	sp, r7
20000420:	b003      	add	sp, #12
20000422:	bd90      	pop	{r4, r7, pc}
20000424:	40021000 	andmi	r1, r2, r0
20000428:	00005555 	andeq	r5, r0, r5, asr r5
2000042c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000430 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command) {
20000430:	b580      	push	{r7, lr}
20000432:	b082      	sub	sp, #8
20000434:	af00      	add	r7, sp, #0
20000436:	0002      	movs	r2, r0
20000438:	1dfb      	adds	r3, r7, #7
2000043a:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_clear(B_RS);
2000043c:	2001      	movs	r0, #1
2000043e:	f7ff ff67 	bl	20000310 <ascii_ctrl_bit_clear>
    ascii_ctrl_bit_clear(B_RW);
20000442:	2002      	movs	r0, #2
20000444:	f7ff ff64 	bl	20000310 <ascii_ctrl_bit_clear>
    ascii_write_controller(command);
20000448:	1dfb      	adds	r3, r7, #7
2000044a:	781b      	ldrb	r3, [r3, #0]
2000044c:	0018      	movs	r0, r3
2000044e:	f7ff ff7d 	bl	2000034c <ascii_write_controller>
}
20000452:	46c0      	nop			; (mov r8, r8)
20000454:	46bd      	mov	sp, r7
20000456:	b002      	add	sp, #8
20000458:	bd80      	pop	{r7, pc}

2000045a <ascii_write_data>:

void ascii_write_data(unsigned char data) {
2000045a:	b580      	push	{r7, lr}
2000045c:	b082      	sub	sp, #8
2000045e:	af00      	add	r7, sp, #0
20000460:	0002      	movs	r2, r0
20000462:	1dfb      	adds	r3, r7, #7
20000464:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_set(B_RS);
20000466:	2001      	movs	r0, #1
20000468:	f7ff ff39 	bl	200002de <ascii_ctrl_bit_set>
    ascii_ctrl_bit_clear(B_RW);
2000046c:	2002      	movs	r0, #2
2000046e:	f7ff ff4f 	bl	20000310 <ascii_ctrl_bit_clear>
    ascii_write_controller(data);
20000472:	1dfb      	adds	r3, r7, #7
20000474:	781b      	ldrb	r3, [r3, #0]
20000476:	0018      	movs	r0, r3
20000478:	f7ff ff68 	bl	2000034c <ascii_write_controller>
}
2000047c:	46c0      	nop			; (mov r8, r8)
2000047e:	46bd      	mov	sp, r7
20000480:	b002      	add	sp, #8
20000482:	bd80      	pop	{r7, pc}

20000484 <ascii_init>:

void ascii_init(void) {
20000484:	b580      	push	{r7, lr}
20000486:	af00      	add	r7, sp, #0
    while( ( ascii_read_status() & 0x80)== 0x80 ) {}    // Vänta tills statusflaggan är 0
20000488:	46c0      	nop			; (mov r8, r8)
2000048a:	f7ff ff91 	bl	200003b0 <ascii_read_status>
2000048e:	0003      	movs	r3, r0
20000490:	001a      	movs	r2, r3
20000492:	2380      	movs	r3, #128	; 0x80
20000494:	4013      	ands	r3, r2
20000496:	2b80      	cmp	r3, #128	; 0x80
20000498:	d0f7      	beq.n	2000048a <ascii_init+0x6>
    delay_micro( 8 ); /* latenstid för kommando */
2000049a:	2008      	movs	r0, #8
2000049c:	f7ff fece 	bl	2000023c <delay_micro>
    ascii_write_cmd( 1 ); /* kommando: "Clear display" */
200004a0:	2001      	movs	r0, #1
200004a2:	f7ff ffc5 	bl	20000430 <ascii_write_cmd>
    delay_milli( 2 ); /* i stället för 1,53 ms */
200004a6:	2002      	movs	r0, #2
200004a8:	f7ff feeb 	bl	20000282 <delay_milli>
    // FUNCTION SET
    while( ( ascii_read_status() & 0x80)== 0x80 ) {}    // Vänta tills statusflaggan är 0
200004ac:	46c0      	nop			; (mov r8, r8)
200004ae:	f7ff ff7f 	bl	200003b0 <ascii_read_status>
200004b2:	0003      	movs	r3, r0
200004b4:	001a      	movs	r2, r3
200004b6:	2380      	movs	r3, #128	; 0x80
200004b8:	4013      	ands	r3, r2
200004ba:	2b80      	cmp	r3, #128	; 0x80
200004bc:	d0f7      	beq.n	200004ae <ascii_init+0x2a>
    delay_micro( 8 ); /* latenstid för kommando */
200004be:	2008      	movs	r0, #8
200004c0:	f7ff febc 	bl	2000023c <delay_micro>
    ascii_write_cmd(56);    // Med "dont care" bitarna som 0
200004c4:	2038      	movs	r0, #56	; 0x38
200004c6:	f7ff ffb3 	bl	20000430 <ascii_write_cmd>
    delay_micro(39);
200004ca:	2027      	movs	r0, #39	; 0x27
200004cc:	f7ff feb6 	bl	2000023c <delay_micro>
    // DISPLAY CONTROL
    while( ( ascii_read_status() & 0x80)== 0x80 ) {}    // Vänta tills statusflaggan är 0
200004d0:	46c0      	nop			; (mov r8, r8)
200004d2:	f7ff ff6d 	bl	200003b0 <ascii_read_status>
200004d6:	0003      	movs	r3, r0
200004d8:	001a      	movs	r2, r3
200004da:	2380      	movs	r3, #128	; 0x80
200004dc:	4013      	ands	r3, r2
200004de:	2b80      	cmp	r3, #128	; 0x80
200004e0:	d0f7      	beq.n	200004d2 <ascii_init+0x4e>
    delay_micro( 8 ); /* latenstid för kommando */
200004e2:	2008      	movs	r0, #8
200004e4:	f7ff feaa 	bl	2000023c <delay_micro>
    ascii_write_cmd(14);
200004e8:	200e      	movs	r0, #14
200004ea:	f7ff ffa1 	bl	20000430 <ascii_write_cmd>
    delay_micro(39);
200004ee:	2027      	movs	r0, #39	; 0x27
200004f0:	f7ff fea4 	bl	2000023c <delay_micro>
    // ENTRYMODE SET
    while( ( ascii_read_status() & 0x80)== 0x80 ) {}    // Vänta tills statusflaggan är 0
200004f4:	46c0      	nop			; (mov r8, r8)
200004f6:	f7ff ff5b 	bl	200003b0 <ascii_read_status>
200004fa:	0003      	movs	r3, r0
200004fc:	001a      	movs	r2, r3
200004fe:	2380      	movs	r3, #128	; 0x80
20000500:	4013      	ands	r3, r2
20000502:	2b80      	cmp	r3, #128	; 0x80
20000504:	d0f7      	beq.n	200004f6 <ascii_init+0x72>
    delay_micro( 8 ); /* latenstid för kommando */
20000506:	2008      	movs	r0, #8
20000508:	f7ff fe98 	bl	2000023c <delay_micro>
    ascii_write_cmd(4);
2000050c:	2004      	movs	r0, #4
2000050e:	f7ff ff8f 	bl	20000430 <ascii_write_cmd>
    delay_micro(39);
20000512:	2027      	movs	r0, #39	; 0x27
20000514:	f7ff fe92 	bl	2000023c <delay_micro>
    
}
20000518:	46c0      	nop			; (mov r8, r8)
2000051a:	46bd      	mov	sp, r7
2000051c:	bd80      	pop	{r7, pc}

2000051e <ascii_write_char>:

void ascii_write_char(unsigned char c) {
2000051e:	b580      	push	{r7, lr}
20000520:	b082      	sub	sp, #8
20000522:	af00      	add	r7, sp, #0
20000524:	0002      	movs	r2, r0
20000526:	1dfb      	adds	r3, r7, #7
20000528:	701a      	strb	r2, [r3, #0]
    // Ska skriva ut till display, ett tecken i taget
    while( ( ascii_read_status() & 0x80)== 0x80 ) {}    // Vänta tills statusflaggan är 0
2000052a:	46c0      	nop			; (mov r8, r8)
2000052c:	f7ff ff40 	bl	200003b0 <ascii_read_status>
20000530:	0003      	movs	r3, r0
20000532:	001a      	movs	r2, r3
20000534:	2380      	movs	r3, #128	; 0x80
20000536:	4013      	ands	r3, r2
20000538:	2b80      	cmp	r3, #128	; 0x80
2000053a:	d0f7      	beq.n	2000052c <ascii_write_char+0xe>
    delay_micro( 8 ); /* latenstid för kommando */
2000053c:	2008      	movs	r0, #8
2000053e:	f7ff fe7d 	bl	2000023c <delay_micro>
    ascii_write_data( c );
20000542:	1dfb      	adds	r3, r7, #7
20000544:	781b      	ldrb	r3, [r3, #0]
20000546:	0018      	movs	r0, r3
20000548:	f7ff ff87 	bl	2000045a <ascii_write_data>
    delay_micro(45);
2000054c:	202d      	movs	r0, #45	; 0x2d
2000054e:	f7ff fe75 	bl	2000023c <delay_micro>
}
20000552:	46c0      	nop			; (mov r8, r8)
20000554:	46bd      	mov	sp, r7
20000556:	b002      	add	sp, #8
20000558:	bd80      	pop	{r7, pc}

2000055a <ascii_gotoxy>:

void ascii_gotoxy(int x, int y) {    // y = row , x = cols
2000055a:	b580      	push	{r7, lr}
2000055c:	b084      	sub	sp, #16
2000055e:	af00      	add	r7, sp, #0
20000560:	6078      	str	r0, [r7, #4]
20000562:	6039      	str	r1, [r7, #0]
    // Sätt startadress till
    
    int adress = (x-1);
20000564:	687b      	ldr	r3, [r7, #4]
20000566:	3b01      	subs	r3, #1
20000568:	60fb      	str	r3, [r7, #12]
    
    if (y == 2) {
2000056a:	683b      	ldr	r3, [r7, #0]
2000056c:	2b02      	cmp	r3, #2
2000056e:	d102      	bne.n	20000576 <ascii_gotoxy+0x1c>
   	 adress = (adress + 0x40);
20000570:	68fb      	ldr	r3, [r7, #12]
20000572:	3340      	adds	r3, #64	; 0x40
20000574:	60fb      	str	r3, [r7, #12]
    }
    ascii_write_cmd((0x80 | adress));
20000576:	68fb      	ldr	r3, [r7, #12]
20000578:	b25b      	sxtb	r3, r3
2000057a:	2280      	movs	r2, #128	; 0x80
2000057c:	4252      	negs	r2, r2
2000057e:	4313      	orrs	r3, r2
20000580:	b25b      	sxtb	r3, r3
20000582:	b2db      	uxtb	r3, r3
20000584:	0018      	movs	r0, r3
20000586:	f7ff ff53 	bl	20000430 <ascii_write_cmd>
}
2000058a:	46c0      	nop			; (mov r8, r8)
2000058c:	46bd      	mov	sp, r7
2000058e:	b004      	add	sp, #16
20000590:	bd80      	pop	{r7, pc}
20000592:	46c0      	nop			; (mov r8, r8)

20000594 <graphic_initialize>:
#include "grafik.h"
#include "graphic_driver.h"

__attribute__((naked))
void graphic_initialize (void)
{
20000594:	4770dff0 			; <UNDEFINED> instruction: 0x4770dff0
__asm volatile(" .HWORD 0xDFF0\n");	
__asm volatile(" BX LR\n");		
}
20000598:	46c0      	nop			; (mov r8, r8)

2000059a <graphic_clear_screen>:
__attribute__((naked))
void graphic_clear_screen(void)
{
2000059a:	4770dff1 			; <UNDEFINED> instruction: 0x4770dff1
__asm volatile(" .HWORD 0xDFF1\n");	
__asm volatile(" BX LR\n");		
}
2000059e:	46c0      	nop			; (mov r8, r8)

200005a0 <graphic_pixel_set>:
__attribute__((naked))
void graphic_pixel_set(int x, int y)
{
200005a0:	4770dff2 			; <UNDEFINED> instruction: 0x4770dff2
__asm volatile(" .HWORD 0xDFF2\n");	
__asm volatile(" BX LR\n");		
}
200005a4:	46c0      	nop			; (mov r8, r8)

200005a6 <graphic_pixel_clear>:
__attribute__((naked))
void graphic_pixel_clear(int x, int y)
{
200005a6:	4770dff3 			; <UNDEFINED> instruction: 0x4770dff3
__asm volatile(" .HWORD 0xDFF3\n");	
__asm volatile(" BX LR\n");		
}
200005aa:	46c0      	nop			; (mov r8, r8)

200005ac <draw_object>:


void draw_object (POBJECT o){
200005ac:	b580      	push	{r7, lr}
200005ae:	b086      	sub	sp, #24
200005b0:	af00      	add	r7, sp, #0
200005b2:	6078      	str	r0, [r7, #4]
	if (o->geo_number == stand){
200005b4:	687b      	ldr	r3, [r7, #4]
200005b6:	691b      	ldr	r3, [r3, #16]
200005b8:	2b00      	cmp	r3, #0
200005ba:	d127      	bne.n	2000060c <draw_object+0x60>
		for ( int i=0; i <= (o->geo_stand->numpoints-1); i++){
200005bc:	2300      	movs	r3, #0
200005be:	617b      	str	r3, [r7, #20]
200005c0:	e01d      	b.n	200005fe <draw_object+0x52>
		graphic_pixel_set( (o->geo_stand->px[i].x + o->posx), (o->geo_stand->px[i].y + o->posy));
200005c2:	687b      	ldr	r3, [r7, #4]
200005c4:	681a      	ldr	r2, [r3, #0]
200005c6:	697b      	ldr	r3, [r7, #20]
200005c8:	3304      	adds	r3, #4
200005ca:	005b      	lsls	r3, r3, #1
200005cc:	18d3      	adds	r3, r2, r3
200005ce:	3304      	adds	r3, #4
200005d0:	781b      	ldrb	r3, [r3, #0]
200005d2:	001a      	movs	r2, r3
200005d4:	687b      	ldr	r3, [r7, #4]
200005d6:	69db      	ldr	r3, [r3, #28]
200005d8:	18d0      	adds	r0, r2, r3
200005da:	687b      	ldr	r3, [r7, #4]
200005dc:	681a      	ldr	r2, [r3, #0]
200005de:	697b      	ldr	r3, [r7, #20]
200005e0:	3304      	adds	r3, #4
200005e2:	005b      	lsls	r3, r3, #1
200005e4:	18d3      	adds	r3, r2, r3
200005e6:	3305      	adds	r3, #5
200005e8:	781b      	ldrb	r3, [r3, #0]
200005ea:	001a      	movs	r2, r3
200005ec:	687b      	ldr	r3, [r7, #4]
200005ee:	6a1b      	ldr	r3, [r3, #32]
200005f0:	18d3      	adds	r3, r2, r3
200005f2:	0019      	movs	r1, r3
200005f4:	f7ff ffd4 	bl	200005a0 <graphic_pixel_set>
		for ( int i=0; i <= (o->geo_stand->numpoints-1); i++){
200005f8:	697b      	ldr	r3, [r7, #20]
200005fa:	3301      	adds	r3, #1
200005fc:	617b      	str	r3, [r7, #20]
200005fe:	687b      	ldr	r3, [r7, #4]
20000600:	681b      	ldr	r3, [r3, #0]
20000602:	681b      	ldr	r3, [r3, #0]
20000604:	697a      	ldr	r2, [r7, #20]
20000606:	429a      	cmp	r2, r3
20000608:	dbdb      	blt.n	200005c2 <draw_object+0x16>
	else if (o->geo_number==duck){
		for ( int i=0; i <= (o->geo_duck->numpoints-1); i++){
		graphic_pixel_set( (o->geo_duck->px[i].x + o->posx), (o->geo_duck->px[i].y + o->posy));
		}
	}
}
2000060a:	e082      	b.n	20000712 <draw_object+0x166>
	else if (o->geo_number==run){
2000060c:	687b      	ldr	r3, [r7, #4]
2000060e:	691b      	ldr	r3, [r3, #16]
20000610:	2b01      	cmp	r3, #1
20000612:	d127      	bne.n	20000664 <draw_object+0xb8>
		for ( int i=0; i <= (o->geo_run->numpoints-1); i++){
20000614:	2300      	movs	r3, #0
20000616:	613b      	str	r3, [r7, #16]
20000618:	e01d      	b.n	20000656 <draw_object+0xaa>
		graphic_pixel_set( (o->geo_run->px[i].x + o->posx), (o->geo_run->px[i].y + o->posy));
2000061a:	687b      	ldr	r3, [r7, #4]
2000061c:	685a      	ldr	r2, [r3, #4]
2000061e:	693b      	ldr	r3, [r7, #16]
20000620:	3304      	adds	r3, #4
20000622:	005b      	lsls	r3, r3, #1
20000624:	18d3      	adds	r3, r2, r3
20000626:	3304      	adds	r3, #4
20000628:	781b      	ldrb	r3, [r3, #0]
2000062a:	001a      	movs	r2, r3
2000062c:	687b      	ldr	r3, [r7, #4]
2000062e:	69db      	ldr	r3, [r3, #28]
20000630:	18d0      	adds	r0, r2, r3
20000632:	687b      	ldr	r3, [r7, #4]
20000634:	685a      	ldr	r2, [r3, #4]
20000636:	693b      	ldr	r3, [r7, #16]
20000638:	3304      	adds	r3, #4
2000063a:	005b      	lsls	r3, r3, #1
2000063c:	18d3      	adds	r3, r2, r3
2000063e:	3305      	adds	r3, #5
20000640:	781b      	ldrb	r3, [r3, #0]
20000642:	001a      	movs	r2, r3
20000644:	687b      	ldr	r3, [r7, #4]
20000646:	6a1b      	ldr	r3, [r3, #32]
20000648:	18d3      	adds	r3, r2, r3
2000064a:	0019      	movs	r1, r3
2000064c:	f7ff ffa8 	bl	200005a0 <graphic_pixel_set>
		for ( int i=0; i <= (o->geo_run->numpoints-1); i++){
20000650:	693b      	ldr	r3, [r7, #16]
20000652:	3301      	adds	r3, #1
20000654:	613b      	str	r3, [r7, #16]
20000656:	687b      	ldr	r3, [r7, #4]
20000658:	685b      	ldr	r3, [r3, #4]
2000065a:	681b      	ldr	r3, [r3, #0]
2000065c:	693a      	ldr	r2, [r7, #16]
2000065e:	429a      	cmp	r2, r3
20000660:	dbdb      	blt.n	2000061a <draw_object+0x6e>
}
20000662:	e056      	b.n	20000712 <draw_object+0x166>
	else if (o->geo_number==jump){
20000664:	687b      	ldr	r3, [r7, #4]
20000666:	691b      	ldr	r3, [r3, #16]
20000668:	2b02      	cmp	r3, #2
2000066a:	d127      	bne.n	200006bc <draw_object+0x110>
		for ( int i=0; i <= (o->geo_jump->numpoints-1); i++){
2000066c:	2300      	movs	r3, #0
2000066e:	60fb      	str	r3, [r7, #12]
20000670:	e01d      	b.n	200006ae <draw_object+0x102>
		graphic_pixel_set( (o->geo_jump->px[i].x + o->posx), (o->geo_jump->px[i].y + o->posy));
20000672:	687b      	ldr	r3, [r7, #4]
20000674:	689a      	ldr	r2, [r3, #8]
20000676:	68fb      	ldr	r3, [r7, #12]
20000678:	3304      	adds	r3, #4
2000067a:	005b      	lsls	r3, r3, #1
2000067c:	18d3      	adds	r3, r2, r3
2000067e:	3304      	adds	r3, #4
20000680:	781b      	ldrb	r3, [r3, #0]
20000682:	001a      	movs	r2, r3
20000684:	687b      	ldr	r3, [r7, #4]
20000686:	69db      	ldr	r3, [r3, #28]
20000688:	18d0      	adds	r0, r2, r3
2000068a:	687b      	ldr	r3, [r7, #4]
2000068c:	689a      	ldr	r2, [r3, #8]
2000068e:	68fb      	ldr	r3, [r7, #12]
20000690:	3304      	adds	r3, #4
20000692:	005b      	lsls	r3, r3, #1
20000694:	18d3      	adds	r3, r2, r3
20000696:	3305      	adds	r3, #5
20000698:	781b      	ldrb	r3, [r3, #0]
2000069a:	001a      	movs	r2, r3
2000069c:	687b      	ldr	r3, [r7, #4]
2000069e:	6a1b      	ldr	r3, [r3, #32]
200006a0:	18d3      	adds	r3, r2, r3
200006a2:	0019      	movs	r1, r3
200006a4:	f7ff ff7c 	bl	200005a0 <graphic_pixel_set>
		for ( int i=0; i <= (o->geo_jump->numpoints-1); i++){
200006a8:	68fb      	ldr	r3, [r7, #12]
200006aa:	3301      	adds	r3, #1
200006ac:	60fb      	str	r3, [r7, #12]
200006ae:	687b      	ldr	r3, [r7, #4]
200006b0:	689b      	ldr	r3, [r3, #8]
200006b2:	681b      	ldr	r3, [r3, #0]
200006b4:	68fa      	ldr	r2, [r7, #12]
200006b6:	429a      	cmp	r2, r3
200006b8:	dbdb      	blt.n	20000672 <draw_object+0xc6>
}
200006ba:	e02a      	b.n	20000712 <draw_object+0x166>
	else if (o->geo_number==duck){
200006bc:	687b      	ldr	r3, [r7, #4]
200006be:	691b      	ldr	r3, [r3, #16]
200006c0:	2b03      	cmp	r3, #3
200006c2:	d126      	bne.n	20000712 <draw_object+0x166>
		for ( int i=0; i <= (o->geo_duck->numpoints-1); i++){
200006c4:	2300      	movs	r3, #0
200006c6:	60bb      	str	r3, [r7, #8]
200006c8:	e01d      	b.n	20000706 <draw_object+0x15a>
		graphic_pixel_set( (o->geo_duck->px[i].x + o->posx), (o->geo_duck->px[i].y + o->posy));
200006ca:	687b      	ldr	r3, [r7, #4]
200006cc:	68da      	ldr	r2, [r3, #12]
200006ce:	68bb      	ldr	r3, [r7, #8]
200006d0:	3304      	adds	r3, #4
200006d2:	005b      	lsls	r3, r3, #1
200006d4:	18d3      	adds	r3, r2, r3
200006d6:	3304      	adds	r3, #4
200006d8:	781b      	ldrb	r3, [r3, #0]
200006da:	001a      	movs	r2, r3
200006dc:	687b      	ldr	r3, [r7, #4]
200006de:	69db      	ldr	r3, [r3, #28]
200006e0:	18d0      	adds	r0, r2, r3
200006e2:	687b      	ldr	r3, [r7, #4]
200006e4:	68da      	ldr	r2, [r3, #12]
200006e6:	68bb      	ldr	r3, [r7, #8]
200006e8:	3304      	adds	r3, #4
200006ea:	005b      	lsls	r3, r3, #1
200006ec:	18d3      	adds	r3, r2, r3
200006ee:	3305      	adds	r3, #5
200006f0:	781b      	ldrb	r3, [r3, #0]
200006f2:	001a      	movs	r2, r3
200006f4:	687b      	ldr	r3, [r7, #4]
200006f6:	6a1b      	ldr	r3, [r3, #32]
200006f8:	18d3      	adds	r3, r2, r3
200006fa:	0019      	movs	r1, r3
200006fc:	f7ff ff50 	bl	200005a0 <graphic_pixel_set>
		for ( int i=0; i <= (o->geo_duck->numpoints-1); i++){
20000700:	68bb      	ldr	r3, [r7, #8]
20000702:	3301      	adds	r3, #1
20000704:	60bb      	str	r3, [r7, #8]
20000706:	687b      	ldr	r3, [r7, #4]
20000708:	68db      	ldr	r3, [r3, #12]
2000070a:	681b      	ldr	r3, [r3, #0]
2000070c:	68ba      	ldr	r2, [r7, #8]
2000070e:	429a      	cmp	r2, r3
20000710:	dbdb      	blt.n	200006ca <draw_object+0x11e>
}
20000712:	46c0      	nop			; (mov r8, r8)
20000714:	46bd      	mov	sp, r7
20000716:	b006      	add	sp, #24
20000718:	bd80      	pop	{r7, pc}

2000071a <clear_object>:

void clear_object (POBJECT o){
2000071a:	b580      	push	{r7, lr}
2000071c:	b086      	sub	sp, #24
2000071e:	af00      	add	r7, sp, #0
20000720:	6078      	str	r0, [r7, #4]
	if (o->geo_number==stand){
20000722:	687b      	ldr	r3, [r7, #4]
20000724:	691b      	ldr	r3, [r3, #16]
20000726:	2b00      	cmp	r3, #0
20000728:	d127      	bne.n	2000077a <clear_object+0x60>
		for ( int i=0; i <= (o->geo_stand->numpoints-1); i++){
2000072a:	2300      	movs	r3, #0
2000072c:	617b      	str	r3, [r7, #20]
2000072e:	e01d      	b.n	2000076c <clear_object+0x52>
		graphic_pixel_clear( (o->geo_stand->px[i].x + o->posx), (o->geo_stand->px[i].y + o->posy));
20000730:	687b      	ldr	r3, [r7, #4]
20000732:	681a      	ldr	r2, [r3, #0]
20000734:	697b      	ldr	r3, [r7, #20]
20000736:	3304      	adds	r3, #4
20000738:	005b      	lsls	r3, r3, #1
2000073a:	18d3      	adds	r3, r2, r3
2000073c:	3304      	adds	r3, #4
2000073e:	781b      	ldrb	r3, [r3, #0]
20000740:	001a      	movs	r2, r3
20000742:	687b      	ldr	r3, [r7, #4]
20000744:	69db      	ldr	r3, [r3, #28]
20000746:	18d0      	adds	r0, r2, r3
20000748:	687b      	ldr	r3, [r7, #4]
2000074a:	681a      	ldr	r2, [r3, #0]
2000074c:	697b      	ldr	r3, [r7, #20]
2000074e:	3304      	adds	r3, #4
20000750:	005b      	lsls	r3, r3, #1
20000752:	18d3      	adds	r3, r2, r3
20000754:	3305      	adds	r3, #5
20000756:	781b      	ldrb	r3, [r3, #0]
20000758:	001a      	movs	r2, r3
2000075a:	687b      	ldr	r3, [r7, #4]
2000075c:	6a1b      	ldr	r3, [r3, #32]
2000075e:	18d3      	adds	r3, r2, r3
20000760:	0019      	movs	r1, r3
20000762:	f7ff ff20 	bl	200005a6 <graphic_pixel_clear>
		for ( int i=0; i <= (o->geo_stand->numpoints-1); i++){
20000766:	697b      	ldr	r3, [r7, #20]
20000768:	3301      	adds	r3, #1
2000076a:	617b      	str	r3, [r7, #20]
2000076c:	687b      	ldr	r3, [r7, #4]
2000076e:	681b      	ldr	r3, [r3, #0]
20000770:	681b      	ldr	r3, [r3, #0]
20000772:	697a      	ldr	r2, [r7, #20]
20000774:	429a      	cmp	r2, r3
20000776:	dbdb      	blt.n	20000730 <clear_object+0x16>
	else if (o->geo_number==duck){
		for ( int i=0; i <= (o->geo_duck->numpoints-1); i++){
		graphic_pixel_clear( (o->geo_duck->px[i].x + o->posx), (o->geo_duck->px[i].y + o->posy));
		}
	}
}
20000778:	e082      	b.n	20000880 <clear_object+0x166>
	else if (o->geo_number==run){
2000077a:	687b      	ldr	r3, [r7, #4]
2000077c:	691b      	ldr	r3, [r3, #16]
2000077e:	2b01      	cmp	r3, #1
20000780:	d127      	bne.n	200007d2 <clear_object+0xb8>
		for ( int i=0; i <= (o->geo_run->numpoints-1); i++){
20000782:	2300      	movs	r3, #0
20000784:	613b      	str	r3, [r7, #16]
20000786:	e01d      	b.n	200007c4 <clear_object+0xaa>
		graphic_pixel_clear( (o->geo_run->px[i].x + o->posx), (o->geo_run->px[i].y + o->posy));
20000788:	687b      	ldr	r3, [r7, #4]
2000078a:	685a      	ldr	r2, [r3, #4]
2000078c:	693b      	ldr	r3, [r7, #16]
2000078e:	3304      	adds	r3, #4
20000790:	005b      	lsls	r3, r3, #1
20000792:	18d3      	adds	r3, r2, r3
20000794:	3304      	adds	r3, #4
20000796:	781b      	ldrb	r3, [r3, #0]
20000798:	001a      	movs	r2, r3
2000079a:	687b      	ldr	r3, [r7, #4]
2000079c:	69db      	ldr	r3, [r3, #28]
2000079e:	18d0      	adds	r0, r2, r3
200007a0:	687b      	ldr	r3, [r7, #4]
200007a2:	685a      	ldr	r2, [r3, #4]
200007a4:	693b      	ldr	r3, [r7, #16]
200007a6:	3304      	adds	r3, #4
200007a8:	005b      	lsls	r3, r3, #1
200007aa:	18d3      	adds	r3, r2, r3
200007ac:	3305      	adds	r3, #5
200007ae:	781b      	ldrb	r3, [r3, #0]
200007b0:	001a      	movs	r2, r3
200007b2:	687b      	ldr	r3, [r7, #4]
200007b4:	6a1b      	ldr	r3, [r3, #32]
200007b6:	18d3      	adds	r3, r2, r3
200007b8:	0019      	movs	r1, r3
200007ba:	f7ff fef4 	bl	200005a6 <graphic_pixel_clear>
		for ( int i=0; i <= (o->geo_run->numpoints-1); i++){
200007be:	693b      	ldr	r3, [r7, #16]
200007c0:	3301      	adds	r3, #1
200007c2:	613b      	str	r3, [r7, #16]
200007c4:	687b      	ldr	r3, [r7, #4]
200007c6:	685b      	ldr	r3, [r3, #4]
200007c8:	681b      	ldr	r3, [r3, #0]
200007ca:	693a      	ldr	r2, [r7, #16]
200007cc:	429a      	cmp	r2, r3
200007ce:	dbdb      	blt.n	20000788 <clear_object+0x6e>
}
200007d0:	e056      	b.n	20000880 <clear_object+0x166>
	else if (o->geo_number==jump){
200007d2:	687b      	ldr	r3, [r7, #4]
200007d4:	691b      	ldr	r3, [r3, #16]
200007d6:	2b02      	cmp	r3, #2
200007d8:	d127      	bne.n	2000082a <clear_object+0x110>
		for ( int i=0; i <= (o->geo_jump->numpoints-1); i++){
200007da:	2300      	movs	r3, #0
200007dc:	60fb      	str	r3, [r7, #12]
200007de:	e01d      	b.n	2000081c <clear_object+0x102>
		graphic_pixel_clear( (o->geo_jump->px[i].x + o->posx), (o->geo_jump->px[i].y + o->posy));
200007e0:	687b      	ldr	r3, [r7, #4]
200007e2:	689a      	ldr	r2, [r3, #8]
200007e4:	68fb      	ldr	r3, [r7, #12]
200007e6:	3304      	adds	r3, #4
200007e8:	005b      	lsls	r3, r3, #1
200007ea:	18d3      	adds	r3, r2, r3
200007ec:	3304      	adds	r3, #4
200007ee:	781b      	ldrb	r3, [r3, #0]
200007f0:	001a      	movs	r2, r3
200007f2:	687b      	ldr	r3, [r7, #4]
200007f4:	69db      	ldr	r3, [r3, #28]
200007f6:	18d0      	adds	r0, r2, r3
200007f8:	687b      	ldr	r3, [r7, #4]
200007fa:	689a      	ldr	r2, [r3, #8]
200007fc:	68fb      	ldr	r3, [r7, #12]
200007fe:	3304      	adds	r3, #4
20000800:	005b      	lsls	r3, r3, #1
20000802:	18d3      	adds	r3, r2, r3
20000804:	3305      	adds	r3, #5
20000806:	781b      	ldrb	r3, [r3, #0]
20000808:	001a      	movs	r2, r3
2000080a:	687b      	ldr	r3, [r7, #4]
2000080c:	6a1b      	ldr	r3, [r3, #32]
2000080e:	18d3      	adds	r3, r2, r3
20000810:	0019      	movs	r1, r3
20000812:	f7ff fec8 	bl	200005a6 <graphic_pixel_clear>
		for ( int i=0; i <= (o->geo_jump->numpoints-1); i++){
20000816:	68fb      	ldr	r3, [r7, #12]
20000818:	3301      	adds	r3, #1
2000081a:	60fb      	str	r3, [r7, #12]
2000081c:	687b      	ldr	r3, [r7, #4]
2000081e:	689b      	ldr	r3, [r3, #8]
20000820:	681b      	ldr	r3, [r3, #0]
20000822:	68fa      	ldr	r2, [r7, #12]
20000824:	429a      	cmp	r2, r3
20000826:	dbdb      	blt.n	200007e0 <clear_object+0xc6>
}
20000828:	e02a      	b.n	20000880 <clear_object+0x166>
	else if (o->geo_number==duck){
2000082a:	687b      	ldr	r3, [r7, #4]
2000082c:	691b      	ldr	r3, [r3, #16]
2000082e:	2b03      	cmp	r3, #3
20000830:	d126      	bne.n	20000880 <clear_object+0x166>
		for ( int i=0; i <= (o->geo_duck->numpoints-1); i++){
20000832:	2300      	movs	r3, #0
20000834:	60bb      	str	r3, [r7, #8]
20000836:	e01d      	b.n	20000874 <clear_object+0x15a>
		graphic_pixel_clear( (o->geo_duck->px[i].x + o->posx), (o->geo_duck->px[i].y + o->posy));
20000838:	687b      	ldr	r3, [r7, #4]
2000083a:	68da      	ldr	r2, [r3, #12]
2000083c:	68bb      	ldr	r3, [r7, #8]
2000083e:	3304      	adds	r3, #4
20000840:	005b      	lsls	r3, r3, #1
20000842:	18d3      	adds	r3, r2, r3
20000844:	3304      	adds	r3, #4
20000846:	781b      	ldrb	r3, [r3, #0]
20000848:	001a      	movs	r2, r3
2000084a:	687b      	ldr	r3, [r7, #4]
2000084c:	69db      	ldr	r3, [r3, #28]
2000084e:	18d0      	adds	r0, r2, r3
20000850:	687b      	ldr	r3, [r7, #4]
20000852:	68da      	ldr	r2, [r3, #12]
20000854:	68bb      	ldr	r3, [r7, #8]
20000856:	3304      	adds	r3, #4
20000858:	005b      	lsls	r3, r3, #1
2000085a:	18d3      	adds	r3, r2, r3
2000085c:	3305      	adds	r3, #5
2000085e:	781b      	ldrb	r3, [r3, #0]
20000860:	001a      	movs	r2, r3
20000862:	687b      	ldr	r3, [r7, #4]
20000864:	6a1b      	ldr	r3, [r3, #32]
20000866:	18d3      	adds	r3, r2, r3
20000868:	0019      	movs	r1, r3
2000086a:	f7ff fe9c 	bl	200005a6 <graphic_pixel_clear>
		for ( int i=0; i <= (o->geo_duck->numpoints-1); i++){
2000086e:	68bb      	ldr	r3, [r7, #8]
20000870:	3301      	adds	r3, #1
20000872:	60bb      	str	r3, [r7, #8]
20000874:	687b      	ldr	r3, [r7, #4]
20000876:	68db      	ldr	r3, [r3, #12]
20000878:	681b      	ldr	r3, [r3, #0]
2000087a:	68ba      	ldr	r2, [r7, #8]
2000087c:	429a      	cmp	r2, r3
2000087e:	dbdb      	blt.n	20000838 <clear_object+0x11e>
}
20000880:	46c0      	nop			; (mov r8, r8)
20000882:	46bd      	mov	sp, r7
20000884:	b006      	add	sp, #24
20000886:	bd80      	pop	{r7, pc}

20000888 <move_catobject>:

void move_catobject (POBJECT o){	// efter k->move(k)
20000888:	b580      	push	{r7, lr}
2000088a:	b082      	sub	sp, #8
2000088c:	af00      	add	r7, sp, #0
2000088e:	6078      	str	r0, [r7, #4]
	
	clear_object(o);
20000890:	687b      	ldr	r3, [r7, #4]
20000892:	0018      	movs	r0, r3
20000894:	f7ff ff41 	bl	2000071a <clear_object>
	//o->geo_number=run;
	draw_object(o);	
20000898:	687b      	ldr	r3, [r7, #4]
2000089a:	0018      	movs	r0, r3
2000089c:	f7ff fe86 	bl	200005ac <draw_object>
	clear_object(o);
200008a0:	687b      	ldr	r3, [r7, #4]
200008a2:	0018      	movs	r0, r3
200008a4:	f7ff ff39 	bl	2000071a <clear_object>
	//o->geo_number=stand;
	draw_object(o);	
200008a8:	687b      	ldr	r3, [r7, #4]
200008aa:	0018      	movs	r0, r3
200008ac:	f7ff fe7e 	bl	200005ac <draw_object>
} 
200008b0:	46c0      	nop			; (mov r8, r8)
200008b2:	46bd      	mov	sp, r7
200008b4:	b002      	add	sp, #8
200008b6:	bd80      	pop	{r7, pc}

200008b8 <move_mouseobject>:

void move_mouseobject (POBJECT o){
200008b8:	b580      	push	{r7, lr}
200008ba:	b082      	sub	sp, #8
200008bc:	af00      	add	r7, sp, #0
200008be:	6078      	str	r0, [r7, #4]
	
	clear_object(o);
200008c0:	687b      	ldr	r3, [r7, #4]
200008c2:	0018      	movs	r0, r3
200008c4:	f7ff ff29 	bl	2000071a <clear_object>
	o->geo_number=stand;
200008c8:	687b      	ldr	r3, [r7, #4]
200008ca:	2200      	movs	r2, #0
200008cc:	611a      	str	r2, [r3, #16]
	o->posx = (o->posx + o->dirx);
200008ce:	687b      	ldr	r3, [r7, #4]
200008d0:	69da      	ldr	r2, [r3, #28]
200008d2:	687b      	ldr	r3, [r7, #4]
200008d4:	695b      	ldr	r3, [r3, #20]
200008d6:	18d2      	adds	r2, r2, r3
200008d8:	687b      	ldr	r3, [r7, #4]
200008da:	61da      	str	r2, [r3, #28]
	draw_object(o);
200008dc:	687b      	ldr	r3, [r7, #4]
200008de:	0018      	movs	r0, r3
200008e0:	f7ff fe64 	bl	200005ac <draw_object>
	clear_object(o);
200008e4:	687b      	ldr	r3, [r7, #4]
200008e6:	0018      	movs	r0, r3
200008e8:	f7ff ff17 	bl	2000071a <clear_object>
	o->geo_number=run;
200008ec:	687b      	ldr	r3, [r7, #4]
200008ee:	2201      	movs	r2, #1
200008f0:	611a      	str	r2, [r3, #16]
	o->posx = (o->posx + o->dirx);
200008f2:	687b      	ldr	r3, [r7, #4]
200008f4:	69da      	ldr	r2, [r3, #28]
200008f6:	687b      	ldr	r3, [r7, #4]
200008f8:	695b      	ldr	r3, [r3, #20]
200008fa:	18d2      	adds	r2, r2, r3
200008fc:	687b      	ldr	r3, [r7, #4]
200008fe:	61da      	str	r2, [r3, #28]
	draw_object(o);
20000900:	687b      	ldr	r3, [r7, #4]
20000902:	0018      	movs	r0, r3
20000904:	f7ff fe52 	bl	200005ac <draw_object>
} 
20000908:	46c0      	nop			; (mov r8, r8)
2000090a:	46bd      	mov	sp, r7
2000090c:	b002      	add	sp, #8
2000090e:	bd80      	pop	{r7, pc}

20000910 <move_damsugare>:

void move_damsugare (POBJECT o){
20000910:	b580      	push	{r7, lr}
20000912:	b082      	sub	sp, #8
20000914:	af00      	add	r7, sp, #0
20000916:	6078      	str	r0, [r7, #4]

	clear_object(o);
20000918:	687b      	ldr	r3, [r7, #4]
2000091a:	0018      	movs	r0, r3
2000091c:	f7ff fefd 	bl	2000071a <clear_object>
	o->posx = (o->posx + o->dirx);
20000920:	687b      	ldr	r3, [r7, #4]
20000922:	69da      	ldr	r2, [r3, #28]
20000924:	687b      	ldr	r3, [r7, #4]
20000926:	695b      	ldr	r3, [r3, #20]
20000928:	18d2      	adds	r2, r2, r3
2000092a:	687b      	ldr	r3, [r7, #4]
2000092c:	61da      	str	r2, [r3, #28]
	draw_object(o);
2000092e:	687b      	ldr	r3, [r7, #4]
20000930:	0018      	movs	r0, r3
20000932:	f7ff fe3b 	bl	200005ac <draw_object>
} 
20000936:	46c0      	nop			; (mov r8, r8)
20000938:	46bd      	mov	sp, r7
2000093a:	b002      	add	sp, #8
2000093c:	bd80      	pop	{r7, pc}

2000093e <move_jump_catobject>:

void move_jump_catobject (POBJECT o){
2000093e:	b580      	push	{r7, lr}
20000940:	b082      	sub	sp, #8
20000942:	af00      	add	r7, sp, #0
20000944:	6078      	str	r0, [r7, #4]
	clear_object(o);
20000946:	687b      	ldr	r3, [r7, #4]
20000948:	0018      	movs	r0, r3
2000094a:	f7ff fee6 	bl	2000071a <clear_object>
	o->geo_number=jump;
2000094e:	687b      	ldr	r3, [r7, #4]
20000950:	2202      	movs	r2, #2
20000952:	611a      	str	r2, [r3, #16]
	o->posy=(o->posy+o->diry);
20000954:	687b      	ldr	r3, [r7, #4]
20000956:	6a1a      	ldr	r2, [r3, #32]
20000958:	687b      	ldr	r3, [r7, #4]
2000095a:	699b      	ldr	r3, [r3, #24]
2000095c:	18d2      	adds	r2, r2, r3
2000095e:	687b      	ldr	r3, [r7, #4]
20000960:	621a      	str	r2, [r3, #32]
	if (hits_roof){
		o->diry=0;
20000962:	687b      	ldr	r3, [r7, #4]
20000964:	2200      	movs	r2, #0
20000966:	619a      	str	r2, [r3, #24]
	}
	draw_object(o);
20000968:	687b      	ldr	r3, [r7, #4]
2000096a:	0018      	movs	r0, r3
2000096c:	f7ff fe1e 	bl	200005ac <draw_object>
}	
20000970:	46c0      	nop			; (mov r8, r8)
20000972:	46bd      	mov	sp, r7
20000974:	b002      	add	sp, #8
20000976:	bd80      	pop	{r7, pc}

20000978 <move_duck_catobject>:

void move_duck_catobject (POBJECT o){
20000978:	b580      	push	{r7, lr}
2000097a:	b082      	sub	sp, #8
2000097c:	af00      	add	r7, sp, #0
2000097e:	6078      	str	r0, [r7, #4]
	clear_object(o);
20000980:	687b      	ldr	r3, [r7, #4]
20000982:	0018      	movs	r0, r3
20000984:	f7ff fec9 	bl	2000071a <clear_object>
	o->geo_number=duck;
20000988:	687b      	ldr	r3, [r7, #4]
2000098a:	2203      	movs	r2, #3
2000098c:	611a      	str	r2, [r3, #16]
	draw_object(o);
2000098e:	687b      	ldr	r3, [r7, #4]
20000990:	0018      	movs	r0, r3
20000992:	f7ff fe0b 	bl	200005ac <draw_object>
}
20000996:	46c0      	nop			; (mov r8, r8)
20000998:	46bd      	mov	sp, r7
2000099a:	b002      	add	sp, #8
2000099c:	bd80      	pop	{r7, pc}

2000099e <hits_roof>:

int hits_roof(POBJECT o){
2000099e:	b580      	push	{r7, lr}
200009a0:	b082      	sub	sp, #8
200009a2:	af00      	add	r7, sp, #0
200009a4:	6078      	str	r0, [r7, #4]
	 if (o->posx < 1){
200009a6:	687b      	ldr	r3, [r7, #4]
200009a8:	69db      	ldr	r3, [r3, #28]
200009aa:	2b00      	cmp	r3, #0
200009ac:	dc01      	bgt.n	200009b2 <hits_roof+0x14>
		return 1;
200009ae:	2301      	movs	r3, #1
200009b0:	e000      	b.n	200009b4 <hits_roof+0x16>
	}
	else {
		return 0;
200009b2:	2300      	movs	r3, #0
	}
}
200009b4:	0018      	movs	r0, r3
200009b6:	46bd      	mov	sp, r7
200009b8:	b002      	add	sp, #8
200009ba:	bd80      	pop	{r7, pc}

200009bc <set_object_speed>:

void set_object_speed (POBJECT o, int speedx, int speedy)
{
200009bc:	b580      	push	{r7, lr}
200009be:	b084      	sub	sp, #16
200009c0:	af00      	add	r7, sp, #0
200009c2:	60f8      	str	r0, [r7, #12]
200009c4:	60b9      	str	r1, [r7, #8]
200009c6:	607a      	str	r2, [r7, #4]
	o->dirx=speedx;
200009c8:	68fb      	ldr	r3, [r7, #12]
200009ca:	68ba      	ldr	r2, [r7, #8]
200009cc:	615a      	str	r2, [r3, #20]
	o->diry=speedy;
200009ce:	68fb      	ldr	r3, [r7, #12]
200009d0:	687a      	ldr	r2, [r7, #4]
200009d2:	619a      	str	r2, [r3, #24]
}
200009d4:	46c0      	nop			; (mov r8, r8)
200009d6:	46bd      	mov	sp, r7
200009d8:	b004      	add	sp, #16
200009da:	bd80      	pop	{r7, pc}

200009dc <exact_objects_overlap>:

int exact_objects_overlap (POBJECT o1, POBJECT o2){
200009dc:	b580      	push	{r7, lr}
200009de:	b086      	sub	sp, #24
200009e0:	af00      	add	r7, sp, #0
200009e2:	6078      	str	r0, [r7, #4]
200009e4:	6039      	str	r1, [r7, #0]
  int offset1x = o1->posx;
200009e6:	687b      	ldr	r3, [r7, #4]
200009e8:	69db      	ldr	r3, [r3, #28]
200009ea:	617b      	str	r3, [r7, #20]
  int offset1y = o1->posy;
200009ec:	687b      	ldr	r3, [r7, #4]
200009ee:	6a1b      	ldr	r3, [r3, #32]
200009f0:	613b      	str	r3, [r7, #16]
  int offset2x = o2->posx;
200009f2:	683b      	ldr	r3, [r7, #0]
200009f4:	69db      	ldr	r3, [r3, #28]
200009f6:	60fb      	str	r3, [r7, #12]
  int offset2y = o2->posy;
200009f8:	683b      	ldr	r3, [r7, #0]
200009fa:	6a1b      	ldr	r3, [r3, #32]
200009fc:	60bb      	str	r3, [r7, #8]
      if ((offset1x + o1->geo->px[i].x == offset2x + o2->geo->px[j].x) &&
        (offset1y + o1->geo->px[i].y == offset2y + o2->geo->px[j].y)) 
		return 1;
  }
   * */
  return 0;
200009fe:	2300      	movs	r3, #0
}
20000a00:	0018      	movs	r0, r3
20000a02:	46bd      	mov	sp, r7
20000a04:	b006      	add	sp, #24
20000a06:	bd80      	pop	{r7, pc}

20000a08 <__udivsi3>:
20000a08:	2200      	movs	r2, #0
20000a0a:	0843      	lsrs	r3, r0, #1
20000a0c:	428b      	cmp	r3, r1
20000a0e:	d374      	bcc.n	20000afa <__udivsi3+0xf2>
20000a10:	0903      	lsrs	r3, r0, #4
20000a12:	428b      	cmp	r3, r1
20000a14:	d35f      	bcc.n	20000ad6 <__udivsi3+0xce>
20000a16:	0a03      	lsrs	r3, r0, #8
20000a18:	428b      	cmp	r3, r1
20000a1a:	d344      	bcc.n	20000aa6 <__udivsi3+0x9e>
20000a1c:	0b03      	lsrs	r3, r0, #12
20000a1e:	428b      	cmp	r3, r1
20000a20:	d328      	bcc.n	20000a74 <__udivsi3+0x6c>
20000a22:	0c03      	lsrs	r3, r0, #16
20000a24:	428b      	cmp	r3, r1
20000a26:	d30d      	bcc.n	20000a44 <__udivsi3+0x3c>
20000a28:	22ff      	movs	r2, #255	; 0xff
20000a2a:	0209      	lsls	r1, r1, #8
20000a2c:	ba12      	rev	r2, r2
20000a2e:	0c03      	lsrs	r3, r0, #16
20000a30:	428b      	cmp	r3, r1
20000a32:	d302      	bcc.n	20000a3a <__udivsi3+0x32>
20000a34:	1212      	asrs	r2, r2, #8
20000a36:	0209      	lsls	r1, r1, #8
20000a38:	d065      	beq.n	20000b06 <__udivsi3+0xfe>
20000a3a:	0b03      	lsrs	r3, r0, #12
20000a3c:	428b      	cmp	r3, r1
20000a3e:	d319      	bcc.n	20000a74 <__udivsi3+0x6c>
20000a40:	e000      	b.n	20000a44 <__udivsi3+0x3c>
20000a42:	0a09      	lsrs	r1, r1, #8
20000a44:	0bc3      	lsrs	r3, r0, #15
20000a46:	428b      	cmp	r3, r1
20000a48:	d301      	bcc.n	20000a4e <__udivsi3+0x46>
20000a4a:	03cb      	lsls	r3, r1, #15
20000a4c:	1ac0      	subs	r0, r0, r3
20000a4e:	4152      	adcs	r2, r2
20000a50:	0b83      	lsrs	r3, r0, #14
20000a52:	428b      	cmp	r3, r1
20000a54:	d301      	bcc.n	20000a5a <__udivsi3+0x52>
20000a56:	038b      	lsls	r3, r1, #14
20000a58:	1ac0      	subs	r0, r0, r3
20000a5a:	4152      	adcs	r2, r2
20000a5c:	0b43      	lsrs	r3, r0, #13
20000a5e:	428b      	cmp	r3, r1
20000a60:	d301      	bcc.n	20000a66 <__udivsi3+0x5e>
20000a62:	034b      	lsls	r3, r1, #13
20000a64:	1ac0      	subs	r0, r0, r3
20000a66:	4152      	adcs	r2, r2
20000a68:	0b03      	lsrs	r3, r0, #12
20000a6a:	428b      	cmp	r3, r1
20000a6c:	d301      	bcc.n	20000a72 <__udivsi3+0x6a>
20000a6e:	030b      	lsls	r3, r1, #12
20000a70:	1ac0      	subs	r0, r0, r3
20000a72:	4152      	adcs	r2, r2
20000a74:	0ac3      	lsrs	r3, r0, #11
20000a76:	428b      	cmp	r3, r1
20000a78:	d301      	bcc.n	20000a7e <__udivsi3+0x76>
20000a7a:	02cb      	lsls	r3, r1, #11
20000a7c:	1ac0      	subs	r0, r0, r3
20000a7e:	4152      	adcs	r2, r2
20000a80:	0a83      	lsrs	r3, r0, #10
20000a82:	428b      	cmp	r3, r1
20000a84:	d301      	bcc.n	20000a8a <__udivsi3+0x82>
20000a86:	028b      	lsls	r3, r1, #10
20000a88:	1ac0      	subs	r0, r0, r3
20000a8a:	4152      	adcs	r2, r2
20000a8c:	0a43      	lsrs	r3, r0, #9
20000a8e:	428b      	cmp	r3, r1
20000a90:	d301      	bcc.n	20000a96 <__udivsi3+0x8e>
20000a92:	024b      	lsls	r3, r1, #9
20000a94:	1ac0      	subs	r0, r0, r3
20000a96:	4152      	adcs	r2, r2
20000a98:	0a03      	lsrs	r3, r0, #8
20000a9a:	428b      	cmp	r3, r1
20000a9c:	d301      	bcc.n	20000aa2 <__udivsi3+0x9a>
20000a9e:	020b      	lsls	r3, r1, #8
20000aa0:	1ac0      	subs	r0, r0, r3
20000aa2:	4152      	adcs	r2, r2
20000aa4:	d2cd      	bcs.n	20000a42 <__udivsi3+0x3a>
20000aa6:	09c3      	lsrs	r3, r0, #7
20000aa8:	428b      	cmp	r3, r1
20000aaa:	d301      	bcc.n	20000ab0 <__udivsi3+0xa8>
20000aac:	01cb      	lsls	r3, r1, #7
20000aae:	1ac0      	subs	r0, r0, r3
20000ab0:	4152      	adcs	r2, r2
20000ab2:	0983      	lsrs	r3, r0, #6
20000ab4:	428b      	cmp	r3, r1
20000ab6:	d301      	bcc.n	20000abc <__udivsi3+0xb4>
20000ab8:	018b      	lsls	r3, r1, #6
20000aba:	1ac0      	subs	r0, r0, r3
20000abc:	4152      	adcs	r2, r2
20000abe:	0943      	lsrs	r3, r0, #5
20000ac0:	428b      	cmp	r3, r1
20000ac2:	d301      	bcc.n	20000ac8 <__udivsi3+0xc0>
20000ac4:	014b      	lsls	r3, r1, #5
20000ac6:	1ac0      	subs	r0, r0, r3
20000ac8:	4152      	adcs	r2, r2
20000aca:	0903      	lsrs	r3, r0, #4
20000acc:	428b      	cmp	r3, r1
20000ace:	d301      	bcc.n	20000ad4 <__udivsi3+0xcc>
20000ad0:	010b      	lsls	r3, r1, #4
20000ad2:	1ac0      	subs	r0, r0, r3
20000ad4:	4152      	adcs	r2, r2
20000ad6:	08c3      	lsrs	r3, r0, #3
20000ad8:	428b      	cmp	r3, r1
20000ada:	d301      	bcc.n	20000ae0 <__udivsi3+0xd8>
20000adc:	00cb      	lsls	r3, r1, #3
20000ade:	1ac0      	subs	r0, r0, r3
20000ae0:	4152      	adcs	r2, r2
20000ae2:	0883      	lsrs	r3, r0, #2
20000ae4:	428b      	cmp	r3, r1
20000ae6:	d301      	bcc.n	20000aec <__udivsi3+0xe4>
20000ae8:	008b      	lsls	r3, r1, #2
20000aea:	1ac0      	subs	r0, r0, r3
20000aec:	4152      	adcs	r2, r2
20000aee:	0843      	lsrs	r3, r0, #1
20000af0:	428b      	cmp	r3, r1
20000af2:	d301      	bcc.n	20000af8 <__udivsi3+0xf0>
20000af4:	004b      	lsls	r3, r1, #1
20000af6:	1ac0      	subs	r0, r0, r3
20000af8:	4152      	adcs	r2, r2
20000afa:	1a41      	subs	r1, r0, r1
20000afc:	d200      	bcs.n	20000b00 <__udivsi3+0xf8>
20000afe:	4601      	mov	r1, r0
20000b00:	4152      	adcs	r2, r2
20000b02:	4610      	mov	r0, r2
20000b04:	4770      	bx	lr
20000b06:	e7ff      	b.n	20000b08 <__udivsi3+0x100>
20000b08:	b501      	push	{r0, lr}
20000b0a:	2000      	movs	r0, #0
20000b0c:	f000 f806 	bl	20000b1c <__aeabi_idiv0>
20000b10:	bd02      	pop	{r1, pc}
20000b12:	46c0      	nop			; (mov r8, r8)

20000b14 <__aeabi_uidivmod>:
20000b14:	2900      	cmp	r1, #0
20000b16:	d0f7      	beq.n	20000b08 <__udivsi3+0x100>
20000b18:	e776      	b.n	20000a08 <__udivsi3>
20000b1a:	4770      	bx	lr

20000b1c <__aeabi_idiv0>:
20000b1c:	4770      	bx	lr
20000b1e:	46c0      	nop			; (mov r8, r8)

20000b20 <cat_jump_geometry>:
20000b20:	000000bc 	strheq	r0, [r0], -ip
20000b24:	0000002b 	andeq	r0, r0, fp, lsr #32
20000b28:	00000014 	andeq	r0, r0, r4, lsl r0
20000b2c:	16001200 	strne	r1, [r0], -r0, lsl #4
20000b30:	13011101 	movwne	r1, #4353	; 0x1101
20000b34:	17011501 	strne	r1, [r1, -r1, lsl #10]
20000b38:	13021102 	movwne	r1, #8450	; 0x2102
20000b3c:	16021402 	strne	r1, [r2], -r2, lsl #8
20000b40:	11031702 	tstne	r3, r2, lsl #14
20000b44:	14031303 	strne	r1, [r3], #-771	; 0xfffffcfd
20000b48:	11041603 	tstne	r4, r3, lsl #12
20000b4c:	14041304 	strne	r1, [r4], #-772	; 0xfffffcfc
20000b50:	11051604 	tstne	r5, r4, lsl #12
20000b54:	14051305 	strne	r1, [r5], #-773	; 0xfffffcfb
20000b58:	11061605 	tstne	r6, r5, lsl #12
20000b5c:	16061406 	strne	r1, [r6], -r6, lsl #8
20000b60:	08070707 	stmdaeq	r7, {r0, r1, r2, r8, r9, sl}
20000b64:	11070907 	tstne	r7, r7, lsl #18
20000b68:	16071307 	strne	r1, [r7], -r7, lsl #6
20000b6c:	0a080608 	beq	20202394 <keyb_state+0x1fbbac>
20000b70:	13081108 	movwne	r1, #33032	; 0x8108
20000b74:	07091608 	streq	r1, [r9, -r8, lsl #12]
20000b78:	0b090809 	bleq	20242ba4 <keyb_state+0x23c3bc>
20000b7c:	13091109 	movwne	r1, #37129	; 0x9109
20000b80:	090a1609 	stmdbeq	sl, {r0, r3, r9, sl, ip}
20000b84:	110a0c0a 	tstne	sl, sl, lsl #24
20000b88:	16091309 	strne	r1, [r9], -r9, lsl #6
20000b8c:	0d0b0a0b 	vstreq	s0, [fp, #-44]	; 0xffffffd4
20000b90:	110b0e0b 	tstne	fp, fp, lsl #28
20000b94:	160b120b 	strne	r1, [fp], -fp, lsl #4
20000b98:	0f0c0b0c 	svceq	0x000c0b0c
20000b9c:	120c110c 	andne	r1, ip, #12, 2
20000ba0:	0c0d170c 	stceq	7, cr1, [sp], {12}
20000ba4:	110d0f0d 	tstne	sp, sp, lsl #30
20000ba8:	170d100d 	strne	r1, [sp, -sp]
20000bac:	170e0d0e 	strne	r0, [lr, -lr, lsl #26]
20000bb0:	170f0e0f 	strne	r0, [pc, -pc, lsl #28]
20000bb4:	10100f10 	andsne	r0, r0, r0, lsl pc
20000bb8:	0f111810 	svceq	0x00111810
20000bbc:	0f121811 	svceq	0x00121811
20000bc0:	0f131812 	svceq	0x00131812
20000bc4:	0f141813 	svceq	0x00141813
20000bc8:	0f151714 	svceq	0x00151714
20000bcc:	0f161715 	svceq	0x00161715
20000bd0:	0f171716 	svceq	0x00171716
20000bd4:	10181717 	andsne	r1, r8, r7, lsl r7
20000bd8:	10191718 	andsne	r1, r9, r8, lsl r7
20000bdc:	14191219 	ldrne	r1, [r9], #-537	; 0xfffffde7
20000be0:	091a1719 	ldmdbeq	sl, {r0, r3, r4, r8, r9, sl, ip}
20000be4:	0b1a0a1a 	bleq	20683454 <keyb_state+0x67cc6c>
20000be8:	0d1a0c1a 	ldceq	12, cr0, [sl, #-104]	; 0xffffff98
20000bec:	0f1a0e1a 	svceq	0x001a0e1a
20000bf0:	111a101a 	tstne	sl, sl, lsl r0
20000bf4:	131a121a 	tstne	sl, #-1610612735	; 0xa0000001
20000bf8:	171a141a 			; <UNDEFINED> instruction: 0x171a141a
20000bfc:	121b081b 	andsne	r0, fp, #1769472	; 0x1b0000
20000c00:	171b141b 			; <UNDEFINED> instruction: 0x171b141b
20000c04:	121c091c 	andsne	r0, ip, #28, 18	; 0x70000
20000c08:	171c141c 			; <UNDEFINED> instruction: 0x171c141c
20000c0c:	0a1d181c 	beq	20746c84 <keyb_state+0x74049c>
20000c10:	181d151d 	ldmdane	sp, {r0, r2, r3, r4, r8, sl, ip}
20000c14:	131e0b1e 	tstne	lr, #30720	; 0x7800
20000c18:	181e151e 	ldmdane	lr, {r1, r2, r3, r4, r8, sl, ip}
20000c1c:	101f0c1f 	andsne	r0, pc, pc, lsl ip	; <UNPREDICTABLE>
20000c20:	151f141f 	ldrne	r1, [pc, #-1055]	; 20000809 <clear_object+0xef>
20000c24:	0c20181f 	stceq	8, cr1, [r0], #-124	; 0xffffff84
20000c28:	14201220 	strtne	r1, [r0], #-544	; 0xfffffde0
20000c2c:	19201520 	stmdbne	r0!, {r5, r8, sl, ip}
20000c30:	12210c21 	eorne	r0, r1, #8448	; 0x2100
20000c34:	15211321 	strne	r1, [r1, #-801]!	; 0xfffffcdf
20000c38:	0c221921 			; <UNDEFINED> instruction: 0x0c221921
20000c3c:	14221222 	strtne	r1, [r2], #-546	; 0xfffffdde
20000c40:	19221522 	stmdbne	r2!, {r1, r5, r8, sl, ip}
20000c44:	10230c23 	eorne	r0, r3, r3, lsr #24
20000c48:	15231423 	strne	r1, [r3, #-1059]!	; 0xfffffbdd
20000c4c:	0b241923 	bleq	209070e0 <keyb_state+0x9008f8>
20000c50:	15241324 	strne	r1, [r4, #-804]!	; 0xfffffcdc
20000c54:	0a251924 	beq	209470ec <keyb_state+0x940904>
20000c58:	16251525 	strtne	r1, [r5], -r5, lsr #10
20000c5c:	09261925 	stmdbeq	r6!, {r0, r2, r5, r8, fp, ip}
20000c60:	14261226 	strtne	r1, [r6], #-550	; 0xfffffdda
20000c64:	19261626 	stmdbne	r6!, {r1, r2, r5, r9, sl, ip}
20000c68:	12270827 	eorne	r0, r7, #2555904	; 0x270000
20000c6c:	17271427 	strne	r1, [r7, -r7, lsr #8]!
20000c70:	09281927 	stmdbeq	r8!, {r0, r1, r2, r5, r8, fp, ip}
20000c74:	0b280a28 	bleq	20a0351c <keyb_state+0x9fcd34>
20000c78:	0d280c28 	stceq	12, cr0, [r8, #-160]!	; 0xffffff60
20000c7c:	0f280e28 	svceq	0x00280e28
20000c80:	11281028 			; <UNDEFINED> instruction: 0x11281028
20000c84:	13281228 			; <UNDEFINED> instruction: 0x13281228
20000c88:	17281428 	strne	r1, [r8, -r8, lsr #8]!
20000c8c:	1a281928 	bne	20a07134 <keyb_state+0xa0094c>
20000c90:	14291229 	strtne	r1, [r9], #-553	; 0xfffffdd7
20000c94:	19291729 	stmdbne	r9!, {r0, r3, r5, r8, r9, sl, ip}
20000c98:	122a1a29 	eorne	r1, sl, #167936	; 0x29000
20000c9c:	172a142a 	strne	r1, [sl, -sl, lsr #8]!
20000ca0:	1a2a192a 	bne	20a87150 <keyb_state+0xa80968>
20000ca4:	192b182b 	stmdbne	fp!, {r0, r1, r3, r5, fp, ip}
	...

20001554 <cat_run_geometry>:
20001554:	000000c9 	andeq	r0, r0, r9, asr #1
20001558:	0000002b 	andeq	r0, r0, fp, lsr #32
2000155c:	0000001e 	andeq	r0, r0, lr, lsl r0
20001560:	0d0b0c0b 	stceq	12, cr0, [fp, #-44]	; 0xffffffd4
20001564:	0f0b0e0b 	svceq	0x000b0e0b
20001568:	110b100b 	tstne	fp, fp
2000156c:	090c120b 	stmdbeq	ip, {r0, r1, r3, r9, ip}
20001570:	0b0c0a0c 	bleq	20303da8 <keyb_state+0x2fd5c0>
20001574:	140c130c 	strne	r1, [ip], #-780	; 0xfffffcf4
20001578:	070d150c 	streq	r1, [sp, -ip, lsl #10]
2000157c:	160d080d 	strne	r0, [sp], -sp, lsl #16
20001580:	180d170d 	stmdane	sp, {r0, r2, r3, r8, r9, sl, ip}
20001584:	1a0d190d 	bne	203479c0 <keyb_state+0x3411d8>
20001588:	1c0d1b0d 			; <UNDEFINED> instruction: 0x1c0d1b0d
2000158c:	060e1d0d 	streq	r1, [lr], -sp, lsl #26
20001590:	1e0e0b0e 	vmlane.f64	d0, d14, d14
20001594:	080f050f 	stmdaeq	pc, {r0, r1, r2, r3, r8, sl}	; <UNPREDICTABLE>
20001598:	0a0f090f 	beq	203c39dc <keyb_state+0x3bd1f4>
2000159c:	180f0c0f 	stmdane	pc, {r0, r1, r2, r3, sl, fp}	; <UNPREDICTABLE>
200015a0:	1a0f190f 	bne	203c79e4 <keyb_state+0x3c11fc>
200015a4:	1c0f1b0f 			; <UNDEFINED> instruction: 0x1c0f1b0f
200015a8:	04101e0f 	ldreq	r1, [r0], #-3599	; 0xfffff1f1
200015ac:	0c100710 	ldceq	7, cr0, [r0], {16}
200015b0:	1d101710 	ldcne	7, cr1, [r0, #-64]	; 0xffffffc0
200015b4:	03111e10 	tsteq	r1, #16, 28	; 0x100
200015b8:	0c110711 	ldceq	7, cr0, [r1], {17}
200015bc:	1e111611 	mrcne	6, 0, r1, cr1, cr1, {0}
200015c0:	01120012 	tsteq	r2, r2, lsl r0
200015c4:	03120c12 	tsteq	r2, #4608	; 0x1200
200015c8:	0c120512 	cfldr32eq	mvfx0, [r2], {18}
200015cc:	16121512 			; <UNDEFINED> instruction: 0x16121512
200015d0:	0c130013 	ldceq	0, cr0, [r3], {19}
200015d4:	17131613 			; <UNDEFINED> instruction: 0x17131613
200015d8:	19131813 	ldmdbne	r3, {r0, r1, r4, fp, ip}
200015dc:	03140114 	tsteq	r4, #20, 2
200015e0:	17140c14 			; <UNDEFINED> instruction: 0x17140c14
200015e4:	1b141a14 	blne	20507e3c <keyb_state+0x501654>
200015e8:	0c150215 	lfmeq	f0, 4, [r5], {21}
200015ec:	18151715 	ldmdane	r5, {r0, r2, r4, r8, r9, sl, ip}
200015f0:	1d151c15 	ldcne	12, cr1, [r5, #-84]	; 0xffffffac
200015f4:	18160c16 	ldmdane	r6, {r1, r2, r4, sl, fp}
200015f8:	1a161916 	bne	20587a58 <keyb_state+0x581270>
200015fc:	0d171e16 	ldceq	14, cr1, [r7, #-88]	; 0xffffffa8
20001600:	1b171817 	blne	205c7664 <keyb_state+0x5c0e7c>
20001604:	1e171c17 	mrcne	12, 0, r1, cr7, cr7, {0}
20001608:	18180e18 	ldmdane	r8, {r3, r4, r9, sl, fp}
2000160c:	1e181d18 	mrcne	13, 0, r1, cr8, cr8, {0}
20001610:	12190f19 	andsne	r0, r9, #25, 30	; 0x64
20001614:	19191419 	ldmdbne	r9, {r0, r3, r4, sl, ip}
20001618:	091a1e19 	ldmdbeq	sl, {r0, r3, r4, r9, sl, fp, ip}
2000161c:	0b1a0a1a 	bleq	20683e8c <keyb_state+0x67d6a4>
20001620:	0d1a0c1a 	ldceq	12, cr0, [sl, #-104]	; 0xffffff98
20001624:	0f1a0e1a 	svceq	0x001a0e1a
20001628:	111a101a 	tstne	sl, sl, lsl r0
2000162c:	131a121a 	tstne	sl, #-1610612735	; 0xa0000001
20001630:	1a1a141a 	bne	206866a0 <keyb_state+0x67feb8>
20001634:	121b081b 	andsne	r0, fp, #1769472	; 0x1b0000
20001638:	1a1b141b 	bne	206c66ac <keyb_state+0x6bfec4>
2000163c:	121c091c 	andsne	r0, ip, #28, 18	; 0x70000
20001640:	181c141c 	ldmdane	ip, {r2, r3, r4, sl, ip}
20001644:	1a1c191c 	bne	20707abc <keyb_state+0x7012d4>
20001648:	151d0a1d 	ldrne	r0, [sp, #-2589]	; 0xfffff5e3
2000164c:	1b1d1a1d 	blne	20747ec8 <keyb_state+0x7416e0>
20001650:	131e0b1e 	tstne	lr, #30720	; 0x7800
20001654:	1c1e151e 	cfldr32ne	mvfx1, [lr], {30}
20001658:	0c1f1d1e 	ldceq	13, cr1, [pc], {30}
2000165c:	141f101f 	ldrne	r1, [pc], #-31	; 20001664 <cat_run_geometry+0x110>
20001660:	1e1f151f 	mrcne	5, 0, r1, cr15, cr15, {0}
20001664:	12200c20 	eorne	r0, r0, #32, 24	; 0x2000
20001668:	15201420 	strne	r1, [r0, #-1056]!	; 0xfffffbe0
2000166c:	1a201920 	bne	20807af4 <keyb_state+0x80130c>
20001670:	1c201b20 			; <UNDEFINED> instruction: 0x1c201b20
20001674:	0c211e20 	stceq	14, cr1, [r1], #-128	; 0xffffff80
20001678:	13211221 			; <UNDEFINED> instruction: 0x13211221
2000167c:	1a211521 	bne	20846b08 <keyb_state+0x840320>
20001680:	1e211d21 	cdpne	13, 2, cr1, cr1, cr1, {1}
20001684:	12220c22 	eorne	r0, r2, #8704	; 0x2200
20001688:	15221422 	strne	r1, [r2, #-1058]!	; 0xfffffbde
2000168c:	1e221922 	vmulne.f16	s2, s4, s5	; <UNPREDICTABLE>
20001690:	10230c23 	eorne	r0, r3, r3, lsr #24
20001694:	15231423 	strne	r1, [r3, #-1059]!	; 0xfffffbdd
20001698:	16231623 	strtne	r1, [r3], -r3, lsr #12
2000169c:	19231823 	stmdbne	r3!, {r0, r1, r5, fp, ip}
200016a0:	0b241a24 	bleq	20907f38 <keyb_state+0x901750>
200016a4:	15241324 	strne	r1, [r4, #-804]!	; 0xfffffcdc
200016a8:	1b241824 	blne	20907740 <keyb_state+0x900f58>
200016ac:	15250a25 	strne	r0, [r5, #-2597]!	; 0xfffff5db
200016b0:	1c251925 			; <UNDEFINED> instruction: 0x1c251925
200016b4:	12260926 	eorne	r0, r6, #622592	; 0x98000
200016b8:	15261426 	strne	r1, [r6, #-1062]!	; 0xfffffbda
200016bc:	1d261a26 	vstmdbne	r6!, {s2-s39}
200016c0:	12270827 	eorne	r0, r7, #2555904	; 0x270000
200016c4:	1b271427 	blne	209c6768 <keyb_state+0x9bff80>
200016c8:	09281e27 	stmdbeq	r8!, {r0, r1, r2, r5, r9, sl, fp, ip}
200016cc:	0b280a28 	bleq	20a03f74 <keyb_state+0x9fd78c>
200016d0:	0d280c28 	stceq	12, cr0, [r8, #-160]!	; 0xffffff60
200016d4:	0f280e28 	svceq	0x00280e28
200016d8:	11281028 			; <UNDEFINED> instruction: 0x11281028
200016dc:	13281228 			; <UNDEFINED> instruction: 0x13281228
200016e0:	1c281428 	cfstrsne	mvf1, [r8], #-160	; 0xffffff60
200016e4:	12291e28 	eorne	r1, r9, #40, 28	; 0x280
200016e8:	1d291429 	cfstrsne	mvf1, [r9, #-164]!	; 0xffffff5c
200016ec:	122a1e29 	eorne	r1, sl, #656	; 0x290
200016f0:	0000142a 	andeq	r1, r0, sl, lsr #8
	...

20001f88 <cat_stand_geometry>:
20001f88:	000000bc 	strheq	r0, [r0], -ip
20001f8c:	0000002b 	andeq	r0, r0, fp, lsr #32
20001f90:	0000001e 	andeq	r0, r0, lr, lsl r0
20001f94:	02090109 	andeq	r0, r9, #1073741826	; 0x40000002
20001f98:	04090309 	streq	r0, [r9], #-777	; 0xfffffcf7
20001f9c:	010a0509 	tsteq	sl, r9, lsl #10
20001fa0:	070a060a 	streq	r0, [sl, -sl, lsl #12]
20001fa4:	190a080a 	stmdbne	sl, {r1, r3, fp}
20001fa8:	1b0a1a0a 	blne	202887d8 <keyb_state+0x281ff0>
20001fac:	1d0a1c0a 	stcne	12, cr1, [sl, #-40]	; 0xffffffd8
20001fb0:	030b020b 	movweq	r0, #45579	; 0xb20b
20001fb4:	0a0b090b 	beq	202c43e8 <keyb_state+0x2bdc00>
20001fb8:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
20001fbc:	0e0b0d0b 	cdpeq	13, 0, cr0, cr11, cr11, {0}
20001fc0:	100b0f0b 	andne	r0, fp, fp, lsl #30
20001fc4:	120b110b 	andne	r1, fp, #-1073741822	; 0xc0000002
20001fc8:	1a0b190b 	bne	202c83fc <keyb_state+0x2c1c14>
20001fcc:	1c0b1b0b 			; <UNDEFINED> instruction: 0x1c0b1b0b
20001fd0:	030c1d0b 	movweq	r1, #52491	; 0xcd0b
20001fd4:	050c040c 	streq	r0, [ip, #-1036]	; 0xfffffbf4
20001fd8:	120c060c 	andne	r0, ip, #12, 12	; 0xc00000
20001fdc:	140c130c 	strne	r1, [ip], #-780	; 0xfffffcf4
20001fe0:	180c150c 	stmdane	ip, {r2, r3, r8, sl, ip}
20001fe4:	070d1e0c 	streq	r1, [sp, -ip, lsl #28]
20001fe8:	160d080d 	strne	r0, [sp], -sp, lsl #16
20001fec:	1b0d170d 	blne	20347c28 <keyb_state+0x341440>
20001ff0:	1d0d1c0d 	stcne	12, cr1, [sp, #-52]	; 0xffffffcc
20001ff4:	090e1e0d 	stmdbeq	lr, {r0, r2, r3, r9, sl, fp, ip}
20001ff8:	0b0e0a0e 	bleq	20384838 <keyb_state+0x37e050>
20001ffc:	1a0e170e 	bne	20387c3c <keyb_state+0x381454>
20002000:	180f0c0f 	stmdane	pc, {r0, r1, r2, r3, sl, fp}	; <UNPREDICTABLE>
20002004:	0c10190f 			; <UNDEFINED> instruction: 0x0c10190f
20002008:	1a101910 	bne	20408450 <keyb_state+0x401c68>
2000200c:	1a110c11 	bne	20445058 <keyb_state+0x43e870>
20002010:	15120c12 	ldrne	r0, [r2, #-3090]	; 0xfffff3ee
20002014:	0c131b12 			; <UNDEFINED> instruction: 0x0c131b12
20002018:	1c131613 	ldcne	6, cr1, [r3], {19}
2000201c:	17140c14 			; <UNDEFINED> instruction: 0x17140c14
20002020:	19141814 	ldmdbne	r4, {r2, r4, fp, ip}
20002024:	0c151d14 	ldceq	13, cr1, [r5], {20}
20002028:	1a151715 	bne	20547c84 <keyb_state+0x54149c>
2000202c:	1e151b15 	vmovne.32	r1, d5[0]
20002030:	17160c16 			; <UNDEFINED> instruction: 0x17160c16
20002034:	1c161816 	ldcne	8, cr1, [r6], {22}
20002038:	0d171e16 	ldceq	14, cr1, [r7, #-88]	; 0xffffffa8
2000203c:	1d171817 	ldcne	8, cr1, [r7, #-92]	; 0xffffffa4
20002040:	0e181e17 	mrceq	14, 0, r1, cr8, cr7, {0}
20002044:	1e181818 	mrcne	8, 0, r1, cr8, cr8, {0}
20002048:	12190f19 	andsne	r0, r9, #25, 30	; 0x64
2000204c:	19191419 	ldmdbne	r9, {r0, r3, r4, sl, ip}
20002050:	0a1a091a 	beq	206844c0 <keyb_state+0x67dcd8>
20002054:	0c1a0b1a 			; <UNDEFINED> instruction: 0x0c1a0b1a
20002058:	0e1a0d1a 	mrceq	13, 0, r0, cr10, cr10, {0}
2000205c:	101a0f1a 	andsne	r0, sl, sl, lsl pc
20002060:	121a111a 	andsne	r1, sl, #-2147483642	; 0x80000006
20002064:	141a131a 	ldrne	r1, [sl], #-794	; 0xfffffce6
20002068:	081b1a1a 	ldmdaeq	fp, {r1, r3, r4, r9, fp, ip}
2000206c:	141b121b 	ldrne	r1, [fp], #-539	; 0xfffffde5
20002070:	091c1a1b 	ldmdbeq	ip, {r0, r1, r3, r4, r9, fp, ip}
20002074:	141c121c 	ldrne	r1, [ip], #-540	; 0xfffffde4
20002078:	0a1d1a1c 	beq	207488f0 <keyb_state+0x742108>
2000207c:	1a1d151d 	bne	207474f8 <keyb_state+0x740d10>
20002080:	131e0b1e 	tstne	lr, #30720	; 0x7800
20002084:	1a1e151e 	bne	20787504 <keyb_state+0x780d1c>
20002088:	1d1e1c1e 	ldcne	12, cr1, [lr, #-120]	; 0xffffff88
2000208c:	0c1f1e1e 	ldceq	14, cr1, [pc], {30}
20002090:	141f101f 	ldrne	r1, [pc], #-31	; 20002098 <cat_stand_geometry+0x110>
20002094:	1a1f151f 	bne	207c7518 <keyb_state+0x7c0d30>
20002098:	0c201e1f 	stceq	14, cr1, [r0], #-124	; 0xffffff84
2000209c:	14201220 	strtne	r1, [r0], #-544	; 0xfffffde0
200020a0:	1c201520 	cfstr32ne	mvfx1, [r0], #-128	; 0xffffff80
200020a4:	0c211d20 	stceq	13, cr1, [r1], #-128	; 0xffffff80
200020a8:	13211221 			; <UNDEFINED> instruction: 0x13211221
200020ac:	1a211521 	bne	20847538 <keyb_state+0x840d50>
200020b0:	0c221d21 	stceq	13, cr1, [r2], #-132	; 0xffffff7c
200020b4:	14221222 	strtne	r1, [r2], #-546	; 0xfffffdde
200020b8:	19221522 	stmdbne	r2!, {r1, r5, r8, sl, ip}
200020bc:	1b221a22 	blne	2088894c <keyb_state+0x882164>
200020c0:	0c231e22 	stceq	14, cr1, [r3], #-136	; 0xffffff78
200020c4:	14231023 	strtne	r1, [r3], #-35	; 0xffffffdd
200020c8:	16231523 	strtne	r1, [r3], -r3, lsr #10
200020cc:	18231623 	stmdane	r3!, {r0, r1, r5, r9, sl, ip}
200020d0:	1c241923 			; <UNDEFINED> instruction: 0x1c241923
200020d4:	0b241e24 	bleq	2090996c <keyb_state+0x903184>
200020d8:	15241324 	strne	r1, [r4, #-804]!	; 0xfffffcdc
200020dc:	1e241d24 	cdpne	13, 2, cr1, cr4, cr4, {1}
200020e0:	15250a25 	strne	r0, [r5, #-2597]!	; 0xfffff5db
200020e4:	09261e25 	stmdbeq	r6!, {r0, r2, r5, r9, sl, fp, ip}
200020e8:	14261226 	strtne	r1, [r6], #-550	; 0xfffffdda
200020ec:	08271526 	stmdaeq	r7!, {r1, r2, r5, r8, sl, ip}
200020f0:	14271227 	strtne	r1, [r7], #-551	; 0xfffffdd9
200020f4:	0a280928 	beq	20a0459c <keyb_state+0x9fddb4>
200020f8:	0c280b28 			; <UNDEFINED> instruction: 0x0c280b28
200020fc:	0e280d28 	cdpeq	13, 2, cr0, cr8, cr8, {1}
20002100:	10280f28 	eorne	r0, r8, r8, lsr #30
20002104:	12281128 	eorne	r1, r8, #40, 2
20002108:	14281328 	strtne	r1, [r8], #-808	; 0xfffffcd8
2000210c:	14291229 	strtne	r1, [r9], #-553	; 0xfffffdd7
20002110:	142a122a 	strtne	r1, [sl], #-554	; 0xfffffdd6
	...

200029bc <cat_duck_geometry>:
200029bc:	000000bc 	strheq	r0, [r0], -ip
200029c0:	0000002b 	andeq	r0, r0, fp, lsr #32
200029c4:	00000014 	andeq	r0, r0, r4, lsl r0
200029c8:	02090109 	andeq	r0, r9, #1073741826	; 0x40000002
200029cc:	04090309 	streq	r0, [r9], #-777	; 0xfffffcf7
200029d0:	010a0509 	tsteq	sl, r9, lsl #10
200029d4:	070a060a 	streq	r0, [sl, -sl, lsl #12]
200029d8:	020b080a 	andeq	r0, fp, #655360	; 0xa0000
200029dc:	090b030b 	stmdbeq	fp, {r0, r1, r3, r8, r9}
200029e0:	0b0b0a0b 	bleq	202c5214 <keyb_state+0x2bea2c>
200029e4:	0d0b0c0b 	stceq	12, cr0, [fp, #-44]	; 0xffffffd4
200029e8:	0f0b0e0b 	svceq	0x000b0e0b
200029ec:	110b100b 	tstne	fp, fp
200029f0:	030c120b 	movweq	r1, #49675	; 0xc20b
200029f4:	050c040c 	streq	r0, [ip, #-1036]	; 0xfffffbf4
200029f8:	120c060c 	andne	r0, ip, #12, 12	; 0xc00000
200029fc:	140c130c 	strne	r1, [ip], #-780	; 0xfffffcf4
20002a00:	070d150c 	streq	r1, [sp, -ip, lsl #10]
20002a04:	160d080d 	strne	r0, [sp], -sp, lsl #16
20002a08:	0a0e090e 	beq	20384e48 <keyb_state+0x37e660>
20002a0c:	0c0f0b0e 			; <UNDEFINED> instruction: 0x0c0f0b0e
20002a10:	0c110c10 	ldceq	12, cr0, [r1], {16}
20002a14:	15120c12 	ldrne	r0, [r2, #-3090]	; 0xfffff3ee
20002a18:	16130c13 			; <UNDEFINED> instruction: 0x16130c13
20002a1c:	0c150c14 	ldceq	12, cr0, [r5], {20}
20002a20:	0d170c16 	ldceq	12, cr0, [r7, #-88]	; 0xffffffa8
20002a24:	0f190e18 	svceq	0x00190e18
20002a28:	14191219 	ldrne	r1, [r9], #-537	; 0xfffffde7
20002a2c:	0a1a091a 	beq	20684e9c <keyb_state+0x67e6b4>
20002a30:	0c1a0b1a 			; <UNDEFINED> instruction: 0x0c1a0b1a
20002a34:	0e1a0d1a 	mrceq	13, 0, r0, cr10, cr10, {0}
20002a38:	101a0f1a 	andsne	r0, sl, sl, lsl pc
20002a3c:	121a111a 	andsne	r1, sl, #-2147483642	; 0x80000006
20002a40:	141a131a 	ldrne	r1, [sl], #-794	; 0xfffffce6
20002a44:	121b081b 	andsne	r0, fp, #1769472	; 0x1b0000
20002a48:	091c141b 	ldmdbeq	ip, {r0, r1, r3, r4, sl, ip}
20002a4c:	141c121c 	ldrne	r1, [ip], #-540	; 0xfffffde4
20002a50:	151d0a1d 	ldrne	r0, [sp, #-2589]	; 0xfffff5e3
20002a54:	131e0b1e 	tstne	lr, #30720	; 0x7800
20002a58:	0c1f151e 	cfldr32eq	mvfx1, [pc], {30}
20002a5c:	141f101f 	ldrne	r1, [pc], #-31	; 20002a64 <cat_duck_geometry+0xa8>
20002a60:	0c20151f 	cfstr32eq	mvfx1, [r0], #-124	; 0xffffff84
20002a64:	14201220 	strtne	r1, [r0], #-544	; 0xfffffde0
20002a68:	0c211520 	cfstr32eq	mvfx1, [r1], #-128	; 0xffffff80
20002a6c:	13211221 			; <UNDEFINED> instruction: 0x13211221
20002a70:	0c221521 	cfstr32eq	mvfx1, [r2], #-132	; 0xffffff7c
20002a74:	14221222 	strtne	r1, [r2], #-546	; 0xfffffdde
20002a78:	0c231522 	cfstr32eq	mvfx1, [r3], #-136	; 0xffffff78
20002a7c:	14231023 	strtne	r1, [r3], #-35	; 0xffffffdd
20002a80:	16231523 	strtne	r1, [r3], -r3, lsr #10
20002a84:	13240b24 			; <UNDEFINED> instruction: 0x13240b24
20002a88:	0a251524 	beq	20947f20 <keyb_state+0x941738>
20002a8c:	09261525 	stmdbeq	r6!, {r0, r2, r5, r8, sl, ip}
20002a90:	14261226 	strtne	r1, [r6], #-550	; 0xfffffdda
20002a94:	08271526 	stmdaeq	r7!, {r1, r2, r5, r8, sl, ip}
20002a98:	14271227 	strtne	r1, [r7], #-551	; 0xfffffdd9
20002a9c:	0a280928 	beq	20a04f44 <keyb_state+0x9fe75c>
20002aa0:	0c280b28 			; <UNDEFINED> instruction: 0x0c280b28
20002aa4:	0e280d28 	cdpeq	13, 2, cr0, cr8, cr8, {1}
20002aa8:	10280f28 	eorne	r0, r8, r8, lsr #30
20002aac:	12281128 	eorne	r1, r8, #40, 2
20002ab0:	14281328 	strtne	r1, [r8], #-808	; 0xfffffcd8
20002ab4:	14291229 	strtne	r1, [r9], #-553	; 0xfffffdd7
20002ab8:	142a122a 	strtne	r1, [sl], #-554	; 0xfffffdd6
	...

200033f0 <mouse_stand_geometry>:
200033f0:	00000035 	andeq	r0, r0, r5, lsr r0
200033f4:	00000018 	andeq	r0, r0, r8, lsl r0
200033f8:	0000000a 	andeq	r0, r0, sl
200033fc:	09000500 	stmdbeq	r0, {r8, sl}
20003400:	08010601 	stmdaeq	r1, {r0, r9, sl}
20003404:	06030702 	streq	r0, [r3], -r2, lsl #14
20003408:	05040803 	streq	r0, [r4, #-2051]	; 0xfffff7fd
2000340c:	04050804 	streq	r0, [r5], #-2052	; 0xfffff7fc
20003410:	04060805 	streq	r0, [r6], #-2053	; 0xfffff7fb
20003414:	08060606 	stmdaeq	r6, {r1, r2, r9, sl}
20003418:	08070307 	stmdaeq	r7, {r0, r1, r2, r8, r9}
2000341c:	01080907 	tsteq	r8, r7, lsl #18
20003420:	09080208 	stmdbeq	r8, {r3, r9}
20003424:	08090709 	stmdaeq	r9, {r0, r3, r8, r9, sl}
20003428:	040a000a 	streq	r0, [sl], #-10
2000342c:	000b080a 	andeq	r0, fp, sl, lsl #16
20003430:	080b030b 	stmdaeq	fp, {r0, r1, r3, r8, r9}
20003434:	020c010c 	andeq	r0, ip, #12, 2
20003438:	080c030c 	stmdaeq	ip, {r2, r3, r8, r9}
2000343c:	080d030d 	stmdaeq	sp, {r0, r2, r3, r8, r9}
20003440:	030e090d 	movweq	r0, #59661	; 0xe90d
20003444:	030f090e 	movweq	r0, #63758	; 0xf90e
20003448:	0a0f090f 	beq	203c588c <keyb_state+0x3bf0a4>
2000344c:	08100410 	ldmdaeq	r0, {r4, sl}
20003450:	06110511 			; <UNDEFINED> instruction: 0x06110511
20003454:	08110711 	ldmdaeq	r1, {r0, r4, r8, r9, sl}
20003458:	07130712 			; <UNDEFINED> instruction: 0x07130712
2000345c:	05150614 	ldreq	r0, [r5, #-1556]	; 0xfffff9ec
20003460:	03160415 	tsteq	r6, #352321536	; 0x15000000
20003464:	00000317 	andeq	r0, r0, r7, lsl r3
	...

20003e24 <mouse_run_geometry>:
20003e24:	00000035 	andeq	r0, r0, r5, lsr r0
20003e28:	00000018 	andeq	r0, r0, r8, lsl r0
20003e2c:	0000000a 	andeq	r0, r0, sl
20003e30:	09000500 	stmdbeq	r0, {r8, sl}
20003e34:	08010601 	stmdaeq	r1, {r0, r9, sl}
20003e38:	06030702 	streq	r0, [r3], -r2, lsl #14
20003e3c:	05040803 	streq	r0, [r4, #-2051]	; 0xfffff7fd
20003e40:	04050804 	streq	r0, [r5], #-2052	; 0xfffff7fc
20003e44:	04060805 	streq	r0, [r6], #-2053	; 0xfffff7fb
20003e48:	08060606 	stmdaeq	r6, {r1, r2, r9, sl}
20003e4c:	08070307 	stmdaeq	r7, {r0, r1, r2, r8, r9}
20003e50:	02080108 	andeq	r0, r8, #8, 2
20003e54:	07090908 	streq	r0, [r9, -r8, lsl #18]
20003e58:	09090809 	stmdbeq	r9, {r0, r3, fp}
20003e5c:	040a000a 	streq	r0, [sl], #-10
20003e60:	000b080a 	andeq	r0, fp, sl, lsl #16
20003e64:	080b030b 	stmdaeq	fp, {r0, r1, r3, r8, r9}
20003e68:	020c010c 	andeq	r0, ip, #12, 2
20003e6c:	080c030c 	stmdaeq	ip, {r2, r3, r8, r9}
20003e70:	080d030d 	stmdaeq	sp, {r0, r2, r3, r8, r9}
20003e74:	090e030e 	stmdbeq	lr, {r1, r2, r3, r8, r9}
20003e78:	090f030f 	stmdbeq	pc, {r0, r1, r2, r3, r8, r9}	; <UNPREDICTABLE>
20003e7c:	04100a0f 	ldreq	r0, [r0], #-2575	; 0xfffff5f1
20003e80:	09100810 	ldmdbeq	r0, {r4, fp}
20003e84:	06110511 			; <UNDEFINED> instruction: 0x06110511
20003e88:	08110711 	ldmdaeq	r1, {r0, r4, r8, r9, sl}
20003e8c:	07130712 			; <UNDEFINED> instruction: 0x07130712
20003e90:	05150614 	ldreq	r0, [r5, #-1556]	; 0xfffff9ec
20003e94:	03160415 	tsteq	r6, #352321536	; 0x15000000
20003e98:	00000317 	andeq	r0, r0, r7, lsl r3
	...

20004858 <bird_run_geometry>:
20004858:	00000035 	andeq	r0, r0, r5, lsr r0
2000485c:	00000012 	andeq	r0, r0, r2, lsl r0
20004860:	0000000f 	andeq	r0, r0, pc
20004864:	07010800 	streq	r0, [r1, -r0, lsl #16]
20004868:	06020801 	streq	r0, [r2], -r1, lsl #16
2000486c:	05030902 	streq	r0, [r3, #-2306]	; 0xfffff6fe
20004870:	09030703 	stmdbeq	r3, {r0, r1, r8, r9, sl}
20004874:	09040504 	stmdbeq	r4, {r2, r8, sl}
20004878:	09050505 	stmdbeq	r5, {r0, r2, r8, sl}
2000487c:	09060606 	stmdbeq	r6, {r1, r2, r9, sl}
20004880:	0a070607 	beq	201c60a4 <keyb_state+0x1bf8bc>
20004884:	0a080508 	beq	20205cac <keyb_state+0x1ff4c4>
20004888:	05090409 	streq	r0, [r9, #-1033]	; 0xfffffbf7
2000488c:	030a0b09 	movweq	r0, #43785	; 0xab09
20004890:	0c0a050a 	cfstr32eq	mvfx0, [sl], {10}
20004894:	050b020b 	streq	r0, [fp, #-523]	; 0xfffffdf5
20004898:	010c0d0b 	tsteq	ip, fp, lsl #26
2000489c:	0e0c050c 	cfsh32eq	mvfx0, mvfx12, #12
200048a0:	000d080c 	andeq	r0, sp, ip, lsl #16
200048a4:	020d010d 	andeq	r0, sp, #1073741827	; 0x40000003
200048a8:	040d030d 	streq	r0, [sp], #-781	; 0xfffffcf3
200048ac:	090d050d 	stmdbeq	sp, {r0, r2, r3, r8, sl}
200048b0:	0b0d0a0d 	bleq	203470ec <keyb_state+0x340904>
200048b4:	0d0d0c0d 	stceq	12, cr0, [sp, #-52]	; 0xffffffcc
200048b8:	040e0e0d 	streq	r0, [lr], #-3597	; 0xfffff1f3
200048bc:	040f090e 	streq	r0, [pc], #-2318	; 200048c4 <bird_run_geometry+0x6c>
200048c0:	0310090f 	tsteq	r0, #245760	; 0x3c000
200048c4:	03110810 	tsteq	r1, #16, 16	; 0x100000
200048c8:	05110411 	ldreq	r0, [r1, #-1041]	; 0xfffffbef
200048cc:	00000611 	andeq	r0, r0, r1, lsl r6
	...

2000528c <bird_stand_geometry>:
2000528c:	0000002f 	andeq	r0, r0, pc, lsr #32
20005290:	00000012 	andeq	r0, r0, r2, lsl r0
20005294:	0000000f 	andeq	r0, r0, pc
20005298:	07010800 	streq	r0, [r1, -r0, lsl #16]
2000529c:	06020801 	streq	r0, [r2], -r1, lsl #16
200052a0:	05030902 	streq	r0, [r3, #-2306]	; 0xfffff6fe
200052a4:	09030703 	stmdbeq	r3, {r0, r1, r8, r9, sl}
200052a8:	09040504 	stmdbeq	r4, {r2, r8, sl}
200052ac:	09050505 	stmdbeq	r5, {r0, r2, r8, sl}
200052b0:	09060606 	stmdbeq	r6, {r1, r2, r9, sl}
200052b4:	06070407 	streq	r0, [r7], -r7, lsl #8
200052b8:	06070a07 	streq	r0, [r7], -r7, lsl #20
200052bc:	05080308 	streq	r0, [r8, #-776]	; 0xfffffcf8
200052c0:	02090a08 	andeq	r0, r9, #8, 20	; 0x8000
200052c4:	0a090409 	beq	202462f0 <keyb_state+0x23fb08>
200052c8:	0a0a030a 	beq	20285ef8 <keyb_state+0x27f710>
200052cc:	0a0b020b 	beq	202c5b00 <keyb_state+0x2bf318>
200052d0:	060c010c 	streq	r0, [ip], -ip, lsl #2
200052d4:	0a0c070c 	beq	20306f0c <keyb_state+0x300724>
200052d8:	030d020d 	movweq	r0, #53773	; 0xd20d
200052dc:	050d040d 	streq	r0, [sp, #-1037]	; 0xfffffbf3
200052e0:	040e090d 	streq	r0, [lr], #-2317	; 0xfffff6f3
200052e4:	040f090e 	streq	r0, [pc], #-2318	; 200052ec <bird_stand_geometry+0x60>
200052e8:	0310080f 	tsteq	r0, #983040	; 0xf0000
200052ec:	03110710 	tsteq	r1, #16, 14	; 0x400000
200052f0:	05110411 	ldreq	r0, [r1, #-1041]	; 0xfffffbef
200052f4:	00000611 	andeq	r0, r0, r1, lsl r6
	...

20005cc0 <damsugare_geometry>:
20005cc0:	00000032 	andeq	r0, r0, r2, lsr r0
20005cc4:	00000018 	andeq	r0, r0, r8, lsl r0
20005cc8:	0000000a 	andeq	r0, r0, sl
20005ccc:	13001200 	movwne	r1, #512	; 0x200
20005cd0:	13011101 	movwne	r1, #4353	; 0x1101
20005cd4:	13021102 	movwne	r1, #8450	; 0x2102
20005cd8:	13031003 	movwne	r1, #12291	; 0x3003
20005cdc:	09040804 	stmdbeq	r4, {r2, fp}
20005ce0:	0b040a04 	bleq	201084f8 <keyb_state+0x101d10>
20005ce4:	0d040c04 	stceq	12, cr0, [r4, #-16]
20005ce8:	0f040e04 	svceq	0x00040e04
20005cec:	13041004 	movwne	r1, #16388	; 0x4004
20005cf0:	07050605 	streq	r0, [r5, -r5, lsl #12]
20005cf4:	04061305 	streq	r1, [r6], #-773	; 0xfffffcfb
20005cf8:	08060506 	stmdaeq	r6, {r1, r2, r8, sl}
20005cfc:	0a060906 	beq	2018811c <keyb_state+0x181934>
20005d00:	0c060b06 			; <UNDEFINED> instruction: 0x0c060b06
20005d04:	0e060d06 	cdpeq	13, 0, cr0, cr6, cr6, {0}
20005d08:	10060f06 	andne	r0, r6, r6, lsl #30
20005d0c:	03071306 	movweq	r1, #29446	; 0x7306
20005d10:	07070607 	streq	r0, [r7, -r7, lsl #12]
20005d14:	11071007 	tstne	r7, r7
20005d18:	13071207 	movwne	r1, #29191	; 0x7207
20005d1c:	04080208 	streq	r0, [r8], #-520	; 0xfffffdf8
20005d20:	01090508 	tsteq	r9, r8, lsl #10
20005d24:	010a0309 	tsteq	sl, r9, lsl #6
20005d28:	010b030a 	tsteq	fp, sl, lsl #6
20005d2c:	000c030b 	andeq	r0, ip, fp, lsl #6
20005d30:	000d020c 	andeq	r0, sp, ip, lsl #4
20005d34:	090d020d 	stmdbeq	sp, {r0, r2, r3, r9}
20005d38:	0b0d0a0d 	bleq	20348574 <keyb_state+0x341d8c>
20005d3c:	0d0d0c0d 	stceq	12, cr0, [sp, #-52]	; 0xffffffcc
20005d40:	110d100d 	tstne	sp, sp
20005d44:	030e010e 	movweq	r0, #57614	; 0xe10e
20005d48:	0e0e080e 	cdpeq	8, 0, cr0, cr14, cr14, {0}
20005d4c:	120e0f0e 	andne	r0, lr, #14, 30	; 0x38
20005d50:	040f010f 	streq	r0, [pc], #-271	; 20005d58 <damsugare_geometry+0x98>
20005d54:	060f050f 	streq	r0, [pc], -pc, lsl #10
20005d58:	0e0f070f 	cdpeq	7, 0, cr0, cr15, cr15, {0}
20005d5c:	0210130f 	andseq	r1, r0, #1006632960	; 0x3c000000
20005d60:	0e100310 	mrceq	3, 0, r0, cr0, cr0, {0}
20005d64:	04111310 	ldreq	r1, [r1], #-784	; 0xfffffcf0
20005d68:	0e110511 	mrceq	5, 0, r0, cr1, cr1, {0}
20005d6c:	06121311 			; <UNDEFINED> instruction: 0x06121311
20005d70:	0f120712 	svceq	0x00120712
20005d74:	07131212 			; <UNDEFINED> instruction: 0x07131212
20005d78:	11131013 	tstne	r3, r3, lsl r0
20005d7c:	07141313 			; <UNDEFINED> instruction: 0x07141313
20005d80:	08151314 	ldmdaeq	r5, {r2, r4, r8, r9, ip}
20005d84:	13150915 	tstne	r5, #344064	; 0x54000
20005d88:	13160916 	tstne	r6, #360448	; 0x58000
20005d8c:	13170a17 	tstne	r7, #94208	; 0x17000
20005d90:	11180b18 	tstne	r8, r8, lsl fp
20005d94:	0c191218 	lfmeq	f1, 4, [r9], {24}
20005d98:	0e190d19 	mrceq	13, 0, r0, cr9, cr9, {0}
20005d9c:	10190f19 	andsne	r0, r9, r9, lsl pc
	...

200066f4 <cat>:
200066f4:	20001f88 	andcs	r1, r0, r8, lsl #31
200066f8:	20001554 	andcs	r1, r0, r4, asr r5
200066fc:	20000b20 	andcs	r0, r0, r0, lsr #22
20006700:	200029bc 			; <UNDEFINED> instruction: 0x200029bc
	...
20006710:	00000005 	andeq	r0, r0, r5
20006714:	0000001e 	andeq	r0, r0, lr, lsl r0
20006718:	200005ad 	andcs	r0, r0, sp, lsr #11
2000671c:	2000071b 	andcs	r0, r0, fp, lsl r7
20006720:	20000889 	andcs	r0, r0, r9, lsl #17
20006724:	200009bd 			; <UNDEFINED> instruction: 0x200009bd

20006728 <mouse>:
20006728:	200033f0 	strdcs	r3, [r0], -r0
2000672c:	20003e24 	andcs	r3, r0, r4, lsr #28
20006730:	20000b20 	andcs	r0, r0, r0, lsr #22
20006734:	200029bc 			; <UNDEFINED> instruction: 0x200029bc
20006738:	00000000 	andeq	r0, r0, r0
2000673c:	fffffffd 			; <UNDEFINED> instruction: 0xfffffffd
20006740:	00000000 	andeq	r0, r0, r0
20006744:	00000081 	andeq	r0, r0, r1, lsl #1
20006748:	00000032 	andeq	r0, r0, r2, lsr r0
2000674c:	200005ad 	andcs	r0, r0, sp, lsr #11
20006750:	2000071b 	andcs	r0, r0, fp, lsl r7
20006754:	200008b9 			; <UNDEFINED> instruction: 0x200008b9
20006758:	200009bd 			; <UNDEFINED> instruction: 0x200009bd

2000675c <bird>:
2000675c:	2000528c 	andcs	r5, r0, ip, lsl #5
20006760:	20004858 	andcs	r4, r0, r8, asr r8
20006764:	20000b20 	andcs	r0, r0, r0, lsr #22
20006768:	200029bc 			; <UNDEFINED> instruction: 0x200029bc
2000676c:	00000000 	andeq	r0, r0, r0
20006770:	fffffffd 			; <UNDEFINED> instruction: 0xfffffffd
20006774:	00000000 	andeq	r0, r0, r0
20006778:	00000081 	andeq	r0, r0, r1, lsl #1
2000677c:	0000000a 	andeq	r0, r0, sl
20006780:	200005ad 	andcs	r0, r0, sp, lsr #11
20006784:	2000071b 	andcs	r0, r0, fp, lsl r7
20006788:	200008b9 			; <UNDEFINED> instruction: 0x200008b9
2000678c:	200009bd 			; <UNDEFINED> instruction: 0x200009bd

20006790 <damsugare>:
20006790:	20005cc0 	andcs	r5, r0, r0, asr #25
20006794:	20004858 	andcs	r4, r0, r8, asr r8
20006798:	20000b20 	andcs	r0, r0, r0, lsr #22
2000679c:	200029bc 			; <UNDEFINED> instruction: 0x200029bc
200067a0:	00000000 	andeq	r0, r0, r0
200067a4:	fffffffd 			; <UNDEFINED> instruction: 0xfffffffd
200067a8:	00000000 	andeq	r0, r0, r0
200067ac:	0000005f 	andeq	r0, r0, pc, asr r0
200067b0:	00000028 	andeq	r0, r0, r8, lsr #32
200067b4:	200005ad 	andcs	r0, r0, sp, lsr #11
200067b8:	2000071b 	andcs	r0, r0, fp, lsl r7
200067bc:	20000911 	andcs	r0, r0, r1, lsl r9
200067c0:	200009bd 			; <UNDEFINED> instruction: 0x200009bd
200067c4:	2000004a 	andcs	r0, r0, sl, asr #32
200067c8:	2000002a 	andcs	r0, r0, sl, lsr #32
200067cc:	20000032 	andcs	r0, r0, r2, lsr r0
200067d0:	2000003a 	andcs	r0, r0, sl, lsr r0
200067d4:	20000042 	andcs	r0, r0, r2, asr #32
200067d8:	0a030201 	beq	200c6fe4 <keyb_state+0xc07fc>
200067dc:	0b060504 	bleq	20187bf4 <keyb_state+0x18140c>
200067e0:	0c090807 	stceq	8, cr0, [r9], {7}
200067e4:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 200067b4 <damsugare+0x24>

200067e8 <keyb_state>:
200067e8:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	000002f8 	strdeq	r0, [r0], -r8
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000119 	andeq	r0, r0, r9, lsl r1
  10:	0000be0c 	andeq	fp, r0, ip, lsl #28
  14:	00001500 	andeq	r1, r0, r0, lsl #10
  18:	00000000 	andeq	r0, r0, r0
  1c:	08010200 	stmdaeq	r1, {r9}
  20:	0000005b 	andeq	r0, r0, fp, asr r0
  24:	00005503 	andeq	r5, r0, r3, lsl #10
  28:	04010200 	streq	r0, [r1], #-512	; 0xfffffe00
  2c:	00004810 	andeq	r4, r0, r0, lsl r8
  30:	00780400 	rsbseq	r0, r8, r0, lsl #8
  34:	48070501 	stmdami	r7, {r0, r8, sl}
  38:	00000000 	andeq	r0, r0, r0
  3c:	01007904 	tsteq	r0, r4, lsl #18
  40:	00480905 	subeq	r0, r8, r5, lsl #18
  44:	00010000 	andeq	r0, r1, r0
  48:	64080102 	strvs	r0, [r8], #-258	; 0xfffffefe
  4c:	05000000 	streq	r0, [r0, #-0]
  50:	00000055 	andeq	r0, r0, r5, asr r0
  54:	24030601 	strcs	r0, [r3], #-1537	; 0xfffff9ff
  58:	06000000 	streq	r0, [r0], -r0
  5c:	00000001 	andeq	r0, r0, r1
  60:	08010a34 	stmdaeq	r1, {r2, r4, r5, r9, fp}
  64:	00009d10 	andeq	r9, r0, r0, lsl sp
  68:	01df0700 	bicseq	r0, pc, r0, lsl #14
  6c:	0a010000 	beq	40074 <startup-0x1ffbff8c>
  70:	00009d06 	andeq	r9, r0, r6, lsl #26
  74:	0d070000 	stceq	0, cr0, [r7, #-0]
  78:	01000001 	tsteq	r0, r1
  7c:	009d060b 	addseq	r0, sp, fp, lsl #12
  80:	07040000 	streq	r0, [r4, -r0]
  84:	00000113 	andeq	r0, r0, r3, lsl r1
  88:	9d060c01 	stcls	12, cr0, [r6, #-4]
  8c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
  90:	00787004 	rsbseq	r7, r8, r4
  94:	a4080d01 	strge	r0, [r8], #-3329	; 0xfffff2ff
  98:	0c000000 	stceq	0, cr0, [r0], {-0}
  9c:	05040800 	streq	r0, [r4, #-2048]	; 0xfffff800
  a0:	00746e69 	rsbseq	r6, r4, r9, ror #28
  a4:	00004f09 	andeq	r4, r0, r9, lsl #30
  a8:	0000b500 	andeq	fp, r0, r0, lsl #10
  ac:	00b50a00 	adcseq	r0, r5, r0, lsl #20
  b0:	05130000 	ldreq	r0, [r3, #-0]
  b4:	07040200 	streq	r0, [r4, -r0, lsl #4]
  b8:	000000e7 	andeq	r0, r0, r7, ror #1
  bc:	00000105 	andeq	r0, r0, r5, lsl #2
  c0:	020e0100 	andeq	r0, lr, #0, 2
  c4:	0000005b 	andeq	r0, r0, fp, asr r0
  c8:	00000005 	andeq	r0, r0, r5
  cc:	0c0e0100 	stfeqs	f0, [lr], {-0}
  d0:	000000d4 	ldrdeq	r0, [r0], -r4
  d4:	005b040b 	subseq	r0, fp, fp, lsl #8
  d8:	4f0c0000 	svcmi	0x000c0000
  dc:	34006a62 	strcc	r6, [r0], #-2658	; 0xfffff59e
  e0:	91101001 	tstls	r0, r1
  e4:	07000001 	streq	r0, [r0, -r1]
  e8:	000000dd 	ldrdeq	r0, [r0], -sp
  ec:	c80c1101 	stmdagt	ip, {r0, r8, ip}
  f0:	00000000 	andeq	r0, r0, r0
  f4:	0000d507 	andeq	sp, r0, r7, lsl #10
  f8:	0c120100 	ldfeqs	f0, [r2], {-0}
  fc:	000000c8 	andeq	r0, r0, r8, asr #1
 100:	00b50704 	adcseq	r0, r5, r4, lsl #14
 104:	13010000 	movwne	r0, #4096	; 0x1000
 108:	0000c80c 	andeq	ip, r0, ip, lsl #16
 10c:	e9070800 	stmdb	r7, {fp}
 110:	01000001 	tsteq	r0, r1
 114:	00c80c14 	sbceq	r0, r8, r4, lsl ip
 118:	070c0000 	streq	r0, [ip, -r0]
 11c:	0000000a 	andeq	r0, r0, sl
 120:	9d061501 	cfstr32ls	mvfx1, [r6, #-4]
 124:	10000000 	andne	r0, r0, r0
 128:	00003907 	andeq	r3, r0, r7, lsl #18
 12c:	06160100 	ldreq	r0, [r6], -r0, lsl #2
 130:	0000009d 	muleq	r0, sp, r0
 134:	003e0714 	eorseq	r0, lr, r4, lsl r7
 138:	16010000 	strne	r0, [r1], -r0
 13c:	00009d0c 	andeq	r9, r0, ip, lsl #26
 140:	78071800 	stmdavc	r7, {fp, ip}
 144:	01000000 	mrseq	r0, (UNDEF: 0)
 148:	009d0617 	addseq	r0, sp, r7, lsl r6
 14c:	071c0000 	ldreq	r0, [ip, -r0]
 150:	0000007d 	andeq	r0, r0, sp, ror r0
 154:	9d0c1701 	stcls	7, cr1, [ip, #-4]
 158:	20000000 	andcs	r0, r0, r0
 15c:	00006907 	andeq	r6, r0, r7, lsl #18
 160:	0a180100 	beq	600568 <startup-0x1f9ffa98>
 164:	000001a2 	andeq	r0, r0, r2, lsr #3
 168:	04c30724 	strbeq	r0, [r3], #1828	; 0x724
 16c:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
 170:	0001a20a 	andeq	sl, r1, sl, lsl #4
 174:	23072800 	movwcs	r2, #30720	; 0x7800
 178:	01000000 	mrseq	r0, (UNDEF: 0)
 17c:	01a20a1a 			; <UNDEFINED> instruction: 0x01a20a1a
 180:	072c0000 	streq	r0, [ip, -r0]!
 184:	0000006e 	andeq	r0, r0, lr, rrx
 188:	bd0a1b01 	vstrlt	d1, [sl, #-4]
 18c:	30000001 	andcc	r0, r0, r1
 190:	019c0d00 	orrseq	r0, ip, r0, lsl #26
 194:	9c0e0000 	stcls	0, cr0, [lr], {-0}
 198:	00000001 	andeq	r0, r0, r1
 19c:	00da040b 	sbcseq	r0, sl, fp, lsl #8
 1a0:	040b0000 	streq	r0, [fp], #-0
 1a4:	00000191 	muleq	r0, r1, r1
 1a8:	0001bd0d 	andeq	fp, r1, sp, lsl #26
 1ac:	019c0e00 	orrseq	r0, ip, r0, lsl #28
 1b0:	9d0e0000 	stcls	0, cr0, [lr, #-0]
 1b4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
 1b8:	0000009d 	muleq	r0, sp, r0
 1bc:	a8040b00 	stmdage	r4, {r8, r9, fp}
 1c0:	05000001 	streq	r0, [r0, #-1]
 1c4:	0000028e 	andeq	r0, r0, lr, lsl #5
 1c8:	da031c01 	ble	c71d4 <startup-0x1ff38e2c>
 1cc:	0f000000 	svceq	0x00000000
 1d0:	00000043 	andeq	r0, r0, r3, asr #32
 1d4:	bc111f01 	ldclt	15, cr1, [r1], {1}
 1d8:	0f000000 	svceq	0x00000000
 1dc:	00000028 	andeq	r0, r0, r8, lsr #32
 1e0:	bc112001 	ldclt	0, cr2, [r1], {1}
 1e4:	0f000000 	svceq	0x00000000
 1e8:	000001cc 	andeq	r0, r0, ip, asr #3
 1ec:	bc112101 	ldflts	f2, [r1], {1}
 1f0:	10000000 	andne	r0, r0, r0
 1f4:	00746163 	rsbseq	r6, r4, r3, ror #2
 1f8:	c30f2301 	movwgt	r2, #62209	; 0xf301
 1fc:	0f000001 	svceq	0x00000001
 200:	000001f2 	strdeq	r0, [r0], -r2
 204:	c30f2401 	movwgt	r2, #62465	; 0xf401
 208:	0f000001 	svceq	0x00000001
 20c:	00000108 	andeq	r0, r0, r8, lsl #2
 210:	c30f2501 	movwgt	r2, #62721	; 0xf501
 214:	0f000001 	svceq	0x00000001
 218:	00000097 	muleq	r0, r7, r0
 21c:	c30f2601 	movwgt	r2, #62977	; 0xf601
 220:	11000001 	tstne	r0, r1
 224:	000001cf 	andeq	r0, r0, pc, asr #3
 228:	050b0802 	streq	r0, [fp, #-2050]	; 0xfffff7fe
 22c:	000b2003 	andeq	r2, fp, r3
 230:	01db1120 	bicseq	r1, fp, r0, lsr #2
 234:	3c020000 	stccc	0, cr0, [r2], {-0}
 238:	5403050b 	strpl	r0, [r3], #-1291	; 0xfffffaf5
 23c:	11200015 			; <UNDEFINED> instruction: 0x11200015
 240:	000001e7 	andeq	r0, r0, r7, ror #3
 244:	050b6302 	streq	r6, [fp, #-770]	; 0xfffffcfe
 248:	001f8803 	andseq	r8, pc, r3, lsl #16
 24c:	01ba1220 			; <UNDEFINED> instruction: 0x01ba1220
 250:	8d020000 	stchi	0, cr0, [r2, #-0]
 254:	0000bc0b 	andeq	fp, r0, fp, lsl #24
 258:	bc030500 	cfstr32lt	mvfx0, [r3], {-0}
 25c:	12200029 	eorne	r0, r0, #41	; 0x29
 260:	00000082 	andeq	r0, r0, r2, lsl #1
 264:	bc0bb702 	stclt	7, cr11, [fp], {2}
 268:	05000000 	streq	r0, [r0, #-0]
 26c:	0033f003 	eorseq	pc, r3, r3
 270:	00a21220 	adceq	r1, r2, r0, lsr #4
 274:	d8020000 	stmdale	r2, {}	; <UNPREDICTABLE>
 278:	0000bc0b 	andeq	fp, r0, fp, lsl #24
 27c:	24030500 	strcs	r0, [r3], #-1280	; 0xfffffb00
 280:	1220003e 	eorne	r0, r0, #62	; 0x3e
 284:	00000195 	muleq	r0, r5, r1
 288:	bc0bf802 	stclt	8, cr15, [fp], {2}
 28c:	05000000 	streq	r0, [r0, #-0]
 290:	00485803 	subeq	r5, r8, r3, lsl #16
 294:	00f41320 	rscseq	r1, r4, r0, lsr #6
 298:	12020000 	andne	r0, r2, #0
 29c:	00bc0b01 	adcseq	r0, ip, r1, lsl #22
 2a0:	03050000 	movweq	r0, #20480	; 0x5000
 2a4:	2000528c 	andcs	r5, r0, ip, lsl #5
 2a8:	0001a713 	andeq	sl, r1, r3, lsl r7
 2ac:	012c0200 			; <UNDEFINED> instruction: 0x012c0200
 2b0:	0000bc0b 	andeq	fp, r0, fp, lsl #24
 2b4:	c0030500 	andgt	r0, r3, r0, lsl #10
 2b8:	1420005c 	strtne	r0, [r0], #-92	; 0xffffffa4
 2bc:	000001f3 	strdeq	r0, [r0], -r3
 2c0:	09014d02 	stmdbeq	r1, {r1, r8, sl, fp, lr}
 2c4:	66f40305 	ldrbtvs	r0, [r4], r5, lsl #6
 2c8:	ff142000 			; <UNDEFINED> instruction: 0xff142000
 2cc:	02000001 	andeq	r0, r0, #1
 2d0:	0509015d 	streq	r0, [r9, #-349]	; 0xfffffea3
 2d4:	00672803 	rsbeq	r2, r7, r3, lsl #16
 2d8:	020b1420 	andeq	r1, fp, #32, 8	; 0x20000000
 2dc:	6d020000 	stcvs	0, cr0, [r2, #-0]
 2e0:	03050901 	movweq	r0, #22785	; 0x5901
 2e4:	2000675c 	andcs	r6, r0, ip, asr r7
 2e8:	00040013 	andeq	r0, r4, r3, lsl r0
 2ec:	017d0200 	cmneq	sp, r0, lsl #4
 2f0:	0001c309 	andeq	ip, r1, r9, lsl #6
 2f4:	90030500 	andls	r0, r3, r0, lsl #10
 2f8:	00200067 	eoreq	r0, r0, r7, rrx
 2fc:	000000eb 	andeq	r0, r0, fp, ror #1
 300:	011f0004 	tsteq	pc, r4
 304:	01040000 	mrseq	r0, (UNDEF: 4)
 308:	00000119 	andeq	r0, r0, r9, lsl r1
 30c:	0002140c 	andeq	r1, r2, ip, lsl #8
 310:	00001500 	andeq	r1, r0, r0, lsl #10
 314:	00001000 	andeq	r1, r0, r0
 318:	00011020 	andeq	r1, r1, r0, lsr #32
 31c:	00004300 	andeq	r4, r0, r0, lsl #6
 320:	08010200 	stmdaeq	r1, {r9}
 324:	0000005b 	andeq	r0, r0, fp, asr r0
 328:	00023203 	andeq	r3, r2, r3, lsl #4
 32c:	05040100 	streq	r0, [r4, #-256]	; 0xffffff00
 330:	0000003e 	andeq	r0, r0, lr, lsr r0
 334:	67e80305 	strbvs	r0, [r8, r5, lsl #6]!
 338:	04042000 	streq	r2, [r4], #-0
 33c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
 340:	01f80500 	mvnseq	r0, r0, lsl #10
 344:	41010000 	mrsmi	r0, (UNDEF: 1)
 348:	0000250f 	andeq	r2, r0, pc, lsl #10
 34c:	0000b800 	andeq	fp, r0, r0, lsl #16
 350:	00006820 	andeq	r6, r0, r0, lsr #16
 354:	8d9c0100 	ldfhis	f0, [ip]
 358:	06000000 	streq	r0, [r0], -r0
 35c:	0079656b 	rsbseq	r6, r9, fp, ror #10
 360:	8d0f4301 	stchi	3, cr4, [pc, #-4]	; 364 <startup-0x1ffffc9c>
 364:	02000000 	andeq	r0, r0, #0
 368:	72065891 	andvc	r5, r6, #9502720	; 0x910000
 36c:	0100776f 	tsteq	r0, pc, ror #14
 370:	003e0544 	eorseq	r0, lr, r4, asr #10
 374:	91020000 	mrsls	r0, (UNDEF: 2)
 378:	6f63066c 	svcvs	0x0063066c
 37c:	4401006c 	strmi	r0, [r1], #-108	; 0xffffff94
 380:	00003e0a 	andeq	r3, r0, sl, lsl #28
 384:	68910200 	ldmvs	r1, {r9}
 388:	00250700 	eoreq	r0, r5, r0, lsl #14
 38c:	009d0000 	addseq	r0, sp, r0
 390:	9d080000 	stcls	0, cr0, [r8, #-0]
 394:	0f000000 	svceq	0x00000000
 398:	07040200 	streq	r0, [r4, -r0, lsl #4]
 39c:	000000e7 	andeq	r0, r0, r7, ror #1
 3a0:	00020909 	andeq	r0, r2, r9, lsl #18
 3a4:	05130100 	ldreq	r0, [r3, #-256]	; 0xffffff00
 3a8:	0000003e 	andeq	r0, r0, lr, lsr r0
 3ac:	20000064 	andcs	r0, r0, r4, rrx
 3b0:	00000054 	andeq	r0, r0, r4, asr r0
 3b4:	00cc9c01 	sbceq	r9, ip, r1, lsl #24
 3b8:	63060000 	movwvs	r0, #24576	; 0x6000
 3bc:	0f150100 	svceq	0x00150100
 3c0:	00000025 	andeq	r0, r0, r5, lsr #32
 3c4:	00779102 	rsbseq	r9, r7, r2, lsl #2
 3c8:	0001fd0a 	andeq	pc, r1, sl, lsl #26
 3cc:	06060100 	streq	r0, [r6], -r0, lsl #2
 3d0:	20000010 	andcs	r0, r0, r0, lsl r0
 3d4:	00000054 	andeq	r0, r0, r4, asr r0
 3d8:	720b9c01 	andvc	r9, fp, #256	; 0x100
 3dc:	0100776f 	tsteq	r0, pc, ror #14
 3e0:	009d2006 	addseq	r2, sp, r6
 3e4:	91020000 	mrsls	r0, (UNDEF: 2)
 3e8:	21000074 	tstcs	r0, r4, ror r0
 3ec:	04000000 	streq	r0, [r0], #-0
 3f0:	0001e600 	andeq	lr, r1, r0, lsl #12
 3f4:	19010400 	stmdbne	r1, {sl}
 3f8:	0c000001 	stceq	0, cr0, [r0], {1}
 3fc:	0000023d 	andeq	r0, r0, sp, lsr r2
 400:	00000015 	andeq	r0, r0, r5, lsl r0
 404:	00000143 	andeq	r0, r0, r3, asr #2
 408:	5b080102 	blpl	200818 <startup-0x1fdff7e8>
 40c:	00000000 	andeq	r0, r0, r0
 410:	000002da 	ldrdeq	r0, [r0], -sl
 414:	02010004 	andeq	r0, r1, #4
 418:	01040000 	mrseq	r0, (UNDEF: 4)
 41c:	00000119 	andeq	r0, r0, r9, lsl r1
 420:	0002520c 	andeq	r5, r2, ip, lsl #4
 424:	00001500 	andeq	r1, r0, r0, lsl #10
	...
 430:	00016000 	andeq	r6, r1, r0
 434:	02800200 	addeq	r0, r0, #0, 4
 438:	01070000 	mrseq	r0, (UNDEF: 7)
 43c:	00000050 	andeq	r0, r0, r0, asr r0
 440:	50062904 	andpl	r2, r6, r4, lsl #18
 444:	03000000 	movweq	r0, #0
 448:	000000e1 	andeq	r0, r0, r1, ror #1
 44c:	75720400 	ldrbvc	r0, [r2, #-1024]!	; 0xfffffc00
 450:	0301006e 	movweq	r0, #4206	; 0x106e
 454:	000000b9 	strheq	r0, [r0], -r9
 458:	01ed0302 	mvneq	r0, r2, lsl #6
 45c:	00030000 	andeq	r0, r3, r0
 460:	5b080105 	blpl	20087c <startup-0x1fdff784>
 464:	06000000 	streq	r0, [r0], -r0
 468:	00000055 	andeq	r0, r0, r5, asr r0
 46c:	10040202 	andne	r0, r4, r2, lsl #4
 470:	0000007b 	andeq	r0, r0, fp, ror r0
 474:	02007807 	andeq	r7, r0, #458752	; 0x70000
 478:	007b0705 	rsbseq	r0, fp, r5, lsl #14
 47c:	07000000 	streq	r0, [r0, -r0]
 480:	05020079 	streq	r0, [r2, #-121]	; 0xffffff87
 484:	00007b09 	andeq	r7, r0, r9, lsl #22
 488:	05000100 	streq	r0, [r0, #-256]	; 0xffffff00
 48c:	00640801 	rsbeq	r0, r4, r1, lsl #16
 490:	55080000 	strpl	r0, [r8, #-0]
 494:	02000000 	andeq	r0, r0, #0
 498:	00570306 	subseq	r0, r7, r6, lsl #6
 49c:	01090000 	mrseq	r0, (UNDEF: 9)
 4a0:	34000000 	strcc	r0, [r0], #-0
 4a4:	1008020a 	andne	r0, r8, sl, lsl #4
 4a8:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 4ac:	0001df0a 	andeq	sp, r1, sl, lsl #30
 4b0:	060a0200 	streq	r0, [sl], -r0, lsl #4
 4b4:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 4b8:	010d0a00 	tsteq	sp, r0, lsl #20
 4bc:	0b020000 	bleq	804c4 <startup-0x1ff7fb3c>
 4c0:	0000d006 	andeq	sp, r0, r6
 4c4:	130a0400 	movwne	r0, #41984	; 0xa400
 4c8:	02000001 	andeq	r0, r0, #1
 4cc:	00d0060c 	sbcseq	r0, r0, ip, lsl #12
 4d0:	07080000 	streq	r0, [r8, -r0]
 4d4:	02007870 	andeq	r7, r0, #112, 16	; 0x700000
 4d8:	00d7080d 	sbcseq	r0, r7, sp, lsl #16
 4dc:	000c0000 	andeq	r0, ip, r0
 4e0:	6905040b 	stmdbvs	r5, {r0, r1, r3, sl}
 4e4:	0c00746e 	cfstrseq	mvf7, [r0], {110}	; 0x6e
 4e8:	00000082 	andeq	r0, r0, r2, lsl #1
 4ec:	000000e8 	andeq	r0, r0, r8, ror #1
 4f0:	0000e80d 	andeq	lr, r0, sp, lsl #16
 4f4:	00051300 	andeq	r1, r5, r0, lsl #6
 4f8:	e7070405 	str	r0, [r7, -r5, lsl #8]
 4fc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 500:	00000001 	andeq	r0, r0, r1
 504:	8e020e02 	cdphi	14, 0, cr0, cr2, cr2, {0}
 508:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 50c:	00000000 	andeq	r0, r0, r0
 510:	070c0e02 	streq	r0, [ip, -r2, lsl #28]
 514:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
 518:	00008e04 	andeq	r8, r0, r4, lsl #28
 51c:	624f0f00 	subvs	r0, pc, #0, 30
 520:	0234006a 	eorseq	r0, r4, #106	; 0x6a
 524:	01c41010 	biceq	r1, r4, r0, lsl r0
 528:	dd0a0000 	stcle	0, cr0, [sl, #-0]
 52c:	02000000 	andeq	r0, r0, #0
 530:	00fb0c11 	rscseq	r0, fp, r1, lsl ip
 534:	0a000000 	beq	53c <startup-0x1ffffac4>
 538:	000000d5 	ldrdeq	r0, [r0], -r5
 53c:	fb0c1202 	blx	304d4e <startup-0x1fcfb2b2>
 540:	04000000 	streq	r0, [r0], #-0
 544:	0000b50a 	andeq	fp, r0, sl, lsl #10
 548:	0c130200 	lfmeq	f0, 4, [r3], {-0}
 54c:	000000fb 	strdeq	r0, [r0], -fp
 550:	01e90a08 	mvneq	r0, r8, lsl #20
 554:	14020000 	strne	r0, [r2], #-0
 558:	0000fb0c 	andeq	pc, r0, ip, lsl #22
 55c:	0a0a0c00 	beq	283564 <startup-0x1fd7ca9c>
 560:	02000000 	andeq	r0, r0, #0
 564:	00d00615 	sbcseq	r0, r0, r5, lsl r6
 568:	0a100000 	beq	400570 <startup-0x1fbffa90>
 56c:	00000039 	andeq	r0, r0, r9, lsr r0
 570:	d0061602 	andle	r1, r6, r2, lsl #12
 574:	14000000 	strne	r0, [r0], #-0
 578:	00003e0a 	andeq	r3, r0, sl, lsl #28
 57c:	0c160200 	lfmeq	f0, 4, [r6], {-0}
 580:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 584:	00780a18 	rsbseq	r0, r8, r8, lsl sl
 588:	17020000 	strne	r0, [r2, -r0]
 58c:	0000d006 	andeq	sp, r0, r6
 590:	7d0a1c00 	stcvc	12, cr1, [sl, #-0]
 594:	02000000 	andeq	r0, r0, #0
 598:	00d00c17 	sbcseq	r0, r0, r7, lsl ip
 59c:	0a200000 	beq	8005a4 <startup-0x1f7ffa5c>
 5a0:	00000069 	andeq	r0, r0, r9, rrx
 5a4:	d50a1802 	strle	r1, [sl, #-2050]	; 0xfffff7fe
 5a8:	24000001 	strcs	r0, [r0], #-1
 5ac:	0004c30a 	andeq	ip, r4, sl, lsl #6
 5b0:	0a190200 	beq	640db8 <startup-0x1f9bf248>
 5b4:	000001d5 	ldrdeq	r0, [r0], -r5
 5b8:	00230a28 	eoreq	r0, r3, r8, lsr #20
 5bc:	1a020000 	bne	805c4 <startup-0x1ff7fa3c>
 5c0:	0001d50a 	andeq	sp, r1, sl, lsl #10
 5c4:	6e0a2c00 	cdpvs	12, 0, cr2, cr10, cr0, {0}
 5c8:	02000000 	andeq	r0, r0, #0
 5cc:	01f00a1b 	mvnseq	r0, fp, lsl sl
 5d0:	00300000 	eorseq	r0, r0, r0
 5d4:	0001cf10 	andeq	ip, r1, r0, lsl pc
 5d8:	01cf1100 	biceq	r1, pc, r0, lsl #2
 5dc:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
 5e0:	00010d04 	andeq	r0, r1, r4, lsl #26
 5e4:	c4040e00 	strgt	r0, [r4], #-3584	; 0xfffff200
 5e8:	10000001 	andne	r0, r0, r1
 5ec:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 5f0:	0001cf11 	andeq	ip, r1, r1, lsl pc
 5f4:	00d01100 	sbcseq	r1, r0, r0, lsl #2
 5f8:	d0110000 	andsle	r0, r1, r0
 5fc:	00000000 	andeq	r0, r0, r0
 600:	01db040e 	bicseq	r0, fp, lr, lsl #8
 604:	8e080000 	cdphi	0, 0, cr0, cr8, cr0, {0}
 608:	02000002 	andeq	r0, r0, #2
 60c:	010d031c 	tsteq	sp, ip, lsl r3
 610:	8d080000 	stchi	0, cr0, [r8, #-0]
 614:	02000002 	andeq	r0, r0, #2
 618:	01cf0c1c 	biceq	r0, pc, ip, lsl ip	; <UNPREDICTABLE>
 61c:	43120000 	tstmi	r2, #0
 620:	02000000 	andeq	r0, r0, #0
 624:	00ef111f 	rsceq	r1, pc, pc, lsl r1	; <UNPREDICTABLE>
 628:	28120000 	ldmdacs	r2, {}	; <UNPREDICTABLE>
 62c:	02000000 	andeq	r0, r0, #0
 630:	00ef1120 	rsceq	r1, pc, r0, lsr #2
 634:	cc120000 	ldcgt	0, cr0, [r2], {-0}
 638:	02000001 	andeq	r0, r0, #1
 63c:	00ef1121 	rsceq	r1, pc, r1, lsr #2
 640:	63130000 	tstvs	r3, #0
 644:	02007461 	andeq	r7, r0, #1627389952	; 0x61000000
 648:	01f60f23 	mvnseq	r0, r3, lsr #30
 64c:	f2120000 	vhadd.s16	d0, d2, d0
 650:	02000001 	andeq	r0, r0, #1
 654:	01f60f24 	mvnseq	r0, r4, lsr #30
 658:	08120000 	ldmdaeq	r2, {}	; <UNPREDICTABLE>
 65c:	02000001 	andeq	r0, r0, #1
 660:	01f60f25 	mvnseq	r0, r5, lsr #30
 664:	97120000 	ldrls	r0, [r2, -r0]
 668:	02000000 	andeq	r0, r0, #0
 66c:	01f60f26 	mvnseq	r0, r6, lsr #30
 670:	32120000 	andscc	r0, r2, #0
 674:	03000002 	movweq	r0, #2
 678:	00d00c02 	sbcseq	r0, r0, r2, lsl #24
 67c:	73140000 	tstvc	r4, #0
 680:	01000002 	tsteq	r0, r2
 684:	01700625 	cmneq	r0, r5, lsr #12
 688:	00882000 	addeq	r2, r8, r0
 68c:	9c010000 	stcls	0, cr0, [r1], {-0}
 690:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
 694:	01006d15 	tsteq	r0, r5, lsl sp
 698:	02020a28 	andeq	r0, r2, #40, 20	; 0x28000
 69c:	91020000 	mrsls	r0, (UNDEF: 2)
 6a0:	006b156c 	rsbeq	r1, fp, ip, ror #10
 6a4:	020a2901 	andeq	r2, sl, #16384	; 0x4000
 6a8:	02000002 	andeq	r0, r0, #2
 6ac:	62156891 	andsvs	r6, r5, #9502720	; 0x910000
 6b0:	0a2a0100 	beq	a80ab8 <startup-0x1f57f548>
 6b4:	00000202 	andeq	r0, r0, r2, lsl #4
 6b8:	15649102 	strbne	r9, [r4, #-258]!	; 0xfffffefe
 6bc:	2b010063 	blcs	40850 <startup-0x1ffbf7b0>
 6c0:	00007b07 	andeq	r7, r0, r7, lsl #22
 6c4:	63910200 	orrsvs	r0, r1, #0, 4
 6c8:	026a1600 	rsbeq	r1, sl, #0, 12
 6cc:	1d010000 	stcne	0, cr0, [r1, #-0]
 6d0:	00012006 	andeq	r2, r1, r6
 6d4:	00005020 	andeq	r5, r0, r0, lsr #32
 6d8:	169c0100 	ldrne	r0, [ip], r0, lsl #2
 6dc:	00000278 	andeq	r0, r0, r8, ror r2
 6e0:	00060601 	andeq	r0, r6, r1, lsl #12
 6e4:	0c200000 	stceq	0, cr0, [r0], #-0
 6e8:	01000000 	mrseq	r0, (UNDEF: 0)
 6ec:	0255009c 	subseq	r0, r5, #156	; 0x9c
 6f0:	00040000 	andeq	r0, r4, r0
 6f4:	0000034e 	andeq	r0, r0, lr, asr #6
 6f8:	01190104 	tsteq	r9, r4, lsl #2
 6fc:	ea0c0000 	b	300704 <startup-0x1fcff8fc>
 700:	15000002 	strne	r0, [r0, #-2]
 704:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
 708:	9a200001 	bls	800714 <startup-0x1f7ff8ec>
 70c:	3d000003 	stccc	0, cr0, [r0, #-12]
 710:	02000002 	andeq	r0, r0, #2
 714:	005b0801 	subseq	r0, fp, r1, lsl #16
 718:	a1030000 	mrsge	r0, (UNDEF: 3)
 71c:	01000002 	tsteq	r0, r2
 720:	055a0688 	ldrbeq	r0, [sl, #-1672]	; 0xfffff978
 724:	00382000 	eorseq	r2, r8, r0
 728:	9c010000 	stcls	0, cr0, [r1], {-0}
 72c:	0000006c 	andeq	r0, r0, ip, rrx
 730:	01007804 	tsteq	r0, r4, lsl #16
 734:	006c1788 	rsbeq	r1, ip, r8, lsl #15
 738:	91020000 	mrsls	r0, (UNDEF: 2)
 73c:	0079046c 	rsbseq	r0, r9, ip, ror #8
 740:	6c1e8801 	ldcvs	8, cr8, [lr], {1}
 744:	02000000 	andeq	r0, r0, #0
 748:	69056891 	stmdbvs	r5, {r0, r4, r7, fp, sp, lr}
 74c:	01000003 	tsteq	r0, r3
 750:	006c098b 	rsbeq	r0, ip, fp, lsl #19
 754:	91020000 	mrsls	r0, (UNDEF: 2)
 758:	04060074 	streq	r0, [r6], #-116	; 0xffffff8c
 75c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
 760:	037d0300 	cmneq	sp, #0, 6
 764:	80010000 	andhi	r0, r1, r0
 768:	00051e06 	andeq	r1, r5, r6, lsl #28
 76c:	00003c20 	andeq	r3, r0, r0, lsr #24
 770:	979c0100 	ldrls	r0, [ip, r0, lsl #2]
 774:	04000000 	streq	r0, [r0], #-0
 778:	80010063 	andhi	r0, r1, r3, rrx
 77c:	00002525 	andeq	r2, r0, r5, lsr #10
 780:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 784:	03a10700 			; <UNDEFINED> instruction: 0x03a10700
 788:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
 78c:	00048406 	andeq	r8, r4, r6, lsl #8
 790:	00009a20 	andeq	r9, r0, r0, lsr #20
 794:	039c0100 	orrseq	r0, ip, #0, 2
 798:	00000314 	andeq	r0, r0, r4, lsl r3
 79c:	5a066301 	bpl	1993a8 <startup-0x1fe66c58>
 7a0:	2a200004 	bcs	8007b8 <startup-0x1f7ff848>
 7a4:	01000000 	mrseq	r0, (UNDEF: 0)
 7a8:	0000cf9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
 7ac:	03580800 	cmpeq	r8, #0, 16
 7b0:	63010000 	movwvs	r0, #4096	; 0x1000
 7b4:	00002525 	andeq	r2, r0, r5, lsr #10
 7b8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 7bc:	02ae0300 	adceq	r0, lr, #0, 6
 7c0:	5d010000 	stcpl	0, cr0, [r1, #-0]
 7c4:	00043006 	andeq	r3, r4, r6
 7c8:	00002a20 	andeq	r2, r0, r0, lsr #20
 7cc:	f59c0100 			; <UNDEFINED> instruction: 0xf59c0100
 7d0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 7d4:	00000370 	andeq	r0, r0, r0, ror r3
 7d8:	25245d01 	strcs	r5, [r4, #-3329]!	; 0xfffff2ff
 7dc:	02000000 	andeq	r0, r0, #0
 7e0:	09007791 	stmdbeq	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
 7e4:	0000034d 	andeq	r0, r0, sp, asr #6
 7e8:	250f5401 	strcs	r5, [pc, #-1025]	; 3ef <startup-0x1ffffc11>
 7ec:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
 7f0:	40200003 	eormi	r0, r0, r3
 7f4:	01000000 	mrseq	r0, (UNDEF: 0)
 7f8:	00011e9c 	muleq	r1, ip, lr
 7fc:	76720a00 	ldrbtvc	r0, [r2], -r0, lsl #20
 800:	13580100 	cmpne	r8, #0, 2
 804:	00000025 	andeq	r0, r0, r5, lsr #32
 808:	006f9102 	rsbeq	r9, pc, r2, lsl #2
 80c:	00032509 	andeq	r2, r3, r9, lsl #10
 810:	0f4b0100 	svceq	0x004b0100
 814:	00000025 	andeq	r0, r0, r5, lsr #32
 818:	200003b0 			; <UNDEFINED> instruction: 0x200003b0
 81c:	00000040 	andeq	r0, r0, r0, asr #32
 820:	01479c01 	cmpeq	r7, r1, lsl #24
 824:	720a0000 	andvc	r0, sl, #0
 828:	4f010076 	svcmi	0x00010076
 82c:	00002513 	andeq	r2, r0, r3, lsl r5
 830:	6f910200 	svcvs	0x00910200
 834:	03370900 	teqeq	r7, #0, 18
 838:	42010000 	andmi	r0, r1, #0
 83c:	0000250f 	andeq	r2, r0, pc, lsl #10
 840:	00037c00 	andeq	r7, r3, r0, lsl #24
 844:	00003420 	andeq	r3, r0, r0, lsr #8
 848:	709c0100 	addsvc	r0, ip, r0, lsl #2
 84c:	0a000001 	beq	858 <startup-0x1ffff7a8>
 850:	01007672 	tsteq	r0, r2, ror r6
 854:	00251346 	eoreq	r1, r5, r6, asr #6
 858:	91020000 	mrsls	r0, (UNDEF: 2)
 85c:	d3030077 	movwle	r0, #12407	; 0x3077
 860:	01000002 	tsteq	r0, r2
 864:	034c063b 	movteq	r0, #50747	; 0xc63b
 868:	00302000 	eorseq	r2, r0, r0
 86c:	9c010000 	stcls	0, cr0, [r1], {-0}
 870:	00000196 	muleq	r0, r6, r1
 874:	00037808 	andeq	r7, r3, r8, lsl #16
 878:	2b3b0100 	blcs	ec0c80 <startup-0x1f13f380>
 87c:	00000025 	andeq	r0, r0, r5, lsr #32
 880:	00779102 	rsbseq	r9, r7, r2, lsl #2
 884:	0002be0b 	andeq	fp, r2, fp, lsl #28
 888:	06370100 	ldrteq	r0, [r7], -r0, lsl #2
 88c:	20000310 	andcs	r0, r0, r0, lsl r3
 890:	0000003c 	andeq	r0, r0, ip, lsr r0
 894:	01ba9c01 			; <UNDEFINED> instruction: 0x01ba9c01
 898:	78040000 	stmdavc	r4, {}	; <UNPREDICTABLE>
 89c:	29370100 	ldmdbcs	r7!, {r8}
 8a0:	00000025 	andeq	r0, r0, r5, lsr #32
 8a4:	00779102 	rsbseq	r9, r7, r2, lsl #2
 8a8:	00038e0b 	andeq	r8, r3, fp, lsl #28
 8ac:	06330100 	ldrteq	r0, [r3], -r0, lsl #2
 8b0:	200002de 	ldrdcs	r0, [r0], -lr
 8b4:	00000032 	andeq	r0, r0, r2, lsr r0
 8b8:	01de9c01 	bicseq	r9, lr, r1, lsl #24
 8bc:	78040000 	stmdavc	r4, {}	; <UNPREDICTABLE>
 8c0:	27330100 	ldrcs	r0, [r3, -r0, lsl #2]!
 8c4:	00000025 	andeq	r0, r0, r5, lsr #32
 8c8:	00779102 	rsbseq	r9, r7, r2, lsl #2
 8cc:	00029503 	andeq	r9, r2, r3, lsl #10
 8d0:	06220100 	strteq	r0, [r2], -r0, lsl #2
 8d4:	20000282 	andcs	r0, r0, r2, lsl #5
 8d8:	0000005c 	andeq	r0, r0, ip, asr r0
 8dc:	021a9c01 	andseq	r9, sl, #256	; 0x100
 8e0:	6d040000 	stcvs	0, cr0, [r4, #-0]
 8e4:	22010073 	andcs	r0, r1, #115	; 0x73
 8e8:	00021a1f 	andeq	r1, r2, pc, lsl sl
 8ec:	6c910200 	lfmvs	f0, 4, [r1], {0}
 8f0:	0002a20c 	andeq	sl, r2, ip, lsl #4
 8f4:	00002620 	andeq	r2, r0, r0, lsr #12
 8f8:	00630a00 	rsbeq	r0, r3, r0, lsl #20
 8fc:	6c0f2901 			; <UNDEFINED> instruction: 0x6c0f2901
 900:	02000000 	andeq	r0, r0, #0
 904:	00007491 	muleq	r0, r1, r4
 908:	e7070402 	str	r0, [r7, -r2, lsl #8]
 90c:	03000000 	movweq	r0, #0
 910:	0000035d 	andeq	r0, r0, sp, asr r3
 914:	3c061301 	stccc	3, cr1, [r6], {1}
 918:	46200002 	strtmi	r0, [r0], -r2
 91c:	01000000 	mrseq	r0, (UNDEF: 0)
 920:	0002469c 	muleq	r2, ip, r6
 924:	73750400 	cmnvc	r5, #0, 8
 928:	1f130100 	svcne	0x00130100
 92c:	0000021a 	andeq	r0, r0, sl, lsl r2
 930:	00749102 	rsbseq	r9, r4, r2, lsl #2
 934:	0003080d 	andeq	r0, r3, sp, lsl #16
 938:	06080100 	streq	r0, [r8], -r0, lsl #2
 93c:	200001f8 	strdcs	r0, [r0], -r8
 940:	00000044 	andeq	r0, r0, r4, asr #32
 944:	8a009c01 	bhi	27950 <startup-0x1ffd86b0>
 948:	04000005 	streq	r0, [r0], #-5
 94c:	00044f00 	andeq	r4, r4, r0, lsl #30
 950:	19010400 	stmdbne	r1, {sl}
 954:	0c000001 	stceq	0, cr0, [r0], {1}
 958:	000003dc 	ldrdeq	r0, [r0], -ip
 95c:	00000015 	andeq	r0, r0, r5, lsl r0
 960:	20000594 	mulcs	r0, r4, r5
 964:	00000474 	andeq	r0, r0, r4, ror r4
 968:	00000470 	andeq	r0, r0, r0, ror r4
 96c:	00028002 	andeq	r8, r2, r2
 970:	50010700 	andpl	r0, r1, r0, lsl #14
 974:	03000000 	movweq	r0, #0
 978:	00500629 	subseq	r0, r0, r9, lsr #12
 97c:	e1030000 	mrs	r0, (UNDEF: 3)
 980:	00000000 	andeq	r0, r0, r0
 984:	6e757204 	cdpvs	2, 7, cr7, cr5, cr4, {0}
 988:	b9030100 	stmdblt	r3, {r8}
 98c:	02000000 	andeq	r0, r0, #0
 990:	0001ed03 	andeq	lr, r1, r3, lsl #26
 994:	05000300 	streq	r0, [r0, #-768]	; 0xfffffd00
 998:	005b0801 	subseq	r0, fp, r1, lsl #16
 99c:	55060000 	strpl	r0, [r6, #-0]
 9a0:	02000000 	andeq	r0, r0, #0
 9a4:	7b100402 	blvc	4019b4 <startup-0x1fbfe64c>
 9a8:	07000000 	streq	r0, [r0, -r0]
 9ac:	05020078 	streq	r0, [r2, #-120]	; 0xffffff88
 9b0:	00007b07 	andeq	r7, r0, r7, lsl #22
 9b4:	79070000 	stmdbvc	r7, {}	; <UNPREDICTABLE>
 9b8:	09050200 	stmdbeq	r5, {r9}
 9bc:	0000007b 	andeq	r0, r0, fp, ror r0
 9c0:	01050001 	tsteq	r5, r1
 9c4:	00006408 	andeq	r6, r0, r8, lsl #8
 9c8:	00550800 	subseq	r0, r5, r0, lsl #16
 9cc:	06020000 	streq	r0, [r2], -r0
 9d0:	00005703 	andeq	r5, r0, r3, lsl #14
 9d4:	00010900 	andeq	r0, r1, r0, lsl #18
 9d8:	0a340000 	beq	d009e0 <startup-0x1f2ff620>
 9dc:	d0100802 	andsle	r0, r0, r2, lsl #16
 9e0:	0a000000 	beq	9e8 <startup-0x1ffff618>
 9e4:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 9e8:	d0060a02 	andle	r0, r6, r2, lsl #20
 9ec:	00000000 	andeq	r0, r0, r0
 9f0:	00010d0a 	andeq	r0, r1, sl, lsl #26
 9f4:	060b0200 	streq	r0, [fp], -r0, lsl #4
 9f8:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 9fc:	01130a04 	tsteq	r3, r4, lsl #20
 a00:	0c020000 	stceq	0, cr0, [r2], {-0}
 a04:	0000d006 	andeq	sp, r0, r6
 a08:	70070800 	andvc	r0, r7, r0, lsl #16
 a0c:	0d020078 	stceq	0, cr0, [r2, #-480]	; 0xfffffe20
 a10:	0000d708 	andeq	sp, r0, r8, lsl #14
 a14:	0b000c00 	bleq	3a1c <startup-0x1fffc5e4>
 a18:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 a1c:	820c0074 	andhi	r0, ip, #116	; 0x74
 a20:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
 a24:	0d000000 	stceq	0, cr0, [r0, #-0]
 a28:	000000e8 	andeq	r0, r0, r8, ror #1
 a2c:	05000513 	streq	r0, [r0, #-1299]	; 0xfffffaed
 a30:	00e70704 	rsceq	r0, r7, r4, lsl #14
 a34:	01080000 	mrseq	r0, (UNDEF: 8)
 a38:	02000000 	andeq	r0, r0, #0
 a3c:	008e020e 	addeq	r0, lr, lr, lsl #4
 a40:	00080000 	andeq	r0, r8, r0
 a44:	02000000 	andeq	r0, r0, #0
 a48:	01070c0e 	tsteq	r7, lr, lsl #24
 a4c:	040e0000 	streq	r0, [lr], #-0
 a50:	0000008e 	andeq	r0, r0, lr, lsl #1
 a54:	6a624f0f 	bvs	1894698 <startup-0x1e76b968>
 a58:	10023400 	andne	r3, r2, r0, lsl #8
 a5c:	0001c410 	andeq	ip, r1, r0, lsl r4
 a60:	00dd0a00 	sbcseq	r0, sp, r0, lsl #20
 a64:	11020000 	mrsne	r0, (UNDEF: 2)
 a68:	0000fb0c 	andeq	pc, r0, ip, lsl #22
 a6c:	d50a0000 	strle	r0, [sl, #-0]
 a70:	02000000 	andeq	r0, r0, #0
 a74:	00fb0c12 	rscseq	r0, fp, r2, lsl ip
 a78:	0a040000 	beq	100a80 <startup-0x1feff580>
 a7c:	000000b5 	strheq	r0, [r0], -r5
 a80:	fb0c1302 	blx	305692 <startup-0x1fcfa96e>
 a84:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 a88:	0001e90a 	andeq	lr, r1, sl, lsl #18
 a8c:	0c140200 	lfmeq	f0, 4, [r4], {-0}
 a90:	000000fb 	strdeq	r0, [r0], -fp
 a94:	000a0a0c 	andeq	r0, sl, ip, lsl #20
 a98:	15020000 	strne	r0, [r2, #-0]
 a9c:	0000d006 	andeq	sp, r0, r6
 aa0:	390a1000 	stmdbcc	sl, {ip}
 aa4:	02000000 	andeq	r0, r0, #0
 aa8:	00d00616 	sbcseq	r0, r0, r6, lsl r6
 aac:	0a140000 	beq	500ab4 <startup-0x1faff54c>
 ab0:	0000003e 	andeq	r0, r0, lr, lsr r0
 ab4:	d00c1602 	andle	r1, ip, r2, lsl #12
 ab8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
 abc:	0000780a 	andeq	r7, r0, sl, lsl #16
 ac0:	06170200 	ldreq	r0, [r7], -r0, lsl #4
 ac4:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 ac8:	007d0a1c 	rsbseq	r0, sp, ip, lsl sl
 acc:	17020000 	strne	r0, [r2, -r0]
 ad0:	0000d00c 	andeq	sp, r0, ip
 ad4:	690a2000 	stmdbvs	sl, {sp}
 ad8:	02000000 	andeq	r0, r0, #0
 adc:	01d50a18 	bicseq	r0, r5, r8, lsl sl
 ae0:	0a240000 	beq	900ae8 <startup-0x1f6ff518>
 ae4:	000004c3 	andeq	r0, r0, r3, asr #9
 ae8:	d50a1902 	strle	r1, [sl, #-2306]	; 0xfffff6fe
 aec:	28000001 	stmdacs	r0, {r0}
 af0:	0000230a 	andeq	r2, r0, sl, lsl #6
 af4:	0a1a0200 	beq	6812fc <startup-0x1f97ed04>
 af8:	000001d5 	ldrdeq	r0, [r0], -r5
 afc:	006e0a2c 	rsbeq	r0, lr, ip, lsr #20
 b00:	1b020000 	blne	80b08 <startup-0x1ff7f4f8>
 b04:	0001f00a 	andeq	pc, r1, sl
 b08:	10003000 	andne	r3, r0, r0
 b0c:	000001cf 	andeq	r0, r0, pc, asr #3
 b10:	0001cf11 	andeq	ip, r1, r1, lsl pc
 b14:	040e0000 	streq	r0, [lr], #-0
 b18:	0000010d 	andeq	r0, r0, sp, lsl #2
 b1c:	01c4040e 	biceq	r0, r4, lr, lsl #8
 b20:	f0100000 			; <UNDEFINED> instruction: 0xf0100000
 b24:	11000001 	tstne	r0, r1
 b28:	000001cf 	andeq	r0, r0, pc, asr #3
 b2c:	0000d011 	andeq	sp, r0, r1, lsl r0
 b30:	00d01100 	sbcseq	r1, r0, r0, lsl #2
 b34:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
 b38:	0001db04 	andeq	sp, r1, r4, lsl #22
 b3c:	028e0800 	addeq	r0, lr, #0, 16
 b40:	1c020000 	stcne	0, cr0, [r2], {-0}
 b44:	00010d03 	andeq	r0, r1, r3, lsl #26
 b48:	028d0800 	addeq	r0, sp, #0, 16
 b4c:	1c020000 	stcne	0, cr0, [r2], {-0}
 b50:	0001cf0c 	andeq	ip, r1, ip, lsl #30
 b54:	00431200 	subeq	r1, r3, r0, lsl #4
 b58:	1f020000 	svcne	0x00020000
 b5c:	0000ef11 	andeq	lr, r0, r1, lsl pc
 b60:	00281200 	eoreq	r1, r8, r0, lsl #4
 b64:	20020000 	andcs	r0, r2, r0
 b68:	0000ef11 	andeq	lr, r0, r1, lsl pc
 b6c:	01cc1200 	biceq	r1, ip, r0, lsl #4
 b70:	21020000 	mrscs	r0, (UNDEF: 2)
 b74:	0000ef11 	andeq	lr, r0, r1, lsl pc
 b78:	61631300 	cmnvs	r3, r0, lsl #6
 b7c:	23020074 	movwcs	r0, #8308	; 0x2074
 b80:	0001f60f 	andeq	pc, r1, pc, lsl #12
 b84:	01f21200 	mvnseq	r1, r0, lsl #4
 b88:	24020000 	strcs	r0, [r2], #-0
 b8c:	0001f60f 	andeq	pc, r1, pc, lsl #12
 b90:	01081200 	mrseq	r1, R8_fiq
 b94:	25020000 	strcs	r0, [r2, #-0]
 b98:	0001f60f 	andeq	pc, r1, pc, lsl #12
 b9c:	00971200 	addseq	r1, r7, r0, lsl #4
 ba0:	26020000 	strcs	r0, [r2], -r0
 ba4:	0001f60f 	andeq	pc, r1, pc, lsl #12
 ba8:	046b1400 	strbteq	r1, [fp], #-1024	; 0xfffffc00
 bac:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
 bb0:	0000d005 	andeq	sp, r0, r5
 bb4:	0009dc00 	andeq	sp, r9, r0, lsl #24
 bb8:	00002c20 	andeq	r2, r0, r0, lsr #24
 bbc:	d59c0100 	ldrle	r0, [ip, #256]	; 0x100
 bc0:	15000002 	strne	r0, [r0, #-2]
 bc4:	0100316f 	tsteq	r0, pc, ror #2
 bc8:	02022489 	andeq	r2, r2, #-1996488704	; 0x89000000
 bcc:	91020000 	mrsls	r0, (UNDEF: 2)
 bd0:	326f1564 	rsbcc	r1, pc, #100, 10	; 0x19000000
 bd4:	30890100 	addcc	r0, r9, r0, lsl #2
 bd8:	00000202 	andeq	r0, r0, r2, lsl #4
 bdc:	16609102 	strbtne	r9, [r0], -r2, lsl #2
 be0:	00000413 	andeq	r0, r0, r3, lsl r4
 be4:	d0078a01 	andle	r8, r7, r1, lsl #20
 be8:	02000000 	andeq	r0, r0, #0
 bec:	0a167491 	beq	59de38 <startup-0x1fa621c8>
 bf0:	01000004 	tsteq	r0, r4
 bf4:	00d0078b 	sbcseq	r0, r0, fp, lsl #15
 bf8:	91020000 	mrsls	r0, (UNDEF: 2)
 bfc:	03b61670 			; <UNDEFINED> instruction: 0x03b61670
 c00:	8c010000 	stchi	0, cr0, [r1], {-0}
 c04:	0000d007 	andeq	sp, r0, r7
 c08:	6c910200 	lfmvs	f0, 4, [r1], {0}
 c0c:	00045116 	andeq	r5, r4, r6, lsl r1
 c10:	078d0100 	streq	r0, [sp, r0, lsl #2]
 c14:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 c18:	00689102 	rsbeq	r9, r8, r2, lsl #2
 c1c:	00045a17 	andeq	r5, r4, r7, lsl sl
 c20:	06830100 	streq	r0, [r3], r0, lsl #2
 c24:	200009bc 			; <UNDEFINED> instruction: 0x200009bc
 c28:	00000020 	andeq	r0, r0, r0, lsr #32
 c2c:	03179c01 	tsteq	r7, #256	; 0x100
 c30:	6f150000 	svcvs	0x00150000
 c34:	20830100 	addcs	r0, r3, r0, lsl #2
 c38:	00000202 	andeq	r0, r0, r2, lsl #4
 c3c:	18749102 	ldmdane	r4!, {r1, r8, ip, pc}^
 c40:	000004c9 	andeq	r0, r0, r9, asr #9
 c44:	d0278301 	eorle	r8, r7, r1, lsl #6
 c48:	02000000 	andeq	r0, r0, #0
 c4c:	d0187091 	mulsle	r8, r1, r0
 c50:	01000004 	tsteq	r0, r4
 c54:	00d03383 	sbcseq	r3, r0, r3, lsl #7
 c58:	91020000 	mrsls	r0, (UNDEF: 2)
 c5c:	ac14006c 	ldcge	0, cr0, [r4], {108}	; 0x6c
 c60:	01000003 	tsteq	r0, r3
 c64:	00d0057a 	sbcseq	r0, r0, sl, ror r5
 c68:	099e0000 	ldmibeq	lr, {}	; <UNPREDICTABLE>
 c6c:	001e2000 	andseq	r2, lr, r0
 c70:	9c010000 	stcls	0, cr0, [r1], {-0}
 c74:	0000033f 	andeq	r0, r0, pc, lsr r3
 c78:	01006f15 	tsteq	r0, r5, lsl pc
 c7c:	0202177a 	andeq	r1, r2, #31981568	; 0x1e80000
 c80:	91020000 	mrsls	r0, (UNDEF: 2)
 c84:	1c190074 	ldcne	0, cr0, [r9], {116}	; 0x74
 c88:	01000004 	tsteq	r0, r4
 c8c:	09780674 	ldmdbeq	r8!, {r2, r4, r5, r6, r9, sl}^
 c90:	00262000 	eoreq	r2, r6, r0
 c94:	9c010000 	stcls	0, cr0, [r1], {-0}
 c98:	00000363 	andeq	r0, r0, r3, ror #6
 c9c:	01006f15 	tsteq	r0, r5, lsl pc
 ca0:	02022374 	andeq	r2, r2, #116, 6	; 0xd0000001
 ca4:	91020000 	mrsls	r0, (UNDEF: 2)
 ca8:	81190074 	tsthi	r9, r4, ror r0
 cac:	01000004 	tsteq	r0, r4
 cb0:	093e066a 	ldmdbeq	lr!, {r1, r3, r5, r6, r9, sl}
 cb4:	003a2000 	eorseq	r2, sl, r0
 cb8:	9c010000 	stcls	0, cr0, [r1], {-0}
 cbc:	00000387 	andeq	r0, r0, r7, lsl #7
 cc0:	01006f15 	tsteq	r0, r5, lsl pc
 cc4:	0202236a 	andeq	r2, r2, #-1476395007	; 0xa8000001
 cc8:	91020000 	mrsls	r0, (UNDEF: 2)
 ccc:	fb190074 	blx	640ea6 <startup-0x1f9bf15a>
 cd0:	01000003 	tsteq	r0, r3
 cd4:	09100663 	ldmdbeq	r0, {r0, r1, r5, r6, r9, sl}
 cd8:	002e2000 	eoreq	r2, lr, r0
 cdc:	9c010000 	stcls	0, cr0, [r1], {-0}
 ce0:	000003ab 	andeq	r0, r0, fp, lsr #7
 ce4:	01006f15 	tsteq	r0, r5, lsl pc
 ce8:	02021e63 	andeq	r1, r2, #1584	; 0x630
 cec:	91020000 	mrsls	r0, (UNDEF: 2)
 cf0:	cb190074 	blgt	640ec8 <startup-0x1f9bf138>
 cf4:	01000003 	tsteq	r0, r3
 cf8:	08b80657 	ldmeq	r8!, {r0, r1, r2, r4, r6, r9, sl}
 cfc:	00582000 	subseq	r2, r8, r0
 d00:	9c010000 	stcls	0, cr0, [r1], {-0}
 d04:	000003cf 	andeq	r0, r0, pc, asr #7
 d08:	01006f15 	tsteq	r0, r5, lsl pc
 d0c:	02022057 	andeq	r2, r2, #87	; 0x57
 d10:	91020000 	mrsls	r0, (UNDEF: 2)
 d14:	42190074 	andsmi	r0, r9, #116	; 0x74
 d18:	01000004 	tsteq	r0, r4
 d1c:	0888064d 	stmeq	r8, {r0, r2, r3, r6, r9, sl}
 d20:	00302000 	eorseq	r2, r0, r0
 d24:	9c010000 	stcls	0, cr0, [r1], {-0}
 d28:	000003f3 	strdeq	r0, [r0], -r3
 d2c:	01006f15 	tsteq	r0, r5, lsl pc
 d30:	02021e4d 	andeq	r1, r2, #1232	; 0x4d0
 d34:	91020000 	mrsls	r0, (UNDEF: 2)
 d38:	a8190074 	ldmdage	r9, {r2, r4, r5, r6}
 d3c:	01000004 	tsteq	r0, r4
 d40:	071a0636 			; <UNDEFINED> instruction: 0x071a0636
 d44:	016e2000 	cmneq	lr, r0
 d48:	9c010000 	stcls	0, cr0, [r1], {-0}
 d4c:	0000047f 	andeq	r0, r0, pc, ror r4
 d50:	01006f15 	tsteq	r0, r5, lsl pc
 d54:	02021c36 	andeq	r1, r2, #13824	; 0x3600
 d58:	91020000 	mrsls	r0, (UNDEF: 2)
 d5c:	072a1a64 	streq	r1, [sl, -r4, ror #20]!
 d60:	004e2000 	subeq	r2, lr, r0
 d64:	04310000 	ldrteq	r0, [r1], #-0
 d68:	691b0000 	ldmdbvs	fp, {}	; <UNPREDICTABLE>
 d6c:	0d380100 	ldfeqs	f0, [r8, #-0]
 d70:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 d74:	00749102 	rsbseq	r9, r4, r2, lsl #2
 d78:	0007821a 	andeq	r8, r7, sl, lsl r2
 d7c:	00004e20 	andeq	r4, r0, r0, lsr #28
 d80:	00044c00 	andeq	r4, r4, r0, lsl #24
 d84:	00691b00 	rsbeq	r1, r9, r0, lsl #22
 d88:	d00d3d01 	andle	r3, sp, r1, lsl #26
 d8c:	02000000 	andeq	r0, r0, #0
 d90:	1a007091 	bne	1cfdc <startup-0x1ffe3024>
 d94:	200007da 	ldrdcs	r0, [r0], -sl
 d98:	0000004e 	andeq	r0, r0, lr, asr #32
 d9c:	00000467 	andeq	r0, r0, r7, ror #8
 da0:	0100691b 	tsteq	r0, fp, lsl r9
 da4:	00d00d42 	sbcseq	r0, r0, r2, asr #26
 da8:	91020000 	mrsls	r0, (UNDEF: 2)
 dac:	321c006c 	andscc	r0, ip, #108	; 0x6c
 db0:	4e200008 	cdpmi	0, 2, cr0, cr0, cr8, {0}
 db4:	1b000000 	blne	dbc <startup-0x1ffff244>
 db8:	47010069 	strmi	r0, [r1, -r9, rrx]
 dbc:	0000d00d 	andeq	sp, r0, sp
 dc0:	68910200 	ldmvs	r1, {r9}
 dc4:	bf190000 	svclt	0x00190000
 dc8:	01000003 	tsteq	r0, r3
 dcc:	05ac061f 	streq	r0, [ip, #1567]!	; 0x61f
 dd0:	016e2000 	cmneq	lr, r0
 dd4:	9c010000 	stcls	0, cr0, [r1], {-0}
 dd8:	0000050b 	andeq	r0, r0, fp, lsl #10
 ddc:	01006f15 	tsteq	r0, r5, lsl pc
 de0:	02021b1f 	andeq	r1, r2, #31744	; 0x7c00
 de4:	91020000 	mrsls	r0, (UNDEF: 2)
 de8:	05bc1a64 	ldreq	r1, [ip, #2660]!	; 0xa64
 dec:	004e2000 	subeq	r2, lr, r0
 df0:	04bd0000 	ldrteq	r0, [sp], #0
 df4:	691b0000 	ldmdbvs	fp, {}	; <UNPREDICTABLE>
 df8:	0d210100 	stfeqs	f0, [r1, #-0]
 dfc:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 e00:	00749102 	rsbseq	r9, r4, r2, lsl #2
 e04:	0006141a 	andeq	r1, r6, sl, lsl r4
 e08:	00004e20 	andeq	r4, r0, r0, lsr #28
 e0c:	0004d800 	andeq	sp, r4, r0, lsl #16
 e10:	00691b00 	rsbeq	r1, r9, r0, lsl #22
 e14:	d00d2601 	andle	r2, sp, r1, lsl #12
 e18:	02000000 	andeq	r0, r0, #0
 e1c:	1a007091 	bne	1d068 <startup-0x1ffe2f98>
 e20:	2000066c 	andcs	r0, r0, ip, ror #12
 e24:	0000004e 	andeq	r0, r0, lr, asr #32
 e28:	000004f3 	strdeq	r0, [r0], -r3
 e2c:	0100691b 	tsteq	r0, fp, lsl r9
 e30:	00d00d2b 	sbcseq	r0, r0, fp, lsr #26
 e34:	91020000 	mrsls	r0, (UNDEF: 2)
 e38:	c41c006c 	ldrgt	r0, [ip], #-108	; 0xffffff94
 e3c:	4e200006 	cdpmi	0, 2, cr0, cr0, cr6, {0}
 e40:	1b000000 	blne	e48 <startup-0x1ffff1b8>
 e44:	30010069 	andcc	r0, r1, r9, rrx
 e48:	0000d00d 	andeq	sp, r0, sp
 e4c:	68910200 	ldmvs	r1, {r9}
 e50:	b5170000 	ldrlt	r0, [r7, #-0]
 e54:	01000004 	tsteq	r0, r4
 e58:	05a60618 	streq	r0, [r6, #1560]!	; 0x618
 e5c:	00062000 	andeq	r2, r6, r0
 e60:	9c010000 	stcls	0, cr0, [r1], {-0}
 e64:	0000053a 	andeq	r0, r0, sl, lsr r5
 e68:	01007815 	tsteq	r0, r5, lsl r8
 e6c:	00d01e18 	sbcseq	r1, r0, r8, lsl lr
 e70:	50010000 	andpl	r0, r1, r0
 e74:	01007915 	tsteq	r0, r5, lsl r9
 e78:	00d02518 	sbcseq	r2, r0, r8, lsl r5
 e7c:	51010000 	mrspl	r0, (UNDEF: 1)
 e80:	04301700 	ldrteq	r1, [r0], #-1792	; 0xfffff900
 e84:	12010000 	andne	r0, r1, #0
 e88:	0005a006 	andeq	sl, r5, r6
 e8c:	00000620 	andeq	r0, r0, r0, lsr #12
 e90:	699c0100 	ldmibvs	ip, {r8}
 e94:	15000005 	strne	r0, [r0, #-5]
 e98:	12010078 	andne	r0, r1, #120	; 0x78
 e9c:	0000d01c 	andeq	sp, r0, ip, lsl r0
 ea0:	15500100 	ldrbne	r0, [r0, #-256]	; 0xffffff00
 ea4:	12010079 	andne	r0, r1, #121	; 0x79
 ea8:	0000d023 	andeq	sp, r0, r3, lsr #32
 eac:	00510100 	subseq	r0, r1, r0, lsl #2
 eb0:	0004d71d 	andeq	sp, r4, sp, lsl r7
 eb4:	060c0100 	streq	r0, [ip], -r0, lsl #2
 eb8:	2000059a 	mulcs	r0, sl, r5
 ebc:	00000006 	andeq	r0, r0, r6
 ec0:	951d9c01 	ldrls	r9, [sp, #-3073]	; 0xfffff3ff
 ec4:	01000004 	tsteq	r0, r4
 ec8:	05940606 	ldreq	r0, [r4, #1542]	; 0x606
 ecc:	00062000 	andeq	r2, r6, r0
 ed0:	9c010000 	stcls	0, cr0, [r1], {-0}
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	100e1b0e 	andne	r1, lr, lr, lsl #22
   c:	02000017 	andeq	r0, r0, #23
  10:	0b0b0024 	bleq	2c00a8 <startup-0x1fd3ff58>
  14:	0e030b3e 	vmoveq.16	d3[0], r0
  18:	13030000 	movwne	r0, #12288	; 0x3000
  1c:	0b0e0301 	bleq	380c28 <startup-0x1fc7f3d8>
  20:	3b0b3a0b 	blcc	2ce854 <startup-0x1fd317ac>
  24:	010b390b 	tsteq	fp, fp, lsl #18
  28:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
  2c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
  30:	0b3b0b3a 	bleq	ec2d20 <startup-0x1f13d2e0>
  34:	13490b39 	movtne	r0, #39737	; 0x9b39
  38:	00000b38 	andeq	r0, r0, r8, lsr fp
  3c:	03001605 	movweq	r1, #1541	; 0x605
  40:	3b0b3a0e 	blcc	2ce880 <startup-0x1fd31780>
  44:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  48:	06000013 			; <UNDEFINED> instruction: 0x06000013
  4c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
  50:	0b3a050b 	bleq	e81484 <startup-0x1f17eb7c>
  54:	0b390b3b 	bleq	e42d48 <startup-0x1f1bd2b8>
  58:	00001301 	andeq	r1, r0, r1, lsl #6
  5c:	03000d07 	movweq	r0, #3335	; 0xd07
  60:	3b0b3a0e 	blcc	2ce8a0 <startup-0x1fd31760>
  64:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  68:	000b3813 	andeq	r3, fp, r3, lsl r8
  6c:	00240800 	eoreq	r0, r4, r0, lsl #16
  70:	0b3e0b0b 	bleq	f82ca4 <startup-0x1f07d35c>
  74:	00000803 	andeq	r0, r0, r3, lsl #16
  78:	49010109 	stmdbmi	r1, {r0, r3, r8}
  7c:	00130113 	andseq	r0, r3, r3, lsl r1
  80:	00210a00 	eoreq	r0, r1, r0, lsl #20
  84:	052f1349 	streq	r1, [pc, #-841]!	; fffffd43 <keyb_state+0xdfff955b>
  88:	0f0b0000 	svceq	0x000b0000
  8c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
  90:	0c000013 	stceq	0, cr0, [r0], {19}
  94:	08030113 	stmdaeq	r3, {r0, r1, r4, r8}
  98:	0b3a0b0b 	bleq	e82ccc <startup-0x1f17d334>
  9c:	0b390b3b 	bleq	e42d90 <startup-0x1f1bd270>
  a0:	00001301 	andeq	r1, r0, r1, lsl #6
  a4:	2701150d 	strcs	r1, [r1, -sp, lsl #10]
  a8:	00130119 	andseq	r0, r3, r9, lsl r1
  ac:	00050e00 	andeq	r0, r5, r0, lsl #28
  b0:	00001349 	andeq	r1, r0, r9, asr #6
  b4:	0300340f 	movweq	r3, #1039	; 0x40f
  b8:	3b0b3a0e 	blcc	2ce8f8 <startup-0x1fd31708>
  bc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  c0:	3c193f13 	ldccc	15, cr3, [r9], {19}
  c4:	10000019 	andne	r0, r0, r9, lsl r0
  c8:	08030034 	stmdaeq	r3, {r2, r4, r5}
  cc:	0b3b0b3a 	bleq	ec2dbc <startup-0x1f13d244>
  d0:	13490b39 	movtne	r0, #39737	; 0x9b39
  d4:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  d8:	34110000 	ldrcc	r0, [r1], #-0
  dc:	3a134700 	bcc	4d1ce4 <startup-0x1fb2e31c>
  e0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  e4:	0018020b 	andseq	r0, r8, fp, lsl #4
  e8:	00341200 	eorseq	r1, r4, r0, lsl #4
  ec:	0b3a0e03 	bleq	e83900 <startup-0x1f17c700>
  f0:	0b390b3b 	bleq	e42de4 <startup-0x1f1bd21c>
  f4:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
  f8:	00001802 	andeq	r1, r0, r2, lsl #16
  fc:	03003413 	movweq	r3, #1043	; 0x413
 100:	3b0b3a0e 	blcc	2ce940 <startup-0x1fd316c0>
 104:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 108:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 10c:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
 110:	13470034 	movtne	r0, #28724	; 0x7034
 114:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 118:	18020b39 	stmdane	r2, {r0, r3, r4, r5, r8, r9, fp}
 11c:	01000000 	mrseq	r0, (UNDEF: 0)
 120:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 124:	0e030b13 	vmoveq.32	d3[0], r0
 128:	01110e1b 	tsteq	r1, fp, lsl lr
 12c:	17100612 			; <UNDEFINED> instruction: 0x17100612
 130:	24020000 	strcs	r0, [r2], #-0
 134:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 138:	000e030b 	andeq	r0, lr, fp, lsl #6
 13c:	00340300 	eorseq	r0, r4, r0, lsl #6
 140:	0b3a0e03 	bleq	e83954 <startup-0x1f17c6ac>
 144:	0b390b3b 	bleq	e42e38 <startup-0x1f1bd1c8>
 148:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 14c:	00001802 	andeq	r1, r0, r2, lsl #16
 150:	0b002404 	bleq	9168 <startup-0x1fff6e98>
 154:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 158:	05000008 	streq	r0, [r0, #-8]
 15c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 160:	0b3a0e03 	bleq	e83974 <startup-0x1f17c68c>
 164:	0b390b3b 	bleq	e42e58 <startup-0x1f1bd1a8>
 168:	13491927 	movtne	r1, #39207	; 0x9927
 16c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 170:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 174:	00130119 	andseq	r0, r3, r9, lsl r1
 178:	00340600 	eorseq	r0, r4, r0, lsl #12
 17c:	0b3a0803 	bleq	e82190 <startup-0x1f17de70>
 180:	0b390b3b 	bleq	e42e74 <startup-0x1f1bd18c>
 184:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 188:	01070000 	mrseq	r0, (UNDEF: 7)
 18c:	01134901 	tsteq	r3, r1, lsl #18
 190:	08000013 	stmdaeq	r0, {r0, r1, r4}
 194:	13490021 	movtne	r0, #36897	; 0x9021
 198:	00000b2f 	andeq	r0, r0, pc, lsr #22
 19c:	3f012e09 	svccc	0x00012e09
 1a0:	3a0e0319 	bcc	380e0c <startup-0x1fc7f1f4>
 1a4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1a8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 1ac:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 1b0:	97184006 	ldrls	r4, [r8, -r6]
 1b4:	13011942 	movwne	r1, #6466	; 0x1942
 1b8:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
 1bc:	03193f01 	tsteq	r9, #1, 30
 1c0:	3b0b3a0e 	blcc	2cea00 <startup-0x1fd31600>
 1c4:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 1c8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 1cc:	97184006 	ldrls	r4, [r8, -r6]
 1d0:	00001942 	andeq	r1, r0, r2, asr #18
 1d4:	0300050b 	movweq	r0, #1291	; 0x50b
 1d8:	3b0b3a08 	blcc	2cea00 <startup-0x1fd31600>
 1dc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 1e0:	00180213 	andseq	r0, r8, r3, lsl r2
 1e4:	11010000 	mrsne	r0, (UNDEF: 1)
 1e8:	130e2501 	movwne	r2, #58625	; 0xe501
 1ec:	1b0e030b 	blne	380e20 <startup-0x1fc7f1e0>
 1f0:	0017100e 	andseq	r1, r7, lr
 1f4:	00240200 	eoreq	r0, r4, r0, lsl #4
 1f8:	0b3e0b0b 	bleq	f82e2c <startup-0x1f07d1d4>
 1fc:	00000e03 	andeq	r0, r0, r3, lsl #28
 200:	01110100 	tsteq	r1, r0, lsl #2
 204:	0b130e25 	bleq	4c3aa0 <startup-0x1fb3c560>
 208:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 20c:	01111755 	tsteq	r1, r5, asr r7
 210:	00001710 	andeq	r1, r0, r0, lsl r7
 214:	03010402 	movweq	r0, #5122	; 0x1402
 218:	0b0b3e0e 	bleq	2cfa58 <startup-0x1fd305a8>
 21c:	3a13490b 	bcc	4d2650 <startup-0x1fb2d9b0>
 220:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 224:	0013010b 	andseq	r0, r3, fp, lsl #2
 228:	00280300 	eoreq	r0, r8, r0, lsl #6
 22c:	0b1c0e03 	bleq	703a40 <startup-0x1f8fc5c0>
 230:	28040000 	stmdacs	r4, {}	; <UNPREDICTABLE>
 234:	1c080300 	stcne	3, cr0, [r8], {-0}
 238:	0500000b 	streq	r0, [r0, #-11]
 23c:	0b0b0024 	bleq	2c02d4 <startup-0x1fd3fd2c>
 240:	0e030b3e 	vmoveq.16	d3[0], r0
 244:	13060000 	movwne	r0, #24576	; 0x6000
 248:	0b0e0301 	bleq	380e54 <startup-0x1fc7f1ac>
 24c:	3b0b3a0b 	blcc	2cea80 <startup-0x1fd31580>
 250:	010b390b 	tsteq	fp, fp, lsl #18
 254:	07000013 	smladeq	r0, r3, r0, r0
 258:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 25c:	0b3b0b3a 	bleq	ec2f4c <startup-0x1f13d0b4>
 260:	13490b39 	movtne	r0, #39737	; 0x9b39
 264:	00000b38 	andeq	r0, r0, r8, lsr fp
 268:	03001608 	movweq	r1, #1544	; 0x608
 26c:	3b0b3a0e 	blcc	2ceaac <startup-0x1fd31554>
 270:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 274:	09000013 	stmdbeq	r0, {r0, r1, r4}
 278:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 27c:	0b3a050b 	bleq	e816b0 <startup-0x1f17e950>
 280:	0b390b3b 	bleq	e42f74 <startup-0x1f1bd08c>
 284:	00001301 	andeq	r1, r0, r1, lsl #6
 288:	03000d0a 	movweq	r0, #3338	; 0xd0a
 28c:	3b0b3a0e 	blcc	2ceacc <startup-0x1fd31534>
 290:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 294:	000b3813 	andeq	r3, fp, r3, lsl r8
 298:	00240b00 	eoreq	r0, r4, r0, lsl #22
 29c:	0b3e0b0b 	bleq	f82ed0 <startup-0x1f07d130>
 2a0:	00000803 	andeq	r0, r0, r3, lsl #16
 2a4:	4901010c 	stmdbmi	r1, {r2, r3, r8}
 2a8:	00130113 	andseq	r0, r3, r3, lsl r1
 2ac:	00210d00 	eoreq	r0, r1, r0, lsl #26
 2b0:	052f1349 	streq	r1, [pc, #-841]!	; ffffff6f <keyb_state+0xdfff9787>
 2b4:	0f0e0000 	svceq	0x000e0000
 2b8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 2bc:	0f000013 	svceq	0x00000013
 2c0:	08030113 	stmdaeq	r3, {r0, r1, r4, r8}
 2c4:	0b3a0b0b 	bleq	e82ef8 <startup-0x1f17d108>
 2c8:	0b390b3b 	bleq	e42fbc <startup-0x1f1bd044>
 2cc:	00001301 	andeq	r1, r0, r1, lsl #6
 2d0:	27011510 	smladcs	r1, r0, r5, r1
 2d4:	00130119 	andseq	r0, r3, r9, lsl r1
 2d8:	00051100 	andeq	r1, r5, r0, lsl #2
 2dc:	00001349 	andeq	r1, r0, r9, asr #6
 2e0:	03003412 	movweq	r3, #1042	; 0x412
 2e4:	3b0b3a0e 	blcc	2ceb24 <startup-0x1fd314dc>
 2e8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 2ec:	3c193f13 	ldccc	15, cr3, [r9], {19}
 2f0:	13000019 	movwne	r0, #25
 2f4:	08030034 	stmdaeq	r3, {r2, r4, r5}
 2f8:	0b3b0b3a 	bleq	ec2fe8 <startup-0x1f13d018>
 2fc:	13490b39 	movtne	r0, #39737	; 0x9b39
 300:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 304:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
 308:	03193f01 	tsteq	r9, #1, 30
 30c:	3b0b3a0e 	blcc	2ceb4c <startup-0x1fd314b4>
 310:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 314:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 318:	96184006 	ldrls	r4, [r8], -r6
 31c:	13011942 	movwne	r1, #6466	; 0x1942
 320:	34150000 	ldrcc	r0, [r5], #-0
 324:	3a080300 	bcc	200f2c <startup-0x1fdff0d4>
 328:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 32c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 330:	16000018 			; <UNDEFINED> instruction: 0x16000018
 334:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 338:	0b3a0e03 	bleq	e83b4c <startup-0x1f17c4b4>
 33c:	0b390b3b 	bleq	e43030 <startup-0x1f1bcfd0>
 340:	01111927 	tsteq	r1, r7, lsr #18
 344:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 348:	00194297 	mulseq	r9, r7, r2
 34c:	11010000 	mrsne	r0, (UNDEF: 1)
 350:	130e2501 	movwne	r2, #58625	; 0xe501
 354:	1b0e030b 	blne	380f88 <startup-0x1fc7f078>
 358:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 35c:	00171006 	andseq	r1, r7, r6
 360:	00240200 	eoreq	r0, r4, r0, lsl #4
 364:	0b3e0b0b 	bleq	f82f98 <startup-0x1f07d068>
 368:	00000e03 	andeq	r0, r0, r3, lsl #28
 36c:	3f012e03 	svccc	0x00012e03
 370:	3a0e0319 	bcc	380fdc <startup-0x1fc7f024>
 374:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 378:	1119270b 	tstne	r9, fp, lsl #14
 37c:	40061201 	andmi	r1, r6, r1, lsl #4
 380:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 384:	00001301 	andeq	r1, r0, r1, lsl #6
 388:	03000504 	movweq	r0, #1284	; 0x504
 38c:	3b0b3a08 	blcc	2cebb4 <startup-0x1fd3144c>
 390:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 394:	00180213 	andseq	r0, r8, r3, lsl r2
 398:	00340500 	eorseq	r0, r4, r0, lsl #10
 39c:	0b3a0e03 	bleq	e83bb0 <startup-0x1f17c450>
 3a0:	0b390b3b 	bleq	e43094 <startup-0x1f1bcf6c>
 3a4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 3a8:	24060000 	strcs	r0, [r6], #-0
 3ac:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 3b0:	0008030b 	andeq	r0, r8, fp, lsl #6
 3b4:	002e0700 	eoreq	r0, lr, r0, lsl #14
 3b8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 3bc:	0b3b0b3a 	bleq	ec30ac <startup-0x1f13cf54>
 3c0:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 3c4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3c8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 3cc:	08000019 	stmdaeq	r0, {r0, r3, r4}
 3d0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 3d4:	0b3b0b3a 	bleq	ec30c4 <startup-0x1f13cf3c>
 3d8:	13490b39 	movtne	r0, #39737	; 0x9b39
 3dc:	00001802 	andeq	r1, r0, r2, lsl #16
 3e0:	3f012e09 	svccc	0x00012e09
 3e4:	3a0e0319 	bcc	381050 <startup-0x1fc7efb0>
 3e8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3ec:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 3f0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 3f4:	96184006 	ldrls	r4, [r8], -r6
 3f8:	13011942 	movwne	r1, #6466	; 0x1942
 3fc:	340a0000 	strcc	r0, [sl], #-0
 400:	3a080300 	bcc	201008 <startup-0x1fdfeff8>
 404:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 408:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 40c:	0b000018 	bleq	474 <startup-0x1ffffb8c>
 410:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 414:	0b3a0e03 	bleq	e83c28 <startup-0x1f17c3d8>
 418:	0b390b3b 	bleq	e4310c <startup-0x1f1bcef4>
 41c:	01111927 	tsteq	r1, r7, lsr #18
 420:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 424:	01194297 			; <UNDEFINED> instruction: 0x01194297
 428:	0c000013 	stceq	0, cr0, [r0], {19}
 42c:	0111010b 	tsteq	r1, fp, lsl #2
 430:	00000612 	andeq	r0, r0, r2, lsl r6
 434:	3f002e0d 	svccc	0x00002e0d
 438:	3a0e0319 	bcc	3810a4 <startup-0x1fc7ef5c>
 43c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 440:	1119270b 	tstne	r9, fp, lsl #14
 444:	40061201 	andmi	r1, r6, r1, lsl #4
 448:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 44c:	01000000 	mrseq	r0, (UNDEF: 0)
 450:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 454:	0e030b13 	vmoveq.32	d3[0], r0
 458:	01110e1b 	tsteq	r1, fp, lsl lr
 45c:	17100612 			; <UNDEFINED> instruction: 0x17100612
 460:	04020000 	streq	r0, [r2], #-0
 464:	3e0e0301 	cdpcc	3, 0, cr0, cr14, cr1, {0}
 468:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 46c:	3b0b3a13 	blcc	2cecc0 <startup-0x1fd31340>
 470:	010b390b 	tsteq	fp, fp, lsl #18
 474:	03000013 	movweq	r0, #19
 478:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
 47c:	00000b1c 	andeq	r0, r0, ip, lsl fp
 480:	03002804 	movweq	r2, #2052	; 0x804
 484:	000b1c08 	andeq	r1, fp, r8, lsl #24
 488:	00240500 	eoreq	r0, r4, r0, lsl #10
 48c:	0b3e0b0b 	bleq	f830c0 <startup-0x1f07cf40>
 490:	00000e03 	andeq	r0, r0, r3, lsl #28
 494:	03011306 	movweq	r1, #4870	; 0x1306
 498:	3a0b0b0e 	bcc	2c30d8 <startup-0x1fd3cf28>
 49c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4a0:	0013010b 	andseq	r0, r3, fp, lsl #2
 4a4:	000d0700 	andeq	r0, sp, r0, lsl #14
 4a8:	0b3a0803 	bleq	e824bc <startup-0x1f17db44>
 4ac:	0b390b3b 	bleq	e431a0 <startup-0x1f1bce60>
 4b0:	0b381349 	bleq	e051dc <startup-0x1f1fae24>
 4b4:	16080000 	strne	r0, [r8], -r0
 4b8:	3a0e0300 	bcc	3810c0 <startup-0x1fc7ef40>
 4bc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4c0:	0013490b 	andseq	r4, r3, fp, lsl #18
 4c4:	01130900 	tsteq	r3, r0, lsl #18
 4c8:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
 4cc:	0b3b0b3a 	bleq	ec31bc <startup-0x1f13ce44>
 4d0:	13010b39 	movwne	r0, #6969	; 0x1b39
 4d4:	0d0a0000 	stceq	0, cr0, [sl, #-0]
 4d8:	3a0e0300 	bcc	3810e0 <startup-0x1fc7ef20>
 4dc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4e0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 4e4:	0b00000b 	bleq	518 <startup-0x1ffffae8>
 4e8:	0b0b0024 	bleq	2c0580 <startup-0x1fd3fa80>
 4ec:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 4f0:	010c0000 	mrseq	r0, (UNDEF: 12)
 4f4:	01134901 	tsteq	r3, r1, lsl #18
 4f8:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 4fc:	13490021 	movtne	r0, #36897	; 0x9021
 500:	0000052f 	andeq	r0, r0, pc, lsr #10
 504:	0b000f0e 	bleq	4144 <startup-0x1fffbebc>
 508:	0013490b 	andseq	r4, r3, fp, lsl #18
 50c:	01130f00 	tsteq	r3, r0, lsl #30
 510:	0b0b0803 	bleq	2c2524 <startup-0x1fd3dadc>
 514:	0b3b0b3a 	bleq	ec3204 <startup-0x1f13cdfc>
 518:	13010b39 	movwne	r0, #6969	; 0x1b39
 51c:	15100000 	ldrne	r0, [r0, #-0]
 520:	01192701 	tsteq	r9, r1, lsl #14
 524:	11000013 	tstne	r0, r3, lsl r0
 528:	13490005 	movtne	r0, #36869	; 0x9005
 52c:	34120000 	ldrcc	r0, [r2], #-0
 530:	3a0e0300 	bcc	381138 <startup-0x1fc7eec8>
 534:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 538:	3f13490b 	svccc	0x0013490b
 53c:	00193c19 	andseq	r3, r9, r9, lsl ip
 540:	00341300 	eorseq	r1, r4, r0, lsl #6
 544:	0b3a0803 	bleq	e82558 <startup-0x1f17daa8>
 548:	0b390b3b 	bleq	e4323c <startup-0x1f1bcdc4>
 54c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 550:	0000193c 	andeq	r1, r0, ip, lsr r9
 554:	3f012e14 	svccc	0x00012e14
 558:	3a0e0319 	bcc	3811c4 <startup-0x1fc7ee3c>
 55c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 560:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 564:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 568:	97184006 	ldrls	r4, [r8, -r6]
 56c:	13011942 	movwne	r1, #6466	; 0x1942
 570:	05150000 	ldreq	r0, [r5, #-0]
 574:	3a080300 	bcc	20117c <startup-0x1fdfee84>
 578:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 57c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 580:	16000018 			; <UNDEFINED> instruction: 0x16000018
 584:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 588:	0b3b0b3a 	bleq	ec3278 <startup-0x1f13cd88>
 58c:	13490b39 	movtne	r0, #39737	; 0x9b39
 590:	00001802 	andeq	r1, r0, r2, lsl #16
 594:	3f012e17 	svccc	0x00012e17
 598:	3a0e0319 	bcc	381204 <startup-0x1fc7edfc>
 59c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 5a0:	1119270b 	tstne	r9, fp, lsl #14
 5a4:	40061201 	andmi	r1, r6, r1, lsl #4
 5a8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 5ac:	00001301 	andeq	r1, r0, r1, lsl #6
 5b0:	03000518 	movweq	r0, #1304	; 0x518
 5b4:	3b0b3a0e 	blcc	2cedf4 <startup-0x1fd3120c>
 5b8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 5bc:	00180213 	andseq	r0, r8, r3, lsl r2
 5c0:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
 5c4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 5c8:	0b3b0b3a 	bleq	ec32b8 <startup-0x1f13cd48>
 5cc:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 5d0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 5d4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 5d8:	00130119 	andseq	r0, r3, r9, lsl r1
 5dc:	010b1a00 	tsteq	fp, r0, lsl #20
 5e0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 5e4:	00001301 	andeq	r1, r0, r1, lsl #6
 5e8:	0300341b 	movweq	r3, #1051	; 0x41b
 5ec:	3b0b3a08 	blcc	2cee14 <startup-0x1fd311ec>
 5f0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 5f4:	00180213 	andseq	r0, r8, r3, lsl r2
 5f8:	010b1c00 	tsteq	fp, r0, lsl #24
 5fc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 600:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
 604:	03193f00 	tsteq	r9, #0, 30
 608:	3b0b3a0e 	blcc	2cee48 <startup-0x1fd311b8>
 60c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 610:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 614:	97184006 	ldrls	r4, [r8, -r6]
 618:	00001942 	andeq	r1, r0, r2, asr #18
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000014 	andeq	r0, r0, r4, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
	...
  18:	0000001c 	andeq	r0, r0, ip, lsl r0
  1c:	02fc0002 	rscseq	r0, ip, #2
  20:	00040000 	andeq	r0, r4, r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000110 	andeq	r0, r0, r0, lsl r1
	...
  38:	00000014 	andeq	r0, r0, r4, lsl r0
  3c:	03eb0002 	mvneq	r0, #2
  40:	00040000 	andeq	r0, r4, r0
	...
  50:	00000024 	andeq	r0, r0, r4, lsr #32
  54:	04100002 	ldreq	r0, [r0], #-2
  58:	00040000 	andeq	r0, r4, r0
  5c:	00000000 	andeq	r0, r0, r0
  60:	20000120 	andcs	r0, r0, r0, lsr #2
  64:	000000d8 	ldrdeq	r0, [r0], -r8
  68:	20000000 	andcs	r0, r0, r0
  6c:	0000000c 	andeq	r0, r0, ip
	...
  78:	0000001c 	andeq	r0, r0, ip, lsl r0
  7c:	06ee0002 	strbteq	r0, [lr], r2
  80:	00040000 	andeq	r0, r4, r0
  84:	00000000 	andeq	r0, r0, r0
  88:	200001f8 	strdcs	r0, [r0], -r8
  8c:	0000039a 	muleq	r0, sl, r3
	...
  98:	0000001c 	andeq	r0, r0, ip, lsl r0
  9c:	09470002 	stmdbeq	r7, {r1}^
  a0:	00040000 	andeq	r0, r4, r0
  a4:	00000000 	andeq	r0, r0, r0
  a8:	20000594 	mulcs	r0, r4, r5
  ac:	00000474 	andeq	r0, r0, r4, ror r4
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000003f 	andeq	r0, r0, pc, lsr r0
   4:	00390003 	eorseq	r0, r9, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	5a010000 	bpl	40020 <startup-0x1ffbffe0>
  1c:	70532f3a 	subsvc	r2, r3, sl, lsr pc
  20:	2f326c65 	svccs	0x00326c65
  24:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
  28:	72670000 	rsbvc	r0, r7, #0
  2c:	6b696661 	blvs	1a599b8 <startup-0x1e5a6648>
  30:	0100682e 	tsteq	r0, lr, lsr #16
  34:	72670000 	rsbvc	r0, r7, #0
  38:	6b696661 	blvs	1a599c4 <startup-0x1e5a663c>
  3c:	0100632e 	tsteq	r0, lr, lsr #6
  40:	fc000000 	stc2	0, cr0, [r0], {-0}
  44:	03000000 	movweq	r0, #0
  48:	00003400 	andeq	r3, r0, r0, lsl #8
  4c:	fb010200 	blx	40856 <startup-0x1ffbf7aa>
  50:	01000d0e 	tsteq	r0, lr, lsl #26
  54:	00010101 	andeq	r0, r1, r1, lsl #2
  58:	00010000 	andeq	r0, r1, r0
  5c:	3a5a0100 	bcc	1680464 <startup-0x1e97fb9c>
  60:	6570532f 	ldrbvs	r5, [r0, #-815]!	; 0xfffffcd1
  64:	532f326c 			; <UNDEFINED> instruction: 0x532f326c
  68:	006c6570 	rsbeq	r6, ip, r0, ror r5
  6c:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
  70:	5f646170 	svcpl	0x00646170
  74:	76697264 	strbtvc	r7, [r9], -r4, ror #4
  78:	632e7265 			; <UNDEFINED> instruction: 0x632e7265
  7c:	00000100 	andeq	r0, r0, r0, lsl #2
  80:	00260500 	eoreq	r0, r6, r0, lsl #10
  84:	00100205 	andseq	r0, r0, r5, lsl #4
  88:	05172000 	ldreq	r2, [r7, #-0]
  8c:	1b05cc0a 	blne	1730bc <startup-0x1fe8cf44>
  90:	2e020520 	cfsh32cs	mvfx0, mvfx2, #16
  94:	05210a05 	streq	r0, [r1, #-2565]!	; 0xfffff5fb
  98:	0205201b 	andeq	r2, r5, #27
  9c:	210a052e 	tstcs	sl, lr, lsr #10
  a0:	05201b05 	streq	r1, [r0, #-2821]!	; 0xfffff4fb
  a4:	0a052e02 	beq	14b8b4 <startup-0x1feb474c>
  a8:	201b0521 	andscs	r0, fp, r1, lsr #10
  ac:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
  b0:	1b05220a 	blne	1488e0 <startup-0x1feb7720>
  b4:	2e020520 	cfsh32cs	mvfx0, mvfx2, #16
  b8:	93220105 			; <UNDEFINED> instruction: 0x93220105
  bc:	053e0505 	ldreq	r0, [lr, #-1285]!	; 0xfffffafb
  c0:	08052003 	stmdaeq	r5, {r0, r1, sp}
  c4:	4a04053d 	bmi	1015c0 <startup-0x1fefea40>
  c8:	02001705 	andeq	r1, r0, #1310720	; 0x140000
  cc:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
  d0:	04052f08 	streq	r2, [r5], #-3848	; 0xfffff0f8
  d4:	0017054a 	andseq	r0, r7, sl, asr #10
  d8:	20010402 	andcs	r0, r1, r2, lsl #8
  dc:	052f0805 	streq	r0, [pc, #-2053]!	; fffff8df <keyb_state+0xdfff90f7>
  e0:	17054a04 	strne	r4, [r5, -r4, lsl #20]
  e4:	01040200 	mrseq	r0, R12_usr
  e8:	2f080520 	svccs	0x00080520
  ec:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
  f0:	04020017 	streq	r0, [r2], #-23	; 0xffffffe9
  f4:	08052001 	stmdaeq	r5, {r0, sp}
  f8:	2101052f 	tstcs	r1, pc, lsr #10
  fc:	25031a05 	strcs	r1, [r3, #-2565]	; 0xfffff5fb
 100:	3e0f0566 	cfsh32cc	mvfx0, mvfx15, #54
 104:	05680805 	strbeq	r0, [r8, #-2053]!	; 0xfffff7fb
 108:	05212e01 	streq	r2, [r1, #-3585]!	; 0xfffff1ff
 10c:	07054b10 	smladeq	r5, r0, fp, r4
 110:	3d09054a 	cfstr32cc	mvfx0, [r9, #-296]	; 0xfffffed8
 114:	053d1b05 	ldreq	r1, [sp, #-2821]!	; 0xfffff4fb
 118:	23052e16 	movwcs	r2, #24086	; 0x5e16
 11c:	2e1e0520 	cfmul64cs	mvdx0, mvdx14, mvdx0
 120:	05201405 	streq	r1, [r0, #-1029]!	; 0xfffffbfb
 124:	04020019 	streq	r0, [r2], #-25	; 0xffffffe7
 128:	01053802 	tsteq	r5, r2, lsl #16
 12c:	01040200 	mrseq	r0, R12_usr
 130:	4305053c 	movwmi	r0, #21820	; 0x553c
 134:	053d0805 	ldreq	r0, [sp, #-2053]!	; 0xfffff7fb
 138:	04020001 	streq	r0, [r2], #-1
 13c:	07022101 	streq	r2, [r2, -r1, lsl #2]
 140:	19010100 	stmdbne	r1, {r8}
 144:	03000000 	movweq	r0, #0
 148:	00001300 	andeq	r1, r0, r0, lsl #6
 14c:	fb010200 	blx	40956 <startup-0x1ffbf6aa>
 150:	01000d0e 	tsteq	r0, lr, lsl #26
 154:	00010101 	andeq	r0, r1, r1, lsl #2
 158:	00010000 	andeq	r0, r1, r0
 15c:	00000100 	andeq	r0, r0, r0, lsl #2
 160:	000000d9 	ldrdeq	r0, [r0], -r9
 164:	00600003 	rsbeq	r0, r0, r3
 168:	01020000 	mrseq	r0, (UNDEF: 2)
 16c:	000d0efb 	strdeq	r0, [sp], -fp
 170:	01010101 	tsteq	r1, r1, lsl #2
 174:	01000000 	mrseq	r0, (UNDEF: 0)
 178:	5a010000 	bpl	40180 <startup-0x1ffbfe80>
 17c:	70532f3a 	subsvc	r2, r3, sl, lsr pc
 180:	2f326c65 	svccs	0x00326c65
 184:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
 188:	74730000 	ldrbtvc	r0, [r3], #-0
 18c:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 190:	00632e70 	rsbeq	r2, r3, r0, ror lr
 194:	67000001 	strvs	r0, [r0, -r1]
 198:	69666172 	stmdbvs	r6!, {r1, r4, r5, r6, r8, sp, lr}^
 19c:	00682e6b 	rsbeq	r2, r8, fp, ror #28
 1a0:	6b000001 	blvs	1ac <startup-0x1ffffe54>
 1a4:	61707965 	cmnvs	r0, r5, ror #18
 1a8:	72645f64 	rsbvc	r5, r4, #100, 30	; 0x190
 1ac:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 1b0:	0100682e 	tsteq	r0, lr, lsr #16
 1b4:	65640000 	strbvs	r0, [r4, #-0]!
 1b8:	656e6966 	strbvs	r6, [lr, #-2406]!	; 0xfffff69a
 1bc:	6f6c675f 	svcvs	0x006c675f
 1c0:	2e6c6162 	powcsez	f6, f4, f2
 1c4:	00010068 	andeq	r0, r1, r8, rrx
 1c8:	01050000 	mrseq	r0, (UNDEF: 5)
 1cc:	00020500 	andeq	r0, r2, r0, lsl #10
 1d0:	18200000 	stmdane	r0!, {}	; <UNPREDICTABLE>
 1d4:	2f212113 	svccs	0x00212113
 1d8:	00030221 	andeq	r0, r3, r1, lsr #4
 1dc:	15050101 	strne	r0, [r5, #-257]	; 0xfffffeff
 1e0:	20020500 	andcs	r0, r2, r0, lsl #10
 1e4:	03200001 			; <UNDEFINED> instruction: 0x03200001
 1e8:	1005011c 	andne	r0, r5, ip, lsl r1
 1ec:	1105592f 	tstne	r5, pc, lsr #18
 1f0:	592a0567 	stmdbpl	sl!, {r0, r1, r2, r5, r6, r8, sl}
 1f4:	7501053d 	strvc	r0, [r1, #-1341]	; 0xfffffac3
 1f8:	3d0205bd 	cfstr32cc	mvfx0, [r2, #-756]	; 0xfffffd0c
 1fc:	2f2f0a05 	svccs	0x002f0a05
 200:	3002052f 	andcc	r0, r2, pc, lsr #10
 204:	3206052f 	andcc	r0, r6, #197132288	; 0xbc00000
 208:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 20c:	05053d06 	streq	r3, [r5, #-3334]	; 0xfffff2fa
 210:	3d06052e 	cfstr32cc	mvfx0, [r6, #-184]	; 0xffffff48
 214:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 218:	05593e09 	ldrbeq	r3, [r9, #-3593]	; 0xfffff1f7
 21c:	1a056a11 	bne	15aa68 <startup-0x1fea5598>
 220:	3c23051e 	cfstr32cc	mvfx0, [r3], #-120	; 0xffffff88
 224:	052e2205 	streq	r2, [lr, #-517]!	; 0xfffffdfb
 228:	23055804 	movwcs	r5, #22532	; 0x5804
 22c:	3c0d0521 	cfstr32cc	mvfx0, [sp], {33}	; 0x21
 230:	05230305 	streq	r0, [r3, #-773]!	; 0xfffffcfb
 234:	3c750305 	ldclcc	3, cr0, [r5], #-20	; 0xffffffec
 238:	01000802 	tsteq	r0, r2, lsl #16
 23c:	00022f01 	andeq	r2, r2, r1, lsl #30
 240:	34000300 	strcc	r0, [r0], #-768	; 0xfffffd00
 244:	02000000 	andeq	r0, r0, #0
 248:	0d0efb01 	vstreq	d15, [lr, #-4]
 24c:	01010100 	mrseq	r0, (UNDEF: 17)
 250:	00000001 	andeq	r0, r0, r1
 254:	01000001 	tsteq	r0, r1
 258:	532f3a5a 			; <UNDEFINED> instruction: 0x532f3a5a
 25c:	326c6570 	rsbcc	r6, ip, #112, 10	; 0x1c000000
 260:	6570532f 	ldrbvs	r5, [r0, #-815]!	; 0xfffffcd1
 264:	6100006c 	tstvs	r0, ip, rrx
 268:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 26c:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
 270:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 274:	0100632e 	tsteq	r0, lr, lsr #6
 278:	05000000 	streq	r0, [r0, #-0]
 27c:	0205001a 	andeq	r0, r5, #26
 280:	200001f8 	strdcs	r0, [r0], -r8
 284:	30050519 	andcc	r0, r5, r9, lsl r5
 288:	05200f05 	streq	r0, [r0, #-3845]!	; 0xfffff0fb
 28c:	0f052f05 	svceq	0x00052f05
 290:	2f050520 	svccs	0x00050520
 294:	05200e05 	streq	r0, [r0, #-3589]!	; 0xfffff1fb
 298:	0f052f05 	svceq	0x00052f05
 29c:	300a0520 	andcc	r0, sl, r0, lsr #10
 2a0:	02000d05 	andeq	r0, r0, #320	; 0x140
 2a4:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 2a8:	04020017 	streq	r0, [r2], #-23	; 0xffffffe9
 2ac:	0a052e01 	beq	14bab8 <startup-0x1feb4548>
 2b0:	01040200 	mrseq	r0, R12_usr
 2b4:	2105053c 	tstcs	r5, ip, lsr r5
 2b8:	05200f05 	streq	r0, [r0, #-3845]!	; 0xfffff0fb
 2bc:	23052f01 	movwcs	r2, #24321	; 0x5f01
 2c0:	4c0905a0 	cfstr32mi	mvfx0, [r9], {160}	; 0xa0
 2c4:	05830805 	streq	r0, [r3, #2053]	; 0x805
 2c8:	06053f0a 	streq	r3, [r5], -sl, lsl #30
 2cc:	2f2f2f21 	svccs	0x002f2f21
 2d0:	052f0805 	streq	r0, [pc, #-2053]!	; fffffad3 <keyb_state+0xdfff92eb>
 2d4:	0105370a 	tsteq	r5, sl, lsl #14
 2d8:	5a230543 	bpl	8c17ec <startup-0x1f73e814>
 2dc:	054c0905 	strbeq	r0, [ip, #-2309]	; 0xfffff6fb
 2e0:	0a058308 	beq	160f08 <startup-0x1fe9f0f8>
 2e4:	210f053f 	tstcs	pc, pc, lsr r5	; <UNPREDICTABLE>
 2e8:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
 2ec:	04020007 	streq	r0, [r2], #-7
 2f0:	02002103 	andeq	r2, r0, #-1073741824	; 0xc0000000
 2f4:	002f0304 	eoreq	r0, pc, r4, lsl #6
 2f8:	2f030402 	svccs	0x00030402
 2fc:	03040200 	movweq	r0, #16896	; 0x4200
 300:	0024052f 	eoreq	r0, r4, pc, lsr #10
 304:	2a030402 	bcs	c1314 <startup-0x1ff3ecec>
 308:	02000605 	andeq	r0, r0, #5242880	; 0x500000
 30c:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 310:	0a055e08 	beq	157b38 <startup-0x1fea84c8>
 314:	053c7903 	ldreq	r7, [ip, #-2307]!	; 0xfffff6fd
 318:	3c090301 	stccc	3, cr0, [r9], {1}
 31c:	055a2a05 	ldrbeq	r2, [sl, #-2565]	; 0xfffff5fb
 320:	05056715 	streq	r6, [r5, #-1813]	; 0xfffff8eb
 324:	20150574 	andscs	r0, r5, r4, ror r5
 328:	054b0105 	strbeq	r0, [fp, #-261]	; 0xfffffefb
 32c:	2305762c 	movwcs	r7, #22060	; 0x562c
 330:	4a330567 	bmi	cc18d4 <startup-0x1f33e72c>
 334:	05742005 	ldrbeq	r2, [r4, #-5]!
 338:	20053c05 	andcs	r3, r5, r5, lsl #24
 33c:	20150520 	andscs	r0, r5, r0, lsr #10
 340:	05210105 	streq	r0, [r1, #-261]!	; 0xfffffefb
 344:	05057631 	streq	r7, [r5, #-1585]	; 0xfffff9cf
 348:	16053d67 	strne	r3, [r5], -r7, ror #26
 34c:	3d050520 	cfstr32cc	mvfx0, [r5, #-128]	; 0xffffff80
 350:	3d01052f 	cfstr32cc	mvfx0, [r1, #-188]	; 0xffffff44
 354:	05682b05 	strbeq	r2, [r8, #-2821]!	; 0xfffff4fb
 358:	2f3d3d05 	svccs	0x003d3d05
 35c:	052f1805 	streq	r1, [pc, #-2053]!	; fffffb5f <keyb_state+0xdfff9377>
 360:	05052013 	streq	r2, [r5, #-19]	; 0xffffffed
 364:	3d0c053d 	cfstr32cc	mvfx0, [ip, #-244]	; 0xffffff0c
 368:	052f0105 	streq	r0, [pc, #-261]!	; 26b <startup-0x1ffffd95>
 36c:	05057627 	streq	r7, [r5, #-1575]	; 0xfffff9d9
 370:	2013053d 	andscs	r0, r3, sp, lsr r5
 374:	3d2f0505 	cfstr32cc	mvfx0, [pc, #-20]!	; 368 <startup-0x1ffffc98>
 378:	053d1805 	ldreq	r1, [sp, #-2053]!	; 0xfffff7fb
 37c:	13055905 	movwne	r5, #22789	; 0x5905
 380:	2f0c0520 	svccs	0x000c0520
 384:	052f0105 	streq	r0, [pc, #-261]!	; 287 <startup-0x1ffffd79>
 388:	0505a025 	streq	sl, [r5, #-37]	; 0xffffffdb
 38c:	2013053d 	andscs	r0, r3, sp, lsr r5
 390:	3d2f0505 	cfstr32cc	mvfx0, [pc, #-20]!	; 384 <startup-0x1ffffc7c>
 394:	053d1805 	ldreq	r1, [sp, #-2053]!	; 0xfffff7fb
 398:	13055905 	movwne	r5, #22789	; 0x5905
 39c:	2f0c0520 	svccs	0x000c0520
 3a0:	052f0105 	streq	r0, [pc, #-261]!	; 2a3 <startup-0x1ffffd5d>
 3a4:	0505a02d 	streq	sl, [r5, #-45]	; 0xffffffd3
 3a8:	053d3d67 	ldreq	r3, [sp, #-3431]!	; 0xfffff299
 3ac:	2b055901 	blcs	1567b8 <startup-0x1fea9848>
 3b0:	6705054c 	strvs	r0, [r5, -ip, asr #10]
 3b4:	01053d3d 	tsteq	r5, sp, lsr sp
 3b8:	4c170559 	cfldr32mi	mvfx0, [r7], {89}	; 0x59
 3bc:	052f0a05 	streq	r0, [pc, #-2565]!	; fffff9bf <keyb_state+0xdfff91d7>
 3c0:	0402000e 	streq	r0, [r2], #-14
 3c4:	22052001 	andcs	r2, r5, #1
 3c8:	01040200 	mrseq	r0, R12_usr
 3cc:	000a053c 	andeq	r0, sl, ip, lsr r5
 3d0:	3c010402 	cfstrscc	mvf0, [r1], {2}
 3d4:	3d2f0505 	cfstr32cc	mvfx0, [pc, #-20]!	; 3c8 <startup-0x1ffffc38>
 3d8:	3e0a053d 	mcrcc	5, 0, r0, cr10, cr13, {1}
 3dc:	02000e05 	andeq	r0, r0, #5, 28	; 0x50
 3e0:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 3e4:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
 3e8:	0a053c01 	beq	14f3f4 <startup-0x1feb0c0c>
 3ec:	01040200 	mrseq	r0, R12_usr
 3f0:	2f05053c 	svccs	0x0005053c
 3f4:	0a053d3d 	beq	14f8f0 <startup-0x1feb0710>
 3f8:	000e053e 	andeq	r0, lr, lr, lsr r5
 3fc:	20010402 	andcs	r0, r1, r2, lsl #8
 400:	02002205 	andeq	r2, r0, #1342177280	; 0x50000000
 404:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 408:	0402000a 	streq	r0, [r2], #-10
 40c:	05053c01 	streq	r3, [r5, #-3073]	; 0xfffff3ff
 410:	053d3d2f 	ldreq	r3, [sp, #-3375]!	; 0xfffff2d1
 414:	0e053e0a 	cdpeq	14, 0, cr3, cr5, cr10, {0}
 418:	01040200 	mrseq	r0, R12_usr
 41c:	00220520 	eoreq	r0, r2, r0, lsr #10
 420:	3c010402 	cfstrscc	mvf0, [r1], {2}
 424:	02000a05 	andeq	r0, r0, #20480	; 0x5000
 428:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 42c:	3d3d2f05 	ldccc	15, cr2, [sp, #-20]!	; 0xffffffec
 430:	053e0105 	ldreq	r0, [lr, #-261]!	; 0xfffffefb
 434:	0a053e28 	beq	14fcdc <startup-0x1feb0324>
 438:	000e0568 	andeq	r0, lr, r8, ror #10
 43c:	20010402 	andcs	r0, r1, r2, lsl #8
 440:	02002205 	andeq	r2, r0, #1342177280	; 0x50000000
 444:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 448:	0402000a 	streq	r0, [r2], #-10
 44c:	05053c01 	streq	r3, [r5, #-3073]	; 0xfffff3ff
 450:	05593d2f 	ldrbeq	r3, [r9, #-3375]	; 0xfffff2d1
 454:	21053d01 	tstcs	r5, r1, lsl #26
 458:	5b09054c 	blpl	241990 <startup-0x1fdbe670>
 45c:	053e0805 	ldreq	r0, [lr, #-2053]!	; 0xfffff7fb
 460:	1b053d0d 	blne	14f89c <startup-0x1feb0764>
 464:	6605053e 			; <UNDEFINED> instruction: 0x6605053e
 468:	024b0105 	subeq	r0, fp, #1073741825	; 0x40000001
 46c:	01010004 	tsteq	r1, r4
 470:	00000452 	andeq	r0, r0, r2, asr r4
 474:	00540003 	subseq	r0, r4, r3
 478:	01020000 	mrseq	r0, (UNDEF: 2)
 47c:	000d0efb 	strdeq	r0, [sp], -fp
 480:	01010101 	tsteq	r1, r1, lsl #2
 484:	01000000 	mrseq	r0, (UNDEF: 0)
 488:	5a010000 	bpl	40490 <startup-0x1ffbfb70>
 48c:	70532f3a 	subsvc	r2, r3, sl, lsr pc
 490:	2f326c65 	svccs	0x00326c65
 494:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
 498:	72670000 	rsbvc	r0, r7, #0
 49c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 4a0:	72645f63 	rsbvc	r5, r4, #396	; 0x18c
 4a4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 4a8:	0100632e 	tsteq	r0, lr, lsr #6
 4ac:	72670000 	rsbvc	r0, r7, #0
 4b0:	6b696661 	blvs	1a59e3c <startup-0x1e5a61c4>
 4b4:	0100682e 	tsteq	r0, lr, lsr #16
 4b8:	65640000 	strbvs	r0, [r4, #-0]!
 4bc:	656e6966 	strbvs	r6, [lr, #-2406]!	; 0xfffff69a
 4c0:	6f6c675f 	svcvs	0x006c675f
 4c4:	2e6c6162 	powcsez	f6, f4, f2
 4c8:	00010068 	andeq	r0, r1, r8, rrx
 4cc:	01050000 	mrseq	r0, (UNDEF: 5)
 4d0:	94020500 	strls	r0, [r2], #-1280	; 0xfffffb00
 4d4:	18200005 	stmdane	r0!, {r0, r2}
 4d8:	23211321 			; <UNDEFINED> instruction: 0x23211321
 4dc:	23211321 			; <UNDEFINED> instruction: 0x23211321
 4e0:	23211321 			; <UNDEFINED> instruction: 0x23211321
 4e4:	05211321 	streq	r1, [r1, #-801]!	; 0xfffffcdf
 4e8:	0705231d 	smladeq	r5, sp, r3, r2
 4ec:	2e05054b 	cfsh32cs	mvfx0, mvfx5, #43
 4f0:	052f0d05 	streq	r0, [pc, #-3333]!	; fffff7f3 <keyb_state+0xdfff900b>
 4f4:	18052e03 	stmdane	r5, {r0, r1, r9, sl, fp, sp}
 4f8:	03040200 	movweq	r0, #16896	; 0x4200
 4fc:	002a0521 	eoreq	r0, sl, r1, lsr #10
 500:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 504:	02003005 	andeq	r3, r0, #5
 508:	05740304 	ldrbeq	r0, [r4, #-772]!	; 0xfffffcfc
 50c:	04020003 	streq	r0, [r2], #-3
 510:	3b052e03 	blcc	14bd24 <startup-0x1feb42dc>
 514:	03040200 	movweq	r0, #16896	; 0x4200
 518:	004d0520 	subeq	r0, sp, r0, lsr #10
 51c:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 520:	02005305 	andeq	r5, r0, #335544320	; 0x14000000
 524:	05740304 	ldrbeq	r0, [r4, #-772]!	; 0xfffffcfc
 528:	04020003 	streq	r0, [r2], #-3
 52c:	35052e03 	strcc	r2, [r5, #-3587]	; 0xfffff1fd
 530:	03040200 	movweq	r0, #16896	; 0x4200
 534:	00190549 	andseq	r0, r9, r9, asr #10
 538:	3c010402 	cfstrscc	mvf0, [r1], {2}
 53c:	02002405 	andeq	r2, r0, #83886080	; 0x5000000
 540:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 544:	04020003 	streq	r0, [r2], #-3
 548:	01052001 	tsteq	r5, r1
 54c:	053c1303 	ldreq	r1, [ip, #-771]!	; 0xfffffcfd
 550:	2071030c 	rsbscs	r0, r1, ip, lsl #6
 554:	052e0a05 	streq	r0, [lr, #-2565]!	; 0xfffff5fb
 558:	03052f0d 	movweq	r2, #24333	; 0x5f0d
 55c:	0018052e 	andseq	r0, r8, lr, lsr #10
 560:	21030402 	tstcs	r3, r2, lsl #8
 564:	02002805 	andeq	r2, r0, #327680	; 0x50000
 568:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 56c:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
 570:	03057403 	movweq	r7, #21507	; 0x5403
 574:	03040200 	movweq	r0, #16896	; 0x4200
 578:	0039052e 	eorseq	r0, r9, lr, lsr #10
 57c:	20030402 	andcs	r0, r3, r2, lsl #8
 580:	02004905 	andeq	r4, r0, #81920	; 0x14000
 584:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 588:	0402004f 	streq	r0, [r2], #-79	; 0xffffffb1
 58c:	03057403 	movweq	r7, #21507	; 0x5403
 590:	03040200 	movweq	r0, #16896	; 0x4200
 594:	0033052e 	eorseq	r0, r3, lr, lsr #10
 598:	49030402 	stmdbmi	r3, {r1, sl}
 59c:	02001905 	andeq	r1, r0, #81920	; 0x14000
 5a0:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 5a4:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
 5a8:	03052e01 	movweq	r2, #24065	; 0x5e01
 5ac:	01040200 	mrseq	r0, R12_usr
 5b0:	03010520 	movweq	r0, #5408	; 0x1520
 5b4:	0c053c0e 	stceq	12, cr3, [r5], {14}
 5b8:	05207603 	streq	r7, [r0, #-1539]!	; 0xfffff9fd
 5bc:	0d052e0a 	stceq	14, cr2, [r5, #-40]	; 0xffffffd8
 5c0:	2e03052f 	cfsh32cs	mvfx0, mvfx3, #31
 5c4:	02001805 	andeq	r1, r0, #327680	; 0x50000
 5c8:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 5cc:	04020029 	streq	r0, [r2], #-41	; 0xffffffd7
 5d0:	2f052e03 	svccs	0x00052e03
 5d4:	03040200 	movweq	r0, #16896	; 0x4200
 5d8:	00030574 	andeq	r0, r3, r4, ror r5
 5dc:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 5e0:	02003a05 	andeq	r3, r0, #20480	; 0x5000
 5e4:	05200304 	streq	r0, [r0, #-772]!	; 0xfffffcfc
 5e8:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 5ec:	51052e03 	tstpl	r5, r3, lsl #28
 5f0:	03040200 	movweq	r0, #16896	; 0x4200
 5f4:	00030574 	andeq	r0, r3, r4, ror r5
 5f8:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 5fc:	02003405 	andeq	r3, r0, #83886080	; 0x5000000
 600:	05490304 	strbeq	r0, [r9, #-772]	; 0xfffffcfc
 604:	04020019 	streq	r0, [r2], #-25	; 0xffffffe7
 608:	23053c01 	movwcs	r3, #23553	; 0x5c01
 60c:	01040200 	mrseq	r0, R12_usr
 610:	0003052e 	andeq	r0, r3, lr, lsr #10
 614:	20010402 	andcs	r0, r1, r2, lsl #8
 618:	09030105 	stmdbeq	r3, {r0, r2, r8}
 61c:	1b0c053c 	blne	301b14 <startup-0x1fcfe4ec>
 620:	052e0a05 	streq	r0, [lr, #-2565]!	; 0xfffff5fb
 624:	03052f0d 	movweq	r2, #24333	; 0x5f0d
 628:	0018052e 	andseq	r0, r8, lr, lsr #10
 62c:	21030402 	tstcs	r3, r2, lsl #8
 630:	02002905 	andeq	r2, r0, #81920	; 0x14000
 634:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 638:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 63c:	03057403 	movweq	r7, #21507	; 0x5403
 640:	03040200 	movweq	r0, #16896	; 0x4200
 644:	003a052e 	eorseq	r0, sl, lr, lsr #10
 648:	20030402 	andcs	r0, r3, r2, lsl #8
 64c:	02004b05 	andeq	r4, r0, #5120	; 0x1400
 650:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 654:	04020051 	streq	r0, [r2], #-81	; 0xffffffaf
 658:	03057403 	movweq	r7, #21507	; 0x5403
 65c:	03040200 	movweq	r0, #16896	; 0x4200
 660:	0034052e 	eorseq	r0, r4, lr, lsr #10
 664:	49030402 	stmdbmi	r3, {r1, sl}
 668:	02001905 	andeq	r1, r0, #81920	; 0x14000
 66c:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 670:	04020023 	streq	r0, [r2], #-35	; 0xffffffdd
 674:	03052e01 	movweq	r2, #24065	; 0x5e01
 678:	01040200 	mrseq	r0, R12_usr
 67c:	40010520 	andmi	r0, r1, r0, lsr #10
 680:	054c1e05 	strbeq	r1, [ip, #-3589]	; 0xfffff1fb
 684:	05054b07 	streq	r4, [r5, #-2823]	; 0xfffff4f9
 688:	2f0d052e 	svccs	0x000d052e
 68c:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
 690:	0402001a 	streq	r0, [r2], #-26	; 0xffffffe6
 694:	2c052103 	stfcss	f2, [r5], {3}
 698:	03040200 	movweq	r0, #16896	; 0x4200
 69c:	0032052e 	eorseq	r0, r2, lr, lsr #10
 6a0:	74030402 	strvc	r0, [r3], #-1026	; 0xfffffbfe
 6a4:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 6a8:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 6ac:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 6b0:	4f052003 	svcmi	0x00052003
 6b4:	03040200 	movweq	r0, #16896	; 0x4200
 6b8:	0055052e 	subseq	r0, r5, lr, lsr #10
 6bc:	74030402 	strvc	r0, [r3], #-1026	; 0xfffffbfe
 6c0:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 6c4:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 6c8:	04020035 	streq	r0, [r2], #-53	; 0xffffffcb
 6cc:	19054903 	stmdbne	r5, {r0, r1, r8, fp, lr}
 6d0:	01040200 	mrseq	r0, R12_usr
 6d4:	0024053c 	eoreq	r0, r4, ip, lsr r5
 6d8:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 6dc:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 6e0:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 6e4:	3c130301 	ldccc	3, cr0, [r3], {1}
 6e8:	71030c05 	tstvc	r3, r5, lsl #24
 6ec:	2e0a0520 	cfsh32cs	mvfx0, mvfx10, #16
 6f0:	052f0d05 	streq	r0, [pc, #-3333]!	; fffff9f3 <keyb_state+0xdfff920b>
 6f4:	1a052e03 	bne	14bf08 <startup-0x1feb40f8>
 6f8:	03040200 	movweq	r0, #16896	; 0x4200
 6fc:	002a0521 	eoreq	r0, sl, r1, lsr #10
 700:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 704:	02003005 	andeq	r3, r0, #5
 708:	05740304 	ldrbeq	r0, [r4, #-772]!	; 0xfffffcfc
 70c:	04020003 	streq	r0, [r2], #-3
 710:	3b052e03 	blcc	14bf24 <startup-0x1feb40dc>
 714:	03040200 	movweq	r0, #16896	; 0x4200
 718:	004b0520 	subeq	r0, fp, r0, lsr #10
 71c:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 720:	02005105 	andeq	r5, r0, #1073741825	; 0x40000001
 724:	05740304 	ldrbeq	r0, [r4, #-772]!	; 0xfffffcfc
 728:	04020003 	streq	r0, [r2], #-3
 72c:	33052e03 	movwcc	r2, #24067	; 0x5e03
 730:	03040200 	movweq	r0, #16896	; 0x4200
 734:	00190549 	andseq	r0, r9, r9, asr #10
 738:	3c010402 	cfstrscc	mvf0, [r1], {2}
 73c:	02002205 	andeq	r2, r0, #1342177280	; 0x50000000
 740:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 744:	04020003 	streq	r0, [r2], #-3
 748:	01052001 	tsteq	r5, r1
 74c:	053c0e03 	ldreq	r0, [ip, #-3587]!	; 0xfffff1fd
 750:	2076030c 	rsbscs	r0, r6, ip, lsl #6
 754:	052e0a05 	streq	r0, [lr, #-2565]!	; 0xfffff5fb
 758:	03052f0d 	movweq	r2, #24333	; 0x5f0d
 75c:	001a052e 	andseq	r0, sl, lr, lsr #10
 760:	21030402 	tstcs	r3, r2, lsl #8
 764:	02002b05 	andeq	r2, r0, #5120	; 0x1400
 768:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 76c:	04020031 	streq	r0, [r2], #-49	; 0xffffffcf
 770:	03057403 	movweq	r7, #21507	; 0x5403
 774:	03040200 	movweq	r0, #16896	; 0x4200
 778:	003c052e 	eorseq	r0, ip, lr, lsr #10
 77c:	20030402 	andcs	r0, r3, r2, lsl #8
 780:	02004d05 	andeq	r4, r0, #320	; 0x140
 784:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 788:	04020053 	streq	r0, [r2], #-83	; 0xffffffad
 78c:	03057403 	movweq	r7, #21507	; 0x5403
 790:	03040200 	movweq	r0, #16896	; 0x4200
 794:	0034052e 	eorseq	r0, r4, lr, lsr #10
 798:	49030402 	stmdbmi	r3, {r1, sl}
 79c:	02001905 	andeq	r1, r0, #81920	; 0x14000
 7a0:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 7a4:	04020023 	streq	r0, [r2], #-35	; 0xffffffdd
 7a8:	03052e01 	movweq	r2, #24065	; 0x5e01
 7ac:	01040200 	mrseq	r0, R12_usr
 7b0:	03010520 	movweq	r0, #5408	; 0x1520
 7b4:	0c053c09 	stceq	12, cr3, [r5], {9}
 7b8:	2e0a051b 	mcrcs	5, 0, r0, cr10, cr11, {0}
 7bc:	052f0d05 	streq	r0, [pc, #-3333]!	; fffffabf <keyb_state+0xdfff92d7>
 7c0:	1a052e03 	bne	14bfd4 <startup-0x1feb402c>
 7c4:	03040200 	movweq	r0, #16896	; 0x4200
 7c8:	002b0521 	eoreq	r0, fp, r1, lsr #10
 7cc:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 7d0:	02003105 	andeq	r3, r0, #1073741825	; 0x40000001
 7d4:	05740304 	ldrbeq	r0, [r4, #-772]!	; 0xfffffcfc
 7d8:	04020003 	streq	r0, [r2], #-3
 7dc:	3c052e03 	stccc	14, cr2, [r5], {3}
 7e0:	03040200 	movweq	r0, #16896	; 0x4200
 7e4:	004d0520 	subeq	r0, sp, r0, lsr #10
 7e8:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 7ec:	02005305 	andeq	r5, r0, #335544320	; 0x14000000
 7f0:	05740304 	ldrbeq	r0, [r4, #-772]!	; 0xfffffcfc
 7f4:	04020003 	streq	r0, [r2], #-3
 7f8:	34052e03 	strcc	r2, [r5], #-3587	; 0xfffff1fd
 7fc:	03040200 	movweq	r0, #16896	; 0x4200
 800:	00190549 	andseq	r0, r9, r9, asr #10
 804:	3c010402 	cfstrscc	mvf0, [r1], {2}
 808:	02002305 	andeq	r2, r0, #335544320	; 0x14000000
 80c:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 810:	04020003 	streq	r0, [r2], #-3
 814:	01052001 	tsteq	r5, r1
 818:	4c200540 	cfstr32mi	mvfx0, [r0], #-256	; 0xffffff00
 81c:	4c4c0205 	sfmmi	f0, 2, [ip], {5}
 820:	01054c4b 	tsteq	r5, fp, asr #24
 824:	4c22054b 	cfstr32mi	mvfx0, [r2], #-300	; 0xfffffed4
 828:	054c0205 	strbeq	r0, [ip, #-517]	; 0xfffffdfb
 82c:	0e054b0f 	vmlaeq.f64	d4, d5, d15
 830:	2e18053d 	mrccs	5, 0, r0, cr8, cr13, {1}
 834:	052e1505 	streq	r1, [lr, #-1285]!	; 0xfffffafb
 838:	0205200a 	andeq	r2, r5, #10
 83c:	0f054b2f 	svceq	0x00054b2f
 840:	3d0e054b 	cfstr32cc	mvfx0, [lr, #-300]	; 0xfffffed4
 844:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
 848:	0a052e15 	beq	14c0a4 <startup-0x1feb3f5c>
 84c:	2f020520 	svccs	0x00020520
 850:	054b0105 	strbeq	r0, [fp, #-261]	; 0xfffffefb
 854:	02054c20 	andeq	r4, r5, #32, 24	; 0x2000
 858:	4b0e054c 	blmi	381d90 <startup-0x1fc7e270>
 85c:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
 860:	0a052e15 	beq	14c0bc <startup-0x1feb3f44>
 864:	2f020520 	svccs	0x00020520
 868:	054b0105 	strbeq	r0, [fp, #-261]	; 0xfffffefb
 86c:	02054c25 	andeq	r4, r5, #9472	; 0x2500
 870:	4b0f054b 	blmi	3c1da4 <startup-0x1fc3e25c>
 874:	053d0c05 	ldreq	r0, [sp, #-3077]!	; 0xfffff3fb
 878:	12052e14 	andne	r2, r5, #20, 28	; 0x140
 87c:	2009052e 	andcs	r0, r9, lr, lsr #10
 880:	05300a05 	ldreq	r0, [r0, #-2565]!	; 0xfffff5fb
 884:	01053e02 	tsteq	r5, r2, lsl #28
 888:	4c25054b 	cfstr32mi	mvfx0, [r5], #-300	; 0xfffffed4
 88c:	054b0205 	strbeq	r0, [fp, #-517]	; 0xfffffdfb
 890:	02054b0f 	andeq	r4, r5, #15360	; 0x3c00
 894:	4b01053d 	blmi	41d90 <startup-0x1ffbe270>
 898:	054c1905 	strbeq	r1, [ip, #-2309]	; 0xfffff6fb
 89c:	06054b08 	streq	r4, [r5], -r8, lsl #22
 8a0:	2f0a052e 	svccs	0x000a052e
 8a4:	22010531 	andcs	r0, r1, #205520896	; 0xc400000
 8a8:	6709054d 	strvs	r0, [r9, -sp, asr #10]
 8ac:	3d01053d 	cfstr32cc	mvfx0, [r1, #-244]	; 0xffffff0c
 8b0:	054c3305 	strbeq	r3, [ip, #-773]	; 0xfffffcfb
 8b4:	3d3d5907 			; <UNDEFINED> instruction: 0x3d3d5907
 8b8:	030a053d 	movweq	r0, #42301	; 0xa53d
 8bc:	01053c09 	tsteq	r5, r9, lsl #24
 8c0:	00040221 	andeq	r0, r4, r1, lsr #4
 8c4:	Address 0x000008c4 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	4f454750 	svcmi	0x00454750
   4:	5254454d 	subspl	r4, r4, #322961408	; 0x13400000
   8:	65670059 	strbvs	r0, [r7, #-89]!	; 0xffffffa7
   c:	756e5f6f 	strbvc	r5, [lr, #-3951]!	; 0xfffff091
  10:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
  14:	5c3a5a00 			; <UNDEFINED> instruction: 0x5c3a5a00
  18:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
  1c:	70535c32 	subsvc	r5, r3, r2, lsr ip
  20:	6d006c65 	stcvs	12, cr6, [r0, #-404]	; 0xfffffe6c
  24:	0065766f 	rsbeq	r7, r5, pc, ror #12
  28:	5f746163 	svcpl	0x00746163
  2c:	5f6e7572 	svcpl	0x006e7572
  30:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; fffffe9c <keyb_state+0xdfff96b4>
  34:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
  38:	72696400 	rsbvc	r6, r9, #0, 8
  3c:	69640078 	stmdbvs	r4!, {r3, r4, r5, r6}^
  40:	63007972 	movwvs	r7, #2418	; 0x972
  44:	6a5f7461 	bvs	17dd1d0 <startup-0x1e822e30>
  48:	5f706d75 	svcpl	0x00706d75
  4c:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; fffffeb8 <keyb_state+0xdfff96d0>
  50:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
  54:	494f5000 	stmdbmi	pc, {ip, lr}^	; <UNPREDICTABLE>
  58:	7500544e 	strvc	r5, [r0, #-1102]	; 0xfffffbb2
  5c:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
  60:	2064656e 	rsbcs	r6, r4, lr, ror #10
  64:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
  68:	61726400 	cmnvs	r2, r0, lsl #8
  6c:	65730077 	ldrbvs	r0, [r3, #-119]!	; 0xffffff89
  70:	70735f74 	rsbsvc	r5, r3, r4, ror pc
  74:	00646565 	rsbeq	r6, r4, r5, ror #10
  78:	78736f70 	ldmdavc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
  7c:	736f7000 	cmnvc	pc, #0
  80:	6f6d0079 	svcvs	0x006d0079
  84:	5f657375 	svcpl	0x00657375
  88:	6e617473 	mcrvs	4, 3, r7, cr1, cr3, {3}
  8c:	65675f64 	strbvs	r5, [r7, #-3940]!	; 0xfffff09c
  90:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
  94:	64007972 	strvs	r7, [r0], #-2418	; 0xfffff68e
  98:	736d6d61 	cmnvc	sp, #6208	; 0x1840
  9c:	72616775 	rsbvc	r6, r1, #30670848	; 0x1d40000
  a0:	6f6d0065 	svcvs	0x006d0065
  a4:	5f657375 	svcpl	0x00657375
  a8:	5f6e7572 	svcpl	0x006e7572
  ac:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; ffffff18 <keyb_state+0xdfff9730>
  b0:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
  b4:	6f656700 	svcvs	0x00656700
  b8:	6d756a5f 	vldmdbvs	r5!, {s13-s107}
  bc:	3a5a0070 	bcc	1680284 <startup-0x1e97fd7c>
  c0:	6570532f 	ldrbvs	r5, [r0, #-815]!	; 0xfffffcd1
  c4:	532f326c 			; <UNDEFINED> instruction: 0x532f326c
  c8:	2f6c6570 	svccs	0x006c6570
  cc:	66617267 	strbtvs	r7, [r1], -r7, ror #4
  d0:	632e6b69 			; <UNDEFINED> instruction: 0x632e6b69
  d4:	6f656700 	svcvs	0x00656700
  d8:	6e75725f 	mrcvs	2, 3, r7, cr5, cr15, {2}
  dc:	6f656700 	svcvs	0x00656700
  e0:	6174735f 	cmnvs	r4, pc, asr r3
  e4:	7500646e 	strvc	r6, [r0, #-1134]	; 0xfffffb92
  e8:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
  ec:	2064656e 	rsbcs	r6, r4, lr, ror #10
  f0:	00746e69 	rsbseq	r6, r4, r9, ror #28
  f4:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
  f8:	6174735f 	cmnvs	r4, pc, asr r3
  fc:	675f646e 	ldrbvs	r6, [pc, -lr, ror #8]
 100:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 104:	00797274 	rsbseq	r7, r9, r4, ror r2
 108:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
 10c:	7a697300 	bvc	1a5cd14 <startup-0x1e5a32ec>
 110:	73007865 	movwvc	r7, #2149	; 0x865
 114:	79657a69 	stmdbvc	r5!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
 118:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
 11c:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
 120:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
 124:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
 128:	31393130 	teqcc	r9, r0, lsr r1
 12c:	20353230 	eorscs	r3, r5, r0, lsr r2
 130:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
 134:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
 138:	415b2029 	cmpmi	fp, r9, lsr #32
 13c:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
 140:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
 144:	6172622d 	cmnvs	r2, sp, lsr #4
 148:	2068636e 	rsbcs	r6, r8, lr, ror #6
 14c:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
 150:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 154:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
 158:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
 15c:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
 160:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
 164:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
 168:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
 16c:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
 170:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
 174:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
 178:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
 17c:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
 180:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
 184:	20672d20 	rsbcs	r2, r7, r0, lsr #26
 188:	20304f2d 	eorscs	r4, r0, sp, lsr #30
 18c:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
 190:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
 194:	72696200 	rsbvc	r6, r9, #0, 4
 198:	75725f64 	ldrbvc	r5, [r2, #-3940]!	; 0xfffff09c
 19c:	65675f6e 	strbvs	r5, [r7, #-3950]!	; 0xfffff092
 1a0:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 1a4:	64007972 	strvs	r7, [r0], #-2418	; 0xfffff68e
 1a8:	75736d61 	ldrbvc	r6, [r3, #-3425]!	; 0xfffff29f
 1ac:	65726167 	ldrbvs	r6, [r2, #-359]!	; 0xfffffe99
 1b0:	6f65675f 	svcvs	0x0065675f
 1b4:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 1b8:	61630079 	smcvs	12297	; 0x3009
 1bc:	75645f74 	strbvc	r5, [r4, #-3956]!	; 0xfffff08c
 1c0:	675f6b63 	ldrbvs	r6, [pc, -r3, ror #22]
 1c4:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 1c8:	00797274 	rsbseq	r7, r9, r4, ror r2
 1cc:	5f746163 	svcpl	0x00746163
 1d0:	6e617473 	mcrvs	4, 3, r7, cr1, cr3, {3}
 1d4:	65675f64 	strbvs	r5, [r7, #-3940]!	; 0xfffff09c
 1d8:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 1dc:	6e007972 			; <UNDEFINED> instruction: 0x6e007972
 1e0:	6f706d75 	svcvs	0x00706d75
 1e4:	73746e69 	cmnvc	r4, #1680	; 0x690
 1e8:	6f656700 	svcvs	0x00656700
 1ec:	6375645f 	cmnvs	r5, #1593835520	; 0x5f000000
 1f0:	6f6d006b 	svcvs	0x006d006b
 1f4:	00657375 	rsbeq	r7, r5, r5, ror r3
 1f8:	6279656b 	rsbsvs	r6, r9, #448790528	; 0x1ac00000
 1fc:	74634100 	strbtvc	r4, [r3], #-256	; 0xffffff00
 200:	74617669 	strbtvc	r7, [r1], #-1641	; 0xfffff997
 204:	776f5265 	strbvc	r5, [pc, -r5, ror #4]!
 208:	61655200 	cmnvs	r5, r0, lsl #4
 20c:	6c6f4364 	stclvs	3, cr4, [pc], #-400	; 84 <startup-0x1fffff7c>
 210:	006e6d75 	rsbeq	r6, lr, r5, ror sp
 214:	532f3a5a 			; <UNDEFINED> instruction: 0x532f3a5a
 218:	326c6570 	rsbcc	r6, ip, #112, 10	; 0x1c000000
 21c:	6570532f 	ldrbvs	r5, [r0, #-815]!	; 0xfffffcd1
 220:	656b2f6c 	strbvs	r2, [fp, #-3948]!	; 0xfffff094
 224:	64617079 	strbtvs	r7, [r1], #-121	; 0xffffff87
 228:	6972645f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, sp, lr}^
 22c:	2e726576 	mrccs	5, 3, r6, cr2, cr6, {3}
 230:	656b0063 	strbvs	r0, [fp, #-99]!	; 0xffffff9d
 234:	735f6279 	cmpvc	pc, #-1879048185	; 0x90000007
 238:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 23c:	2f3a5a00 	svccs	0x003a5a00
 240:	6c657053 	stclvs	0, cr7, [r5], #-332	; 0xfffffeb4
 244:	70532f32 	subsvc	r2, r3, r2, lsr pc
 248:	692f6c65 	stmdbvs	pc!, {r0, r2, r5, r6, sl, fp, sp, lr}	; <UNPREDICTABLE>
 24c:	2e74696e 	vsubcs.f16	s13, s8, s29	; <UNPREDICTABLE>
 250:	3a5a0063 	bcc	16803e4 <startup-0x1e97fc1c>
 254:	6570532f 	ldrbvs	r5, [r0, #-815]!	; 0xfffffcd1
 258:	532f326c 			; <UNDEFINED> instruction: 0x532f326c
 25c:	2f6c6570 	svccs	0x006c6570
 260:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 264:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
 268:	70610063 	rsbvc	r0, r1, r3, rrx
 26c:	6e695f70 	mcrvs	15, 3, r5, cr9, cr0, {3}
 270:	6d007469 	cfstrsvs	mvf7, [r0, #-420]	; 0xfffffe5c
 274:	006e6961 	rsbeq	r6, lr, r1, ror #18
 278:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 27c:	00707574 	rsbseq	r7, r0, r4, ror r5
 280:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; ec <startup-0x1fffff14>
 284:	69727465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 288:	7461635f 	strbtvc	r6, [r1], #-863	; 0xfffffca1
 28c:	424f5000 	submi	r5, pc, #0
 290:	5443454a 	strbpl	r4, [r3], #-1354	; 0xfffffab6
 294:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 298:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 1de <startup-0x1ffffe22>	; <UNPREDICTABLE>
 29c:	696c6c69 	stmdbvs	ip!, {r0, r3, r5, r6, sl, fp, sp, lr}^
 2a0:	63736100 	cmnvs	r3, #0, 2
 2a4:	675f6969 	ldrbvs	r6, [pc, -r9, ror #18]
 2a8:	786f746f 	stmdavc	pc!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
 2ac:	73610079 	cmnvc	r1, #121	; 0x79
 2b0:	5f696963 	svcpl	0x00696963
 2b4:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 2b8:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
 2bc:	73610064 	cmnvc	r1, #100	; 0x64
 2c0:	5f696963 	svcpl	0x00696963
 2c4:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 2c8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 2cc:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 2d0:	61007261 	tstvs	r0, r1, ror #4
 2d4:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 2d8:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 2dc:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 2e0:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 2e4:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 2e8:	3a5a0072 	bcc	16804b8 <startup-0x1e97fb48>
 2ec:	6570532f 	ldrbvs	r5, [r0, #-815]!	; 0xfffffcd1
 2f0:	532f326c 			; <UNDEFINED> instruction: 0x532f326c
 2f4:	2f6c6570 	svccs	0x006c6570
 2f8:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 2fc:	69645f69 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 300:	616c7073 	smcvs	50947	; 0xc703
 304:	00632e79 	rsbeq	r2, r3, r9, ror lr
 308:	616c6564 	cmnvs	ip, r4, ror #10
 30c:	35325f79 	ldrcc	r5, [r2, #-3961]!	; 0xfffff087
 310:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 314:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 318:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 31c:	5f657469 	svcpl	0x00657469
 320:	61746164 	cmnvs	r4, r4, ror #2
 324:	63736100 	cmnvs	r3, #0, 2
 328:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 32c:	5f646165 	svcpl	0x00646165
 330:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 334:	61007375 	tstvs	r0, r5, ror r3
 338:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 33c:	6165725f 	cmnvs	r5, pc, asr r2
 340:	6f635f64 	svcvs	0x00635f64
 344:	6f72746e 	svcvs	0x0072746e
 348:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 34c:	63736100 	cmnvs	r3, #0, 2
 350:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 354:	5f646165 	svcpl	0x00646165
 358:	61746164 	cmnvs	r4, r4, ror #2
 35c:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 360:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 2a6 <startup-0x1ffffd5a>	; <UNPREDICTABLE>
 364:	6f726369 	svcvs	0x00726369
 368:	72646100 	rsbvc	r6, r4, #0, 2
 36c:	00737365 	rsbseq	r7, r3, r5, ror #6
 370:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 374:	00646e61 	rsbeq	r6, r4, r1, ror #28
 378:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
 37c:	63736100 	cmnvs	r3, #0, 2
 380:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 384:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 388:	6168635f 	cmnvs	r8, pc, asr r3
 38c:	73610072 	cmnvc	r1, #114	; 0x72
 390:	5f696963 	svcpl	0x00696963
 394:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 398:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 39c:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 3a0:	63736100 	cmnvs	r3, #0, 2
 3a4:	695f6969 	ldmdbvs	pc, {r0, r3, r5, r6, r8, fp, sp, lr}^	; <UNPREDICTABLE>
 3a8:	0074696e 	rsbseq	r6, r4, lr, ror #18
 3ac:	73746968 	cmnvc	r4, #104, 18	; 0x1a0000
 3b0:	6f6f725f 	svcvs	0x006f725f
 3b4:	666f0066 	strbtvs	r0, [pc], -r6, rrx
 3b8:	74657366 	strbtvc	r7, [r5], #-870	; 0xfffffc9a
 3bc:	64007832 	strvs	r7, [r0], #-2098	; 0xfffff7ce
 3c0:	5f776172 	svcpl	0x00776172
 3c4:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 3c8:	6d007463 	cfstrsvs	mvf7, [r0, #-396]	; 0xfffffe74
 3cc:	5f65766f 	svcpl	0x0065766f
 3d0:	73756f6d 	cmnvc	r5, #436	; 0x1b4
 3d4:	6a626f65 	bvs	189c170 <startup-0x1e763e90>
 3d8:	00746365 	rsbseq	r6, r4, r5, ror #6
 3dc:	532f3a5a 			; <UNDEFINED> instruction: 0x532f3a5a
 3e0:	326c6570 	rsbcc	r6, ip, #112, 10	; 0x1c000000
 3e4:	6570532f 	ldrbvs	r5, [r0, #-815]!	; 0xfffffcd1
 3e8:	72672f6c 	rsbvc	r2, r7, #108, 30	; 0x1b0
 3ec:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 3f0:	72645f63 	rsbvc	r5, r4, #396	; 0x18c
 3f4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 3f8:	6d00632e 	stcvs	3, cr6, [r0, #-184]	; 0xffffff48
 3fc:	5f65766f 	svcpl	0x0065766f
 400:	736d6164 	cmnvc	sp, #100, 2
 404:	72616775 	rsbvc	r6, r1, #30670848	; 0x1d40000
 408:	666f0065 	strbtvs	r0, [pc], -r5, rrx
 40c:	74657366 	strbtvc	r7, [r5], #-870	; 0xfffffc9a
 410:	6f007931 	svcvs	0x00007931
 414:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
 418:	00783174 	rsbseq	r3, r8, r4, ror r1
 41c:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
 420:	6375645f 	cmnvs	r5, #1593835520	; 0x5f000000
 424:	61635f6b 	cmnvs	r3, fp, ror #30
 428:	6a626f74 	bvs	189c200 <startup-0x1e763e00>
 42c:	00746365 	rsbseq	r6, r4, r5, ror #6
 430:	70617267 	rsbvc	r7, r1, r7, ror #4
 434:	5f636968 	svcpl	0x00636968
 438:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0xfffff690
 43c:	65735f6c 	ldrbvs	r5, [r3, #-3948]!	; 0xfffff094
 440:	6f6d0074 	svcvs	0x006d0074
 444:	635f6576 	cmpvs	pc, #494927872	; 0x1d800000
 448:	626f7461 	rsbvs	r7, pc, #1627389952	; 0x61000000
 44c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 450:	66666f00 	strbtvs	r6, [r6], -r0, lsl #30
 454:	32746573 	rsbscc	r6, r4, #482344960	; 0x1cc00000
 458:	65730079 	ldrbvs	r0, [r3, #-121]!	; 0xffffff87
 45c:	626f5f74 	rsbvs	r5, pc, #116, 30	; 0x1d0
 460:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 464:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
 468:	65006465 	strvs	r6, [r0, #-1125]	; 0xfffffb9b
 46c:	74636178 	strbtvc	r6, [r3], #-376	; 0xfffffe88
 470:	6a626f5f 	bvs	189c1f4 <startup-0x1e763e0c>
 474:	73746365 	cmnvc	r4, #-1811939327	; 0x94000001
 478:	65766f5f 	ldrbvs	r6, [r6, #-3935]!	; 0xfffff0a1
 47c:	70616c72 	rsbvc	r6, r1, r2, ror ip
 480:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 484:	756a5f65 	strbvc	r5, [sl, #-3941]!	; 0xfffff09b
 488:	635f706d 	cmpvs	pc, #109	; 0x6d
 48c:	626f7461 	rsbvs	r7, pc, #1627389952	; 0x61000000
 490:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 494:	61726700 	cmnvs	r2, r0, lsl #14
 498:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 49c:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 4a0:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
 4a4:	00657a69 	rsbeq	r7, r5, r9, ror #20
 4a8:	61656c63 	cmnvs	r5, r3, ror #24
 4ac:	626f5f72 	rsbvs	r5, pc, #456	; 0x1c8
 4b0:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 4b4:	61726700 	cmnvs	r2, r0, lsl #14
 4b8:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 4bc:	7869705f 	stmdavc	r9!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
 4c0:	635f6c65 	cmpvs	pc, #25856	; 0x6500
 4c4:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 4c8:	65707300 	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
 4cc:	00786465 	rsbseq	r6, r8, r5, ror #8
 4d0:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 4d4:	67007964 	strvs	r7, [r0, -r4, ror #18]
 4d8:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 4dc:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 4e0:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 4e4:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
 4e8:	006e6565 	rsbeq	r6, lr, r5, ror #10

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000054 	andeq	r0, r0, r4, asr r0
  20:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  24:	41018e02 	tstmi	r1, r2, lsl #28
  28:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  2c:	00000007 	andeq	r0, r0, r7
  30:	0000001c 	andeq	r0, r0, ip, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000064 	andcs	r0, r0, r4, rrx
  3c:	00000054 	andeq	r0, r0, r4, asr r0
  40:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  44:	41018e02 	tstmi	r1, r2, lsl #28
  48:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  4c:	00000007 	andeq	r0, r0, r7
  50:	0000001c 	andeq	r0, r0, ip, lsl r0
  54:	00000000 	andeq	r0, r0, r0
  58:	200000b8 	strhcs	r0, [r0], -r8
  5c:	00000068 	andeq	r0, r0, r8, rrx
  60:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
  64:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
  68:	280e4101 	stmdacs	lr, {r0, r8, lr}
  6c:	00070d41 	andeq	r0, r7, r1, asr #26
  70:	0000000c 	andeq	r0, r0, ip
  74:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  78:	7c020001 	stcvc	0, cr0, [r2], {1}
  7c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  80:	0000000c 	andeq	r0, r0, ip
  84:	00000070 	andeq	r0, r0, r0, ror r0
  88:	20000000 	andcs	r0, r0, r0
  8c:	0000000c 	andeq	r0, r0, ip
  90:	00000018 	andeq	r0, r0, r8, lsl r0
  94:	00000070 	andeq	r0, r0, r0, ror r0
  98:	20000120 	andcs	r0, r0, r0, lsr #2
  9c:	00000050 	andeq	r0, r0, r0, asr r0
  a0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  a4:	41018e02 	tstmi	r1, r2, lsl #28
  a8:	0000070d 	andeq	r0, r0, sp, lsl #14
  ac:	0000001c 	andeq	r0, r0, ip, lsl r0
  b0:	00000070 	andeq	r0, r0, r0, ror r0
  b4:	20000170 	andcs	r0, r0, r0, ror r1
  b8:	00000088 	andeq	r0, r0, r8, lsl #1
  bc:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
  c0:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
  c4:	200e4101 	andcs	r4, lr, r1, lsl #2
  c8:	00070d41 	andeq	r0, r7, r1, asr #26
  cc:	0000000c 	andeq	r0, r0, ip
  d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  d4:	7c020001 	stcvc	0, cr0, [r2], {1}
  d8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  dc:	00000018 	andeq	r0, r0, r8, lsl r0
  e0:	000000cc 	andeq	r0, r0, ip, asr #1
  e4:	200001f8 	strdcs	r0, [r0], -r8
  e8:	00000044 	andeq	r0, r0, r4, asr #32
  ec:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  f0:	41018e02 	tstmi	r1, r2, lsl #28
  f4:	0000070d 	andeq	r0, r0, sp, lsl #14
  f8:	0000001c 	andeq	r0, r0, ip, lsl r0
  fc:	000000cc 	andeq	r0, r0, ip, asr #1
 100:	2000023c 	andcs	r0, r0, ip, lsr r2
 104:	00000046 	andeq	r0, r0, r6, asr #32
 108:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 10c:	41018e02 	tstmi	r1, r2, lsl #28
 110:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 114:	00000007 	andeq	r0, r0, r7
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	000000cc 	andeq	r0, r0, ip, asr #1
 120:	20000282 	andcs	r0, r0, r2, lsl #5
 124:	0000005c 	andeq	r0, r0, ip, asr r0
 128:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 12c:	41018e02 	tstmi	r1, r2, lsl #28
 130:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 134:	00000007 	andeq	r0, r0, r7
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	000000cc 	andeq	r0, r0, ip, asr #1
 140:	200002de 	ldrdcs	r0, [r0], -lr
 144:	00000032 	andeq	r0, r0, r2, lsr r0
 148:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 14c:	41018e02 	tstmi	r1, r2, lsl #28
 150:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 154:	00000007 	andeq	r0, r0, r7
 158:	0000001c 	andeq	r0, r0, ip, lsl r0
 15c:	000000cc 	andeq	r0, r0, ip, asr #1
 160:	20000310 	andcs	r0, r0, r0, lsl r3
 164:	0000003c 	andeq	r0, r0, ip, lsr r0
 168:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 16c:	41018e02 	tstmi	r1, r2, lsl #28
 170:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 174:	00000007 	andeq	r0, r0, r7
 178:	0000001c 	andeq	r0, r0, ip, lsl r0
 17c:	000000cc 	andeq	r0, r0, ip, asr #1
 180:	2000034c 	andcs	r0, r0, ip, asr #6
 184:	00000030 	andeq	r0, r0, r0, lsr r0
 188:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 18c:	41018e02 	tstmi	r1, r2, lsl #28
 190:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 194:	00000007 	andeq	r0, r0, r7
 198:	0000001c 	andeq	r0, r0, ip, lsl r0
 19c:	000000cc 	andeq	r0, r0, ip, asr #1
 1a0:	2000037c 	andcs	r0, r0, ip, ror r3
 1a4:	00000034 	andeq	r0, r0, r4, lsr r0
 1a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1ac:	41018e02 	tstmi	r1, r2, lsl #28
 1b0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1b4:	00000007 	andeq	r0, r0, r7
 1b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1bc:	000000cc 	andeq	r0, r0, ip, asr #1
 1c0:	200003b0 			; <UNDEFINED> instruction: 0x200003b0
 1c4:	00000040 	andeq	r0, r0, r0, asr #32
 1c8:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 1cc:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 1d0:	180e4101 	stmdane	lr, {r0, r8, lr}
 1d4:	00070d41 	andeq	r0, r7, r1, asr #26
 1d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1dc:	000000cc 	andeq	r0, r0, ip, asr #1
 1e0:	200003f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 1e4:	00000040 	andeq	r0, r0, r0, asr #32
 1e8:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 1ec:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 1f0:	180e4101 	stmdane	lr, {r0, r8, lr}
 1f4:	00070d41 	andeq	r0, r7, r1, asr #26
 1f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1fc:	000000cc 	andeq	r0, r0, ip, asr #1
 200:	20000430 	andcs	r0, r0, r0, lsr r4
 204:	0000002a 	andeq	r0, r0, sl, lsr #32
 208:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 20c:	41018e02 	tstmi	r1, r2, lsl #28
 210:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 214:	00000007 	andeq	r0, r0, r7
 218:	0000001c 	andeq	r0, r0, ip, lsl r0
 21c:	000000cc 	andeq	r0, r0, ip, asr #1
 220:	2000045a 	andcs	r0, r0, sl, asr r4
 224:	0000002a 	andeq	r0, r0, sl, lsr #32
 228:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 22c:	41018e02 	tstmi	r1, r2, lsl #28
 230:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 234:	00000007 	andeq	r0, r0, r7
 238:	00000018 	andeq	r0, r0, r8, lsl r0
 23c:	000000cc 	andeq	r0, r0, ip, asr #1
 240:	20000484 	andcs	r0, r0, r4, lsl #9
 244:	0000009a 	muleq	r0, sl, r0
 248:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 24c:	41018e02 	tstmi	r1, r2, lsl #28
 250:	0000070d 	andeq	r0, r0, sp, lsl #14
 254:	0000001c 	andeq	r0, r0, ip, lsl r0
 258:	000000cc 	andeq	r0, r0, ip, asr #1
 25c:	2000051e 	andcs	r0, r0, lr, lsl r5
 260:	0000003c 	andeq	r0, r0, ip, lsr r0
 264:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 268:	41018e02 	tstmi	r1, r2, lsl #28
 26c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 270:	00000007 	andeq	r0, r0, r7
 274:	0000001c 	andeq	r0, r0, ip, lsl r0
 278:	000000cc 	andeq	r0, r0, ip, asr #1
 27c:	2000055a 	andcs	r0, r0, sl, asr r5
 280:	00000038 	andeq	r0, r0, r8, lsr r0
 284:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 288:	41018e02 	tstmi	r1, r2, lsl #28
 28c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 290:	00000007 	andeq	r0, r0, r7
 294:	0000000c 	andeq	r0, r0, ip
 298:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 29c:	7c020001 	stcvc	0, cr0, [r2], {1}
 2a0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2a4:	0000000c 	andeq	r0, r0, ip
 2a8:	00000294 	muleq	r0, r4, r2
 2ac:	20000594 	mulcs	r0, r4, r5
 2b0:	00000006 	andeq	r0, r0, r6
 2b4:	0000000c 	andeq	r0, r0, ip
 2b8:	00000294 	muleq	r0, r4, r2
 2bc:	2000059a 	mulcs	r0, sl, r5
 2c0:	00000006 	andeq	r0, r0, r6
 2c4:	0000000c 	andeq	r0, r0, ip
 2c8:	00000294 	muleq	r0, r4, r2
 2cc:	200005a0 	andcs	r0, r0, r0, lsr #11
 2d0:	00000006 	andeq	r0, r0, r6
 2d4:	0000000c 	andeq	r0, r0, ip
 2d8:	00000294 	muleq	r0, r4, r2
 2dc:	200005a6 	andcs	r0, r0, r6, lsr #11
 2e0:	00000006 	andeq	r0, r0, r6
 2e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2e8:	00000294 	muleq	r0, r4, r2
 2ec:	200005ac 	andcs	r0, r0, ip, lsr #11
 2f0:	0000016e 	andeq	r0, r0, lr, ror #2
 2f4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2f8:	41018e02 	tstmi	r1, r2, lsl #28
 2fc:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 300:	00000007 	andeq	r0, r0, r7
 304:	0000001c 	andeq	r0, r0, ip, lsl r0
 308:	00000294 	muleq	r0, r4, r2
 30c:	2000071a 	andcs	r0, r0, sl, lsl r7
 310:	0000016e 	andeq	r0, r0, lr, ror #2
 314:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 318:	41018e02 	tstmi	r1, r2, lsl #28
 31c:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 320:	00000007 	andeq	r0, r0, r7
 324:	0000001c 	andeq	r0, r0, ip, lsl r0
 328:	00000294 	muleq	r0, r4, r2
 32c:	20000888 	andcs	r0, r0, r8, lsl #17
 330:	00000030 	andeq	r0, r0, r0, lsr r0
 334:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 338:	41018e02 	tstmi	r1, r2, lsl #28
 33c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 340:	00000007 	andeq	r0, r0, r7
 344:	0000001c 	andeq	r0, r0, ip, lsl r0
 348:	00000294 	muleq	r0, r4, r2
 34c:	200008b8 			; <UNDEFINED> instruction: 0x200008b8
 350:	00000058 	andeq	r0, r0, r8, asr r0
 354:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 358:	41018e02 	tstmi	r1, r2, lsl #28
 35c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 360:	00000007 	andeq	r0, r0, r7
 364:	0000001c 	andeq	r0, r0, ip, lsl r0
 368:	00000294 	muleq	r0, r4, r2
 36c:	20000910 	andcs	r0, r0, r0, lsl r9
 370:	0000002e 	andeq	r0, r0, lr, lsr #32
 374:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 378:	41018e02 	tstmi	r1, r2, lsl #28
 37c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 380:	00000007 	andeq	r0, r0, r7
 384:	0000001c 	andeq	r0, r0, ip, lsl r0
 388:	00000294 	muleq	r0, r4, r2
 38c:	2000093e 	andcs	r0, r0, lr, lsr r9
 390:	0000003a 	andeq	r0, r0, sl, lsr r0
 394:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 398:	41018e02 	tstmi	r1, r2, lsl #28
 39c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 3a0:	00000007 	andeq	r0, r0, r7
 3a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3a8:	00000294 	muleq	r0, r4, r2
 3ac:	20000978 	andcs	r0, r0, r8, ror r9
 3b0:	00000026 	andeq	r0, r0, r6, lsr #32
 3b4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3b8:	41018e02 	tstmi	r1, r2, lsl #28
 3bc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 3c0:	00000007 	andeq	r0, r0, r7
 3c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3c8:	00000294 	muleq	r0, r4, r2
 3cc:	2000099e 	mulcs	r0, lr, r9
 3d0:	0000001e 	andeq	r0, r0, lr, lsl r0
 3d4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3d8:	41018e02 	tstmi	r1, r2, lsl #28
 3dc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 3e0:	00000007 	andeq	r0, r0, r7
 3e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3e8:	00000294 	muleq	r0, r4, r2
 3ec:	200009bc 			; <UNDEFINED> instruction: 0x200009bc
 3f0:	00000020 	andeq	r0, r0, r0, lsr #32
 3f4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3f8:	41018e02 	tstmi	r1, r2, lsl #28
 3fc:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 400:	00000007 	andeq	r0, r0, r7
 404:	0000001c 	andeq	r0, r0, ip, lsl r0
 408:	00000294 	muleq	r0, r4, r2
 40c:	200009dc 	ldrdcs	r0, [r0], -ip
 410:	0000002c 	andeq	r0, r0, ip, lsr #32
 414:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 418:	41018e02 	tstmi	r1, r2, lsl #28
 41c:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 420:	00000007 	andeq	r0, r0, r7
 424:	0000000c 	andeq	r0, r0, ip
 428:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 42c:	7c010001 	stcvc	0, cr0, [r1], {1}
 430:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 434:	0000000c 	andeq	r0, r0, ip
 438:	00000424 	andeq	r0, r0, r4, lsr #8
 43c:	20000a09 	andcs	r0, r0, r9, lsl #20
 440:	0000010a 	andeq	r0, r0, sl, lsl #2

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000120 	andcs	r0, r0, r0, lsr #2
   4:	200001f8 	strdcs	r0, [r0], -r8
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
